Fast Auxiliary Space Preconditioning (FASP) Solver Package README

-- Test Problems and Regression Test Suite

last modified on 04/25/2012


================================
1. Introduction
================================
This directory contains a set of problems for regression tests and tools for 
developing the FASP package.

The FASP package is designed for developing and testing new efficient solvers 
and preconditioners for discrete partial differential equations (PDEs) or 
systems of PDEs. The main components of the package are standard Krylov methods, 
algebaric multigrid methods, and incomplete factorization methods. Based on 
these standard techniques, we build efficient solvers, based on the framework 
of Auxiliary Space Preconditioning, for several complicated applications. 
Current examples include the fluid dynamics, underground water simulation, 
the black oil model in reservoir simulation, and so on. 

This software is free software distributed under the Lesser General Public 
License or LGPL, version 3.0 or any later versions. This software distributed 
in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License 
along with FASP. If not, see <http://www.gnu.org/licenses/>.


================================
2. Build
================================
To compile, you need a Fortran and a C compiler. By default, we use gfortan 
and gcc, respectively; see Makefile for details. 

Now you are ready to make library and the test problem(s) by 

    $ make
or
    $ make testall

You can use

    $ make clean 

to clean up the directory by removing object files. Or, you can use

    $ make allclean 

to remove the executables also and gives a completely clean directory. 

There are other test problems included in this directory. To see more details, try 

    $ make help


================================
3. Test
================================
By running the executable test.ex, we can get numerical results for different test 
examples. The terminal command to invoke the test problems is

    $ ./test.ex

which tests a bunch of solvers at a single call. 


================================
4. Input
================================
And test.ex reads parameters from ini/input.dat, where you can choose:

* solver type:   1  CG method
                 2  BiCGstab method
                 3  MinRes method
                 4  GMRes method
                 5  Variable restarting GMRes method
                 6  Variable restarting FGMRes method
                 7  GCG method
                 21 AMG as solver
                 22 FMG as solver
                 31 SuperLU (external)
                 32 UMFPACK (external)

* precond type:  0  No preconditioners
                 1  Diagonal preconditioner
                 2  AMG preconditioner
                 3  ILU preconditioner (external)

* solver parameters (which we do not discuss here, see details in the documentation 
  	 	     contained in doc directory).

  - coarsening type ( 1--3 )
  - interpolation type ( 1--3 ) 
  - max_row_sum ( 0, 1 )
  - strong_threshold ( 0, 1 )
  - truncation_threshold ( 0, 1 )

Note: This is not a complete list of available parameters. For more details, please 
refer to the user documentation.


================================
5. Tree Structure
================================
  - data:    Test data files
  - include: Header files
  - ini:     Input files for parameters
  - lib:     Libraries 
  - main:    Test functions in C and Fortran
  - out:     Output files
  - src:     Source codes
