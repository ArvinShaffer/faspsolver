Fast Auxiliary Space Preconditioning (FASP) Solver Package README

Last modified on 05/16/2012 by Chensong Zhang
================================================================================

The FASP package is designed for developing and testing new efficient solvers 
and preconditioners for discrete partial differential equations (PDEs) or 
systems of PDEs. The main components of the package are standard Krylov methods, 
algebaric multigrid methods, and incomplete factorization methods. Based on 
these standard techniques, we build efficient solvers, based on the framework 
of Auxiliary Space Preconditioning, for several complicated applications. 
Current examples include the fluid dynamics, underground water simulation, 
the black oil model in reservoir simulation, and so on. 

This software is free software distributed under the Lesser General Public 
License or LGPL, version 3.0 or any later versions. This software distributed 
in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License 
along with FASP. If not, see <http://www.gnu.org/licenses/>.

================================================================================

To compile, you need a Fortran and a C compiler. By default, we use gfortan 
and gcc, respectively; see Makefile for details. 

This package has been tested with: 

--Linux and Mac
    C/C++:   gcc-4.2, gcc-4.4, gcc-4.5, gcc-4.6, icc-11.x; 
    Fortran: gfortran-4.4, gfortran-4.5, gfortran-4.6, g95-0.92, ifort-11.x.

--Windows XP and Windows Vista
    C/C++:   VC++ 2005, VC++ 2008, icc-11.1.x, icc-12.0.x;
    Fortran: ifort-11.1.x, ifort-12.0.x. 

================================================================================

To setup the environment, you need to do two simple steps: 

Step 1. Setup directories for FASP:
     
     [faspsolver]$ ./util/setup.sh

Step 2. Compile the library: 
     
     [faspsolver/core]$ make

Step 3. Now you can build a few test problems:
     
     [faspsolver/test]$ make

     For helps on building, use:
     
     [faspsolver/test]$ make help 

You may want to adjust the "make.inc" for your personal computer environement 
or choose different compiling parameters, etc. For more details, read the README
files in "core" and "test" directories.  

Some simple examples can be found in the "tutorial" directory and step-by-step 
instructions are included in the examples therein.
