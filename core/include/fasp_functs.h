/*******************************************************************/  
/* This header file is automatically generated with "make headers".*/
/* WARNING: DO NOT EDIT THIS FILE!!!                               */  
/*******************************************************************/

/*! \file fasp_functs.h
 *  \brief Function decroration for the FASP package
 */ 

#include "fasp.h" 
#include "fasp_block.h" 

/*-------- In file: amg.c --------*/

void fasp_solver_amg (dCSRmat *A, 
                      dvector *b, 
                      dvector *x, 
                      AMG_param *param);


/*-------- In file: amg_omp.c --------*/

int fasp_solver_amg_omp (dCSRmat *A,  
                         dvector *b,  
                         dvector *x,  
                         AMG_param *param,  
                         int nthreads,  
                         int openmp_holds) ;

int fasp_solver_amg1_omp (dCSRmat *A,  
                         dvector *b,  
                         dvector *x,  
                         AMG_param *param,  
                         int nthreads,  
                         int openmp_holds) ;

int fasp_solver_amg2_omp (dCSRmat *A,  
                         dvector *b,  
                         dvector *x,  
                         AMG_param *param,  
                         int nthreads,  
                         int openmp_holds) ;

int fasp_solver_amg3_omp (dCSRmat *A,  
                         dvector *b,  
                         dvector *x,  
                         AMG_param *param,  
                         int nthreads,  
                         int openmp_holds) ;


/*-------- In file: amg_setup_cr.c --------*/

INT fasp_amg_setup_cr (AMG_data *mgl, 
                       AMG_param *param);


/*-------- In file: amg_setup_rs.c --------*/

INT fasp_amg_setup_rs (AMG_data *mgl, 
                       AMG_param *param);


/*-------- In file: amg_setup_rs_omp.c --------*/

int fasp_amg_setup_rs2_omp (AMG_data *mgl, 
													 AMG_param *param, 
													 int nthreads, 
													 int openmp_holds);

int fasp_amg_setup_rs1_omp (AMG_data *mgl, 
													 AMG_param *param, 
													 int nthreads, 
													 int openmp_holds);

int fasp_amg_setup_rs_omp (AMG_data *mgl, 
													 AMG_param *param, 
													 int nthreads, 
													 int openmp_holds);

int fasp_amg_setup_rs3_omp (AMG_data *mgl, 
													 AMG_param *param, 
													 int nthreads, 
													 int openmp_holds);


/*-------- In file: amg_setup_sa.c --------*/

SHORT fasp_amg_setup_sa (AMG_data *mgl, 
                         AMG_param *param);


/*-------- In file: amg_setup_sa_omp.c --------*/

int fasp_amg_setup_sa_omp (AMG_data *mgl, AMG_param *param, int nthreads, int openmp_holds);


/*-------- In file: amg_setup_ua.c --------*/

SHORT fasp_amg_setup_ua (AMG_data *mgl, 
                         AMG_param *param);


/*-------- In file: amg_solve.c --------*/

SHORT fasp_amg_solve (AMG_data *mgl, 
                      AMG_param *param);

SHORT fasp_amg_solve_amli (AMG_data *mgl, 
                           AMG_param *param);

SHORT fasp_amg_solve_nl_amli (AMG_data *mgl, 
                              AMG_param *param);

SHORT fasp_famg_solve (AMG_data *mgl, 
                       AMG_param *param);


/*-------- In file: amg_solve_omp.c --------*/

INT fasp_amg_solve_omp (AMG_data *mgl, 
												AMG_param *param, 
												INT nthreads, 
												INT openmp_holds);


/*-------- In file: amlirecur.c --------*/

void fasp_solver_amli (AMG_data *mgl, 
                       AMG_param *param, 
                       INT level);

void fasp_solver_nl_amli (AMG_data *mgl, 
                          AMG_param *param, 
                          INT level, 
                          INT num_levels);

void fasp_amg_amli_coef (REAL lambda_max, 
                         REAL lambda_min, 
                         INT degree, 
                         REAL *coef);


/*-------- In file: array.c --------*/

void fasp_array_init (REAL *x) ;

void fasp_array_set (const INT n, 
                     REAL *x, 
                     const REAL val);

void fasp_array_cp (const INT n, 
                    REAL *x, 
                    REAL *y);

void fasp_array_cp_nc3 (REAL *x, 
                        REAL *y) ;

void fasp_array_cp_nc5 (REAL *x, 
                        REAL *y) ;

void fasp_array_cp_nc7 (REAL *x, 
                        REAL *y) ;


/*-------- In file: array_omp.c --------*/

void fasp_array_set_omp (int n, 
												 double *x, 
												 double val, 
												 int nthreads, 
												 int openmp_holds);

void fasp_iarray_set_omp (int n, int *x, int val, int nthreads, int openmp_holds);

void fasp_array_cp_omp (int n, 
												double *x, 
												double *y, 
												int nthreads, 
												int openmp_holds);

void fasp_iarray_cp_omp (int n, 
												 int *x, 
												 int *y, 
												 int nthreads, 
												 int openmp_holds) ;


/*-------- In file: auxiliary.c --------*/

void fasp_aux_sh00 (dCSRmat *X, 
                    const INT ish);

void fasp_aux_ijvcrs (INT *nnzi, 
                      INT *ia, 
                      INT *ja, 
                      REAL *a, 
                      INT *n,
                      INT *nnz,
                      INT *irow, 
                      INT *jcol, 
                      REAL *aval);

void fasp_aux_uuplv0_ (REAL *u,
                       REAL *v, 
                       INT *n);

void fasp_aux_rveci (FILE *inp, 
                     INT *vec, 
                     INT *nn);

void fasp_aux_rvecd (FILE *inp,
                     REAL *vec, 
                     INT *nn);

void fasp_aux_wveci (FILE *inp, 
                     INT *vec, 
                     INT *nn);

void fasp_aux_wvecd (FILE *inp,
                     REAL *vec, 
                     INT *nn);

void fasp_aux_norm1_ (INT *ia,
                      INT *ja, 
                      REAL *a, 
                      INT *nn, 
                      REAL *a1norm);

void fasp_aux_auv_ (INT *ia,
                    INT *ja, 
                    REAL *a, 
                    REAL *u, 
                    REAL *v,
                    INT *nn, 
                    REAL *aauv);


/*-------- In file: blas_array.c --------*/

void fasp_blas_array_ax (const INT n, 
                         const REAL a, 
                         REAL *x);

void fasp_blas_array_axpy (const INT n, 
                           const REAL a, 
                           REAL *x, 
                           REAL *y);

void fasp_blas_array_axpyz (const INT n, 
                            const REAL a, 
                            REAL *x, 
                            REAL *y, 
                            REAL *z);

void fasp_blas_array_axpby (const INT n, 
                            const REAL a, 
                            REAL *x, 
                            const REAL b, 
                            REAL *y);

REAL fasp_blas_array_dotprod (const INT n, 
                              REAL *x, 
                              REAL *y);

REAL fasp_blas_array_norm1 (const INT n, 
                            REAL *x);

REAL fasp_blas_array_norm2 (const INT n, 
                            REAL *x);

REAL fasp_blas_array_norminf (const INT n, 
                              REAL *x);


/*-------- In file: blas_array_omp.c --------*/

void fasp_blas_array_scale_omp (int n, 
																const double a, 
																double *x, 
																int nthreads, 
																int openmp_holds);

void fasp_blas_array_axpy_omp (int n, 
															 const double a, 
															 double *x, 
															 double *y, 
															 int nthreads, 
															 int openmp_holds);

void fasp_blas_array_axpyz_omp (int n, 
																const double a, 
																double *x, 
																double *y, 
																double *z, 
																int nthreads, 
																int openmp_holds);

void fasp_blas_array_axpby_omp (int n, 
																const double a, 
																double *x, 
																const double b, 
																double *y, 
																int nthreads, 
																int openmp_holds) ;

double fasp_blas_array_dotprod_omp (int n, 
																		double *x, 
																		double *y, 
																		int nthreads, 
																		int openmp_holds);

double fasp_blas_array_norm1_omp (int n, 
																	double *x, 
																	int nthreads, 
																	int openmp_holds);

double fasp_blas_array_norm2_omp (int n, 
																	double *x, 
																	int nthreads, 
																	int openmp_holds);


/*-------- In file: blas_block.c --------*/

void fasp_blas_bdcsr_aAxpy (const REAL alpha, 
                            block_dCSRmat *A, 
                            REAL *x, 
                            REAL *y);

void fasp_blas_bdbsr_aAxpy (const REAL alpha, 
                            block_BSR *A, 
                            REAL *x, 
                            REAL *y);

void fasp_blas_bdbsr_mxv (block_BSR *A, 
                          REAL *x, 
                          REAL *y);


/*-------- In file: blas_block_omp.c --------*/

void fasp_blas_bdbsr_aAxpy_omp (double alpha, 
																block_BSR *A, 
																double *x, 
																double *y, 
																int nthreads, 
																int openmp_holds);

void fasp_blas_bdbsr_mxv_omp (block_BSR *A, 
															double *x, 
															double *y, 
															int nthreads, 
															int openmp_holds);


/*-------- In file: blas_bsr.c --------*/

void fasp_blas_dbsr_aAxpby (const REAL alpha, 
                            dBSRmat *A, 
                            REAL *x, 
                            const REAL beta, 
                            REAL *y );

void fasp_blas_dbsr_aAxpy (const REAL alpha, 
                           dBSRmat *A, 
                           REAL *x, 
                           REAL *y);

void fasp_blas_dbsr_mxv (dBSRmat *A, 
                         REAL *x, 
                         REAL *y);


/*-------- In file: blas_bsr_omp.c --------*/

void fasp_blas_dbsr_aAxpy_omp (double alpha, 
															 dBSRmat *A, 
															 double *x, 
															 double *y, 
															 int nthreads, 
															 int openmp_holds );

void fasp_blas_dbsr_mxv_omp (dBSRmat *A, 
														 double *x, 
														 double *y, 
														 int nthreads, 
														 int openmp_holds );


/*-------- In file: blas_csr.c --------*/

INT fasp_blas_dcsr_add (dCSRmat *A, 
                        const REAL alpha, 
                        dCSRmat *B, 
                        const REAL beta, 
                        dCSRmat *C);

void fasp_blas_dcsr_axm (dCSRmat *A, 
                         const REAL alpha);

void fasp_blas_dcsr_mxv (dCSRmat *A, 
                         REAL *x, 
                         REAL *y);

void fasp_blas_dcsr_mxv_agg (dCSRmat *A, 
                             REAL *x, 
                             REAL *y);

void fasp_blas_dcsr_aAxpy (const REAL alpha, 
                           dCSRmat *A, 
                           REAL *x,
                           REAL *y);

void fasp_blas_dcsr_aAxpy_agg (const REAL alpha, 
                               dCSRmat *A, 
                               REAL *x, 
                               REAL *y);

REAL fasp_blas_dcsr_vmv (dCSRmat *A, 
                         REAL *x, 
                         REAL *y);

void fasp_blas_dcsr_mxm (dCSRmat *A, 
                         dCSRmat *B, 
                         dCSRmat *C);

void fasp_blas_dcsr_rap (dCSRmat *R, 
                         dCSRmat *A, 
                         dCSRmat *P, 
                         dCSRmat *B);

void fasp_blas_dcsr_rap_agg (dCSRmat *R, 
                             dCSRmat *A, 
                             dCSRmat *P, 
                             dCSRmat *B);

void fasp_blas_dcsr_ptap (dCSRmat *Pt,
                          dCSRmat *A, 
                          dCSRmat *P, 
                          dCSRmat *Ac);


/*-------- In file: blas_csr_omp.c --------*/

void fasp_blas_dcsr_mxv_omp (dCSRmat *A, 
														 double *x, 
														 double *y, 
														 int nthreads, 
														 int openmp_holds);

void fasp_blas_dcsr_aAxpy_omp (const double alpha, 
															 dCSRmat *A, 
															 double *x, 
															 double *y, 
															 int nthreads, 
															 int openmp_holds);

double fasp_blas_dcsr_vmv_omp (dCSRmat *A, 
															 double *x, 
															 double *y, 
															 int nthreads, 
															 int openmp_holds);

void fasp_blas_dcsr_rap_omp( dCSRmat  *R,
                             dCSRmat  *A,
                             dCSRmat  *P,
                             dCSRmat  *RAP,
                             int       nthreads,
                             int       openmp_holds );

void fasp_blas_dcsr_rap_agg_omp( dCSRmat  *R,
                                 dCSRmat  *A,
                                 dCSRmat  *P,
                                 dCSRmat  *RAP,
                                 int       nthreads,
                                 int       openmp_holds );

void fasp_blas_dcsr_rap1_omp (dCSRmat *R, 
												 dCSRmat *A, 
												 dCSRmat *P, 
												 dCSRmat *B,
												 int nthreads,
												 int openmp_holds);

void fasp_blas_dcsr_rap2_omp (dCSRmat *R, 
												 dCSRmat *A, 
												 dCSRmat *P, 
												 dCSRmat *B,
												 int nthreads,
												 int openmp_holds,
												 int *indexs,
												 int *iindexs,
												 int *BTindexs,
												 double *temps);

void fasp_blas_dcsr_rap3_omp (dCSRmat *R, 
												 dCSRmat *A, 
												 dCSRmat *P, 
												 dCSRmat *B,
												 int *icor_ysk, 
												 int nthreads, 
												 int openmp_holds);

void fasp_blas_dcsr_rap4_omp (dCSRmat *R, 
												 dCSRmat *A, 
												 dCSRmat *P, 
												 dCSRmat *B,
												 int *icor_ysk, 
												 int nthreads, 
												 int openmp_holds);


/*-------- In file: blas_csrl.c --------*/

INT fasp_blas_dcsrl_mxv (dCSRLmat *A, 
                         REAL *x, 
                         REAL *y);


/*-------- In file: blas_smat.c --------*/

void fasp_blas_smat_mxv_nc2 (double *a, 
                             double *b, 
							 double *c);

void fasp_blas_smat_mxv_nc3 (double *a, 
                             double *b, 
												     double *c);

void fasp_blas_smat_mxv_nc5 (double *a, 
                             double *b, 
														 double *c);

void fasp_blas_smat_mxv_nc7 (double *a, 
                             double *b, 
												     double *c);

void fasp_blas_smat_mxv (double *a, 
                         double *b, 
												 double *c,
									    	 int n);

void fasp_blas_smat_inv_nc2 (double *a);

void fasp_blas_smat_inv_nc3 (double *a);

void fasp_blas_smat_inv_nc5 (double *a);

void fasp_blas_smat_inv_nc7 (double *a);

int fasp_blas_smat_inv (double *a, 
                        int n);

void fasp_blas_smat_mul_nc2 (double *a, 
							 double *b, 
							 double *c);

void fasp_blas_smat_mul_nc3 (double *a, 
														 double *b, 
														 double *c);

void fasp_blas_smat_mul_nc5 (double *a, 
														 double *b, 
														 double *c);

void fasp_blas_smat_mul_nc7 (double *a, 
														 double *b, 
														 double *c);

void fasp_blas_smat_mul (double *a, 
												 double *b, 
												 double *c, 
												 int n);

void fasp_blas_array_axpyz_nc2 (double a, 
                                double *x, 
								double *y, 
								double *z) ;

void fasp_blas_array_axpyz_nc3 (double a, 
                                double *x, 
																double *y, 
																double *z) ;

void fasp_blas_array_axpyz_nc5 (double a, 
                                double *x, 
																double *y, 
																double *z) ;

void fasp_blas_array_axpyz_nc7 (double a, 
                                double *x, 
																double *y, 
																double *z) ;

void fasp_blas_array_axpy_nc2 (double a, 
                               double *x, 
							   double *y) ;

void fasp_blas_array_axpy_nc3 (double a, 
                               double *x, 
															 double *y) ;

void fasp_blas_array_axpy_nc5 (double a, 
                               double *x, 
															 double *y) ;

void fasp_blas_array_axpy_nc7 (double a, 
                               double *x, 
															 double *y) ;

void fasp_blas_smat_ypAx_nc2 (double *A, 
							  double *x, 
							  double *y );

void fasp_blas_smat_ypAx_nc3 (double *A, 
															double *x, 
															double *y );

void fasp_blas_smat_ypAx_nc5 (double *A, 
															double *x,
															double *y );

void fasp_blas_smat_ypAx_nc7 (double *A, 
															double *x, 
															double *y);

void fasp_blas_smat_ypAx (double *A, 
													double *x, 
													double *y, 
													int n);

void fasp_blas_smat_ymAx_nc2 (double *A, 
							  double *x, 
							  double *y);

void fasp_blas_smat_ymAx_nc3 (double *A, 
															double *x, 
															double *y);

void fasp_blas_smat_ymAx_nc5 (double *A, 
															double *x, 
															double *y);

void fasp_blas_smat_ymAx_nc7 (double *A, 
															double *x, 
															double *y);

void fasp_blas_smat_ymAx (double *A, 
													double *x, 
													double *y,
													int n);

void fasp_blas_smat_aAxpby (double alpha, 
                            double *A, 
														double *x, 
														double beta, 
														double *y, 
														int n );

void fasp_blas_smat_ymAx_ns2 (double *A,
							  double *x, 
							  double *y);

void fasp_blas_smat_ymAx_ns3 (double *A,
															double *x, 
															double *y);

void fasp_blas_smat_ymAx_ns5 (double *A, 
															double *x, 
															double *y);

void fasp_blas_smat_ymAx_ns7 (double *A, 
															double *x, 
															double *y);

void fasp_blas_smat_ymAx_ns (double *A, 
														 double *x, 
														 double *y, 
														 int n);


/*-------- In file: blas_str.c --------*/

void fasp_blas_dstr_aAxpy (double alpha, 
													 dSTRmat *A, 
													 double *x, 
													 double *y);

int fasp_dstr_diagscale (dSTRmat *A, 
												 dSTRmat *B);


/*-------- In file: blas_vec.c --------*/

void fasp_blas_dvec_axpy (const double a, 
                          dvector *x, 
                          dvector *y);

void fasp_blas_dvec_axpyz (const double a, 
                           dvector *x, 
                           dvector *y, 
                           dvector *z);

double fasp_blas_dvec_dotprod (dvector *x, 
                               dvector *y);

double fasp_dvec_relerr (dvector *x, 
                         dvector *y);

double fasp_blas_dvec_norm1 (dvector *x);

double fasp_blas_dvec_norm2 (dvector *x);

double fasp_blas_dvec_norminf (dvector *x);


/*-------- In file: blas_vec_omp.c --------*/

void fasp_blas_dvec_axpy_omp (const double a, 
												 dvector *x, 
												 dvector *y, 
												 int nthreads, 
												 int openmp_holds);

void fasp_blas_dvec_axpyz_omp (const double a, 
													dvector *x, 
													dvector *y, 
													dvector *z, 
													int nthreads, 
													int openmp_holds);

double fasp_blas_dvec_dotprod_omp (dvector *x, 
															dvector *y, 
															int nthreads, 
															int openmp_holds);

double fasp_blas_dvec_relerr_omp (dvector *x, 
														 dvector *y, 
														 int nthreads, 
														 int openmp_holds);

double fasp_blas_dvec_norm1_omp (dvector *x, 
														int nthreads, 
														int openmp_holds);

double fasp_blas_dvec_norm2_omp (dvector *x, 
														int nthreads, 
														int openmp_holds);


/*-------- In file: checkmat.c --------*/

int fasp_check_diagpos (dCSRmat *A);

int fasp_check_diagzero (dCSRmat *A);

int fasp_check_diagdom (dCSRmat *A);

int fasp_check_symm (dCSRmat *A);

int fasp_check_dCSRmat (dCSRmat *A);

int fasp_check_iCSRmat (iCSRmat *A);


/*-------- In file: coarsening_cr.c --------*/

int fasp_amg_coarsening_cr (int i_0, 
														int i_n, 
														dCSRmat *A, 
														ivector *vertices, 
														AMG_param *param);


/*-------- In file: coarsening_rs.c --------*/

int fasp_amg_coarsening_rs (dCSRmat *A, 
														ivector *vertices, 
														dCSRmat *P, 
														AMG_param *param);

void dispose_elt( LinkList element_ptr );

void remove_point(LinkList *LoL_head_ptr, LinkList *LoL_tail_ptr,
												 int measure, int index, int *lists, int *where);

void enter_list(LinkList *LoL_head_ptr, LinkList *LoL_tail_ptr,
											 int measure, int index, int *lists, int *where);

void generate_S(dCSRmat *A, iCSRmat *S, AMG_param *param);

void generate_S_rs(dCSRmat *A, iCSRmat *S, double epsilon_str, int coarsening_type);

int form_coarse_level(dCSRmat *A, iCSRmat *S, ivector *vertices, int row);

void generate_sparsity_P(dCSRmat *P, iCSRmat *S, ivector *vertices, int row, int col);


/*-------- In file: coarsening_rs.c --------*/

int fasp_amg_coarsening_rs_omp (dCSRmat *A, 
																ivector *vertices, 
																dCSRmat *P, 
																AMG_param *param, 
																int nthreads, 
																int openmp_holds);

void generate_S_omp(dCSRmat *A, iCSRmat *S, AMG_param *param, int nthreads, int openmp_holds);

INT form_coarse_level_omp(dCSRmat *A, iCSRmat *S, ivector *vertices, INT row, INT nthreads, INT openmp_holds);

void generate_sparsity_P_omp(dCSRmat *P, iCSRmat *S, ivector *vertices, INT row, INT col, INT nthreads, INT openmp_holds);


/*-------- In file: eigen.c --------*/

double fasp_dcsr_eig (dCSRmat *A, 
											double tol, 
										  int maxit);


/*-------- In file: famg.c --------*/

void fasp_solver_famg (dCSRmat *A, 
                       dvector *b, 
                       dvector *x, 
                       AMG_param *param);


/*-------- In file: fmgcycle.c --------*/

void fasp_solver_fmgcycle (AMG_data *mgl, 
                           AMG_param *param);


/*-------- In file: formats.c --------*/

int fasp_format_dcoo_dcsr (dCOOmat *A, 
                           dCSRmat *B);

int fasp_format_dcsr_dcoo (dCSRmat *A, 
                           dCOOmat *B);

int fasp_format_dstr_dcsr (dSTRmat *A, 
                           dCSRmat *B_ptr);

dCSRmat fasp_format_bdcsr_dcsr (block_dCSRmat *Ab);

dCSRLmat * fasp_format_dcsrl_dcsr (dCSRmat *A);

dCSRmat fasp_format_dbsr_dcsr (dBSRmat *B);

dBSRmat fasp_format_dstr_dbsr (dSTRmat *B);

dCOOmat * fasp_format_dbsr_dcoo (dBSRmat *B);


/*-------- In file: formats_omp.c --------*/

dCSRmat fasp_format_dbsr_dcsr_omp (dBSRmat *B, 
																	 int nthreads, 
																	 int openmp_holds );


/*-------- In file: givens.c --------*/

void fasp_aux_givens (double beta, 
                      dCSRmat *H, 
											dvector *y, 
											dvector *v, 
											double *tmp);


/*-------- In file: graphics.c --------*/

void fasp_dcsr_plot (const dCSRmat *A, 
										 const char *filename, 
										 int size);

void fasp_grid2d_plot (pgrid2d pg, 
											 int level);


/*-------- In file: ilu_setup.c --------*/

int fasp_ilu_dcsr_setup (dCSRmat *A, 
												 ILU_data *iludata, 
												 ILU_param *param);


/*-------- In file: ilu_setup_bsr.c --------*/

int fasp_ilu_dbsr_setup (dBSRmat *A, 
                         ILU_data *iludata, 
												 ILU_param *param);


/*-------- In file: ilu_setup_str.c --------*/

void fasp_ilu_dstr_setup0 (dSTRmat *A, 
													 dSTRmat *LU);

void fasp_ilu_dstr_setup1 (dSTRmat *A, 
													 dSTRmat *LU);


/*-------- In file: init.c --------*/

AMG_data * fasp_amg_data_create (INT max_levels);

void fasp_ilu_data_alloc (INT iwk, 
                          INT nwork, 
                          ILU_data *iludata);

void fasp_amg_data_free (AMG_data *mgl);

void fasp_ilu_data_free(ILU_data *ILUdata);

void fasp_ilu_data_init (ILU_data *ILUdata);

void fasp_precond_init (precond *pdata);


/*-------- In file: input.c --------*/

void fasp_param_input (char *filenm, input_param *Input);


/*-------- In file: interpolation.c --------*/

int fasp_amg_interp (dCSRmat *A, 
										 ivector *vertices, 
										 dCSRmat *P, 
										 AMG_param *param);

void interp_EM(dCSRmat *A, ivector *vertices, dCSRmat *P, AMG_param *param);


/*-------- In file: interpolation_omp.c --------*/

int fasp_amg_interp_omp (dCSRmat *A, 
												 ivector *vertices, 
												 dCSRmat *P, 
												 AMG_param *param, 
												 int nthreads, 
												 int openmp_holds);

int fasp_amg_interp1_omp (dCSRmat *A, 
												 ivector *vertices, 
												 dCSRmat *P, 
												 AMG_param *param, 
												 int *icor_ysk,
												 int nthreads, 
												 int openmp_holds);

int fasp_amg_interp2_omp (dCSRmat *A, 
												 ivector *vertices, 
												 dCSRmat *P, 
												 AMG_param *param, 
												 int nthreads, 
												 int openmp_holds);

int fasp_BinarySearch(int *list, int value, int list_length);


/*-------- In file: io.c --------*/

void fasp_dcsrvec_read (char *filemat, 
                        char *filerhs, 
                        dCSRmat *A, 
                        dvector *b );

void fasp_dcsrvec2_read (char *filename,
                         dCSRmat *A,
                         dvector *b);

void fasp_dcoo_read (char *filename, 
                     dCSRmat *A);

void fasp_dmtx_read (char *filename, 
                     dCSRmat *A);

void fasp_dmtxsym_read (char *filename, 
                        dCSRmat *A);

void fasp_dstr_read (char *filename,
                     dSTRmat *A);

void fasp_dbsr_read (char *filename, dBSRmat *A);

void fasp_dvecind_read (char *filename,
                        dvector *b);

void fasp_dvec_read (char *filename, 
                     dvector *b);

void fasp_ivecind_read (char *filename, 
                        ivector *b);

void fasp_ivec_read (char *filename, 
                     ivector *b);

void fasp_dcsr_write (char *filename, 
                      dCSRmat *A);

void fasp_dstr_write (char *filename, 
                      dSTRmat *A);

void fasp_dbsr_write (char *filename, 
                      dBSRmat *A);

void fasp_dvec_write (char *filename,
                      dvector *vec);

void fasp_ivec_write (char *filename, 
                      ivector *vec);

void fasp_dvec_print (INT n, 
                      dvector *u) ;

void fasp_ivec_print (INT n, 
                      ivector *u) ;

void fasp_dcsr_print (dCSRmat *A);


/*-------- In file: itsolver.c --------*/

INT fasp_solver_dcsr_itsolver (dCSRmat *A, 
                               dvector *b, 
                               dvector *x, 
                               precond *prec, 
                               itsolver_param *itparam);

INT fasp_solver_dcsr_krylov (dCSRmat *A, 
                             dvector *b, 
                             dvector *x, 
                             itsolver_param *itparam);

INT fasp_solver_dcsr_krylov_diag (dCSRmat *A, 
                                  dvector *b, 
                                  dvector *x, 
                                  itsolver_param *itparam);

INT fasp_solver_dcsr_krylov_amg (dCSRmat *A, 
                                 dvector *b, 
                                 dvector *x, 
                                 itsolver_param *itparam, 
                                 AMG_param *amgparam);

INT fasp_solver_dcsr_krylov_ilu (dCSRmat *A, 
                                 dvector *b, 
                                 dvector *x, 
                                 itsolver_param *itparam, 
                                 ILU_param *iluparam);

INT fasp_solver_dcsr_krylov_ilu_M (dCSRmat *A, 
                                   dvector *b, 
                                   dvector *x, 
                                   itsolver_param *itparam, 
                                   ILU_param *iluparam, 
                                   dCSRmat *M);


/*-------- In file: itsolver_bcsr.c --------*/

int fasp_solver_bdcsr_itsolver(block_dCSRmat *A, 
															 dvector *b, 
															 dvector *x, 
															 precond *prec, 
															 itsolver_param *itparam);

int fasp_solver_bdcsr_krylov (block_dCSRmat *A, 
															dvector *b, 
															dvector *x, 
															itsolver_param *itparam);


/*-------- In file: itsolver_bsr.c --------*/

int fasp_solver_dbsr_itsolver (dBSRmat *A, 
															 dvector *b, 
															 dvector *x, 
															 precond *prec, 
															 itsolver_param *itparam);

int fasp_solver_dbsr_krylov (dBSRmat *A, 
														 dvector *b, 
														 dvector *x, 
														 itsolver_param *itparam);

int fasp_solver_dbsr_krylov_diag (dBSRmat *A, 
																	dvector *b, 
																	dvector *x, 
																	itsolver_param *itparam);

int fasp_solver_dbsr_krylov_ilu (dBSRmat *A, 
																 dvector *b, 
																 dvector *x, 
																 itsolver_param *itparam, 
																 ILU_param *iluparam);


/*-------- In file: itsolver_bsr.c --------*/

void fasp_set_GS_threads_omp(int mythreads, int its);

int fasp_solver_dbsr_itsolver_omp(dBSRmat *A,
                                  dvector *b,
                                  dvector *x,
                                  precond *prec,
                                  itsolver_param *itparam,
                                  int nthreads,
                                  int openmp_holds);


/*-------- In file: itsolver_omp.c --------*/

int fasp_solver_dcsr_itsolver_omp( dCSRmat *A,
                                   dvector *b,
                                   dvector *x,
                                   precond *prec,
                                   itsolver_param *itparam,
                                   int nthreads,
                                   int openmp_holds );

int fasp_solver_dcsr_krylov_amg_omp (dCSRmat *A,
                                     dvector *b,
                                     dvector *x,
                                     itsolver_param *itparam,
                                     AMG_param *amgparam,
                                     int nthreads,
                                     int openmp_holds);


/*-------- In file: itsolver_Stokes.c --------*/

int fasp_solver_bdcsr_krylov_stokes (block_dCSRmat *Mat, 
																		 dvector *b, 
																		 dvector *x, 
																		 itsolver_param *itparam,
																		 precond_Stokes_param *param, 
																		 precond_Stokes_data *precdata);


/*-------- In file: itsolver_str.c --------*/

int fasp_solver_dstr_itsolver(dSTRmat *A, 
															dvector *b, 
															dvector *x, 
															precond *prec, 
															itsolver_param *itparam);

int fasp_solver_dstr_krylov (dSTRmat *A, 
														 dvector *b, 
														 dvector *x, 
														 itsolver_param *itparam);

int fasp_solver_dstr_krylov_diag (dSTRmat *A, 
																	dvector *b, 
																	dvector *x, 
																	itsolver_param *itparam);

int fasp_solver_dstr_krylov_ilu (dSTRmat *A, 
																 dvector *b, 
																 dvector *x, 
																 itsolver_param *itparam, 
																 ILU_param *iluparam);

int fasp_solver_dstr_krylov_blockgs (dSTRmat *A, 
																		 dvector *b, 
																		 dvector *x, 
																		 itsolver_param *itparam, 
																		 ivector *neigh, 
																		 ivector *order);


/*-------- In file: lu.c --------*/

int fasp_smat_lu_decomp (double *A, 
												 int pivot[], 
												 int n) ;

int fasp_smat_lu_solve (double *A, 
												double b[], 
												int pivot[], 
												double x[], 
												int n);


/*-------- In file: memory.c --------*/

void * fasp_mem_calloc (INT size, 
                        INT type);

void * fasp_mem_realloc (void * oldmem, 
                         INT tsize);

void fasp_mem_free (void * mem);

void fasp_mem_usage ();

INT fasp_mem_check (void *ptr, 
                    char *message, 
                    INT ERR);

INT fasp_mem_iludata_check (ILU_data *iludata);

INT fasp_mem_dcsr_check (dCSRmat *A);


/*-------- In file: message.c --------*/

void print_itinfo (const INT ptrlvl, 
                   const INT stop_type, 
                   const INT iter, 
                   const REAL relres, 
                   const REAL absres, 
                   const REAL factor);

void print_amgcomplexity (AMG_data *mgl, 
                          const SHORT print_level);

void print_message (const INT ptrlvl, 
                    const char *message);

void fasp_chkerr (const SHORT status, 
                  const char *fctname);


/*-------- In file: mgcycle.c --------*/

void fasp_solver_mgcycle (AMG_data *mgl, 
                          AMG_param *param);


/*-------- In file: mgcycle_omp.c --------*/

void fasp_solver_mgcycle_omp1 (AMG_data *mgl, 
															AMG_param *param, 
															int nthreads, 
															int openmp_holds);

void fasp_solver_mgcycle_omp (AMG_data *mgl, 
															AMG_param *param, 
															INT nthreads, 
															INT openmp_holds);


/*-------- In file: mgrecur.c --------*/

void fasp_solver_mgrecur (AMG_data *mgl, AMG_param *param, INT level);


/*-------- In file: ordering.c --------*/

int fasp_aux_unique (int numbers[], 
										 int size);

void fasp_aux_merge (int numbers[], 
										 int work[], 
										 int left, 
										 int mid, 
										 int right);

void fasp_aux_msort (int numbers[], 
										 int work[], 
										 int left, 
										 int right);

void fasp_aux_iQuickSort(int *a, 
												 int left, 
												 int right);

void fasp_aux_dQuickSort (double *a, 
													int left, 
													int right);

void fasp_aux_iQuickSortIndex (int *a, 
															 int left, 
															 int right, 
															 int *index);

void fasp_aux_dQuickSortIndex (double *a, 
															 int left, 
															 int right, 
															 int *index);


/*-------- In file: parameters.c --------*/

void fasp_param_init (char *inputfile, 
                      input_param *inparam, 
                      itsolver_param *itparam, 
                      AMG_param *amgparam, 
                      ILU_param *iluparam);

void fasp_param_input_init (input_param *Input);

void fasp_param_amg_init (AMG_param *param);

void fasp_param_solver_init (itsolver_param *pdata);

void fasp_param_ilu_init (ILU_param *param);

void fasp_param_amg_set (AMG_param *param, input_param *Input);

void fasp_param_ilu_set (ILU_param *param, input_param *Input);

void fasp_param_solver_set (itsolver_param *itparam, input_param *Input);

void fasp_precond_data_init (precond_data *pdata);

void fasp_param_amg_to_prec (precond_data *precdata, 
                             AMG_param *amgparam);

void fasp_param_prec_to_amg (AMG_param *amgparam,
                             precond_data *precdata);

void fasp_param_amg_print (AMG_param *param);

void fasp_param_ilu_print (ILU_param *param);

void fasp_param_solver_print (itsolver_param *param);


/*-------- In file: pbcgs.c --------*/

INT fasp_solver_dcsr_pbcgs (dCSRmat *A, 
                            dvector *b, 
                            dvector *u, 
                            const INT MaxIt, 
                            const REAL tol,
                            precond *pre, 
                            const INT print_level, 
                            const INT stop_type);

INT fasp_solver_bdcsr_pbcgs (block_dCSRmat *A, 
                             dvector *b, 
                             dvector *u, 
                             const INT MaxIt, 
                             const REAL tol,
                             precond *pre, 
                             const INT print_level, 
                             const INT stop_type);

INT fasp_solver_dbsr_pbcgs(dBSRmat *A, 
                           dvector *b, 
                           dvector *u, 
                           const INT MaxIt, 
                           const REAL tol, 
                           precond *pre, 
                           const INT print_level, 
                           const INT stop_type);

INT fasp_solver_dstr_pbcgs (dSTRmat *A, 
                            dvector *b, 
                            dvector *u, 
                            const INT MaxIt, 
                            const REAL tol, 
                            precond *pre, 
                            const INT print_level, 
                            const INT stop_type);


/*-------- In file: pcg.c --------*/

INT fasp_solver_dcsr_pcg (dCSRmat *A, 
                          dvector *b, 
                          dvector *u, 
                          const INT MaxIt, 
                          const REAL tol,
                          precond *pre, 
                          const SHORT print_level, 
                          const SHORT stop_type);

INT fasp_solver_bdcsr_pcg (block_dCSRmat *A, 
                           dvector *b, 
                           dvector *u, 
                           const INT MaxIt, 
                           const REAL tol,
                           precond *pre, 
                           const SHORT print_level, 
                           const SHORT stop_type);

INT fasp_solver_dstr_pcg (dSTRmat *A, 
                          dvector *b, 
                          dvector *u, 
                          INT MaxIt, 
                          REAL tol, 
                          precond *pre, 
                          SHORT print_level, 
                          SHORT stop_type);


/*-------- In file: pcg_omp.c --------*/

int fasp_solver_dcsr_pcg_omp (dCSRmat *A,
                              dvector *b,
                              dvector *u,
                              const int MaxIt,
                              const double tol,
                              precond *pre,
                              const int print_level,
                              const int stop_type,
                              int nthreads,
                              int openmp_holds);


/*-------- In file: pgcg.c --------*/

INT fasp_solver_dcsr_pgcg (dCSRmat *A, 
                           dvector *b, 
                           dvector *u, 
                           const INT MaxIt, 
                           const double tol,
                           precond *pre, 
                           const SHORT print_level,
                           const SHORT stop_type);


/*-------- In file: pgmres.c --------*/

INT fasp_solver_dcsr_pgmres (dCSRmat *A, 
                             dvector *b, 
                             dvector *x, 
                             const INT maxit, 
                             const REAL tol,
                             precond *pre, 
                             const INT print_level, 
                             const INT stop_type, 
                             const INT restart);

INT fasp_solver_bdcsr_pgmres (block_dCSRmat *A, 
                              dvector *b, 
                              dvector *u, 
                              const INT maxit, 
                              const REAL tol,
                              precond *pre, 
                              const SHORT print_level, 
                              const SHORT stop_type, 
                              const SHORT restart);

INT fasp_solver_dbsr_pgmres (dBSRmat *A, 
                             dvector *b, 
                             dvector *x, 
                             const INT maxit, 
                             const REAL tol,
                             precond *pre, 
                             const SHORT print_level, 
                             const SHORT stop_type, 
                             const SHORT restart);

INT fasp_solver_dstr_pgmres (dSTRmat *A, 
                             dvector *b, 
                             dvector *x, 
                             const INT maxit, 
                             const REAL tol,
                             precond *pre, 
                             const SHORT print_level, 
                             const SHORT stop_type, 
                             const SHORT restart );


/*-------- In file: pminres.c --------*/

INT fasp_solver_dcsr_pminres (dCSRmat *A, 
                              dvector *b, 
                              dvector *u, 
                              const INT MaxIt, 
                              const REAL tol,
                              precond *pre, 
                              const SHORT print_level, 
                              const SHORT stop_type);

INT fasp_solver_bdcsr_pminres (block_dCSRmat *A, 
                               dvector *b, 
                               dvector *u, 
                               const INT MaxIt, 
                               const REAL tol,
                               precond *pre, 
                               const SHORT print_level, 
                               const SHORT stop_type);


/*-------- In file: precond.c --------*/

void fasp_precond_diag (double *r, 
                        double *z, 
                        void *data);

void fasp_precond_ilu (double *r, 
                       double *z, 
                       void *data);

void fasp_precond_ilu_forward (double *r, 
                               double *z, 
                               void *data);

void fasp_precond_ilu_backward (double *r, 
                                double *z, 
                                void *data);

void fasp_precond_amg (double *r, 
                       double *z, 
                       void *data);

void fasp_precond_famg (double *r, 
                        double *z, 
                        void *data);

void fasp_precond_amli (double *r, 
                        double *z, 
                        void *data);

void fasp_precond_nl_amli (double *r, 
                           double *z, 
                           void *data);


/*-------- In file: precond_bsr.c --------*/

void fasp_precond_dbsr_diag (double *r, 
														 double *z, 
														 void *data);

void fasp_precond_dbsr_diag_nc2 (double *r, 
								 double *z, 
								 void *data );

void fasp_precond_dbsr_diag_nc3 (double *r, 
																 double *z, 
																 void *data );

void fasp_precond_dbsr_diag_nc5 (double *r, 
																 double *z, 
																 void *data );

void fasp_precond_dbsr_diag_nc7 (double *r, 
																 double *z, 
																 void *data );

void fasp_precond_dbsr_ilu (double *r, 
														double *z, 
														void *data);


/*-------- In file: precond_bsr_omp.c --------*/

void fasp_precond_dbsr_diag_omp (double *r, 
																 double *z, 
																 void *data, 
																 int nthreads, 
																 int openmp_holds);

void fasp_precond_dbsr_diag_nc2_omp (double *r, 
																		 double *z, 
																		 void *data, 
																		 int nthreads, 
																		 int openmp_holds );

void fasp_precond_dbsr_diag_nc3_omp (double *r, 
																		 double *z, 
																		 void *data, 
																		 int nthreads, 
																		 int openmp_holds );

void fasp_precond_dbsr_diag_nc5_omp (double *r, 
																		 double *z, 
																		 void *data, 
																		 int nthreads, 
																		 int openmp_holds);

void fasp_precond_dbsr_diag_nc7_omp (double *r, 
																		 double *z, 
																		 void *data, 
																		 int nthreads, 
																		 int openmp_holds );


/*-------- In file: precond_omp.c --------*/

void fasp_precond_amg_omp(double *r, double *z, void *data, int nthreads, int openmp_holds);


/*-------- In file: precond_stokes.c --------*/

void fasp_precond_stokes_bdiag (double *r, 
															 double *z, 
															 void *data);


/*-------- In file: precond_str.c --------*/

void fasp_precond_dstr_diag (double *r, 
														 double *z, 
														 void *data);

void fasp_precond_dstr_ilu0 (double *r, 
														 double *z, 
														 void *data);

void fasp_precond_dstr_ilu1 (double *r, 
														 double *z, 
														 void *data);

void fasp_precond_dstr_ilu0_forward (double *r, 
																		 double *z, 
																		 void *data);

void fasp_precond_dstr_ilu0_backward (double *r, 
																			double *z, 
																			void *data);

void fasp_precond_dstr_ilu1_forward (double *r, 
																		 double *z, 
																		 void *data);

void fasp_precond_dstr_ilu1_backward (double *r, 
																			double *z, 
																			void *data);

void fasp_precond_dstr_blockgs (double *r, 
																double *z, 
																void *data);


/*-------- In file: pvfgmres.c --------*/

INT fasp_solver_dcsr_pvfgmres (dCSRmat *A, 
                               dvector *b, 
                               dvector *x, 
                               const INT MaxIt,
                               const REAL tol,
                               precond *pre, 
                               const SHORT print_level, 
                               const SHORT stop_type, 
                               const SHORT restart);


/*-------- In file: pvgmres.c --------*/

INT fasp_solver_dcsr_pvgmres (dCSRmat *A, 
                              dvector *b, 
                              dvector *x, 
                              const INT maxit,
                              const REAL tol,
                              precond *pre, 
                              const SHORT print_level, 
                              const SHORT stop_type, 
                              const SHORT restart);

INT fasp_solver_dbsr_pvgmres (dBSRmat *A, 
                              dvector *b, 
                              dvector *x, 
                              const INT maxit, 
                              const REAL tol,
                              precond *pre, 
                              const SHORT print_level, 
                              const SHORT stop_type, 
                              const SHORT restart );

INT fasp_solver_dstr_pvgmres (dSTRmat *A, 
                              dvector *b, 
                              dvector *x, 
                              const INT maxit, 
                              const REAL tol, 
                              precond *pre, 
                              const SHORT print_level, 
                              const SHORT stop_type, 
                              const SHORT restart );

INT fasp_solver_dbsr_pvgmres_omp (dBSRmat *A, 
                                  dvector *b, 
                                  dvector *x, 
                                  const INT maxit, 
                                  const REAL tol,
                                  precond *pre, 
                                  const INT print_level, 
                                  const INT stop_type, 
                                  const INT restart, 
                                  INT nthreads, 
                                  INT openmp_holds );


/*-------- In file: quadrature.c --------*/

void fasp_init_quadrature(int num_qp, int ncoor, double (*gauss)[3]);

void fasp_init_Gauss(int num_qp, int ncoor, double (*gauss)[3]);


/*-------- In file: rap.c --------*/

dCSRmat fasp_blas_dcsr_rap2 (INT *ir, 
                             INT *jr, 
                             REAL *r,
                             INT *ia, 
                             INT *ja, 
                             REAL *a,	    
                             INT *ipt, 
                             INT *jpt, 
                             REAL *pt,	
                             INT n, 
                             INT nc,
                             INT *maxrpout,
                             INT *ipin, 
                             INT *jpin) ;


/*-------- In file: smat.c --------*/

void fasp_iden_free (idenmat *A);

void fasp_smat_identity_nc2 (double *a);

void fasp_smat_identity_nc3 (double *a);

void fasp_smat_identity_nc5 (double *a);

void fasp_smat_identity_nc7 (double *a);

void fasp_smat_identity (double *a, 
												 int n, 
												 int n2);


/*-------- In file: smoother.c --------*/

void fasp_smoother_dcsr_jacobi (dvector *u, 
                                int i_1, 
                                int i_n, 
                                int s, 
                                dCSRmat *A, 
                                dvector *b, 
                                int L);

void fasp_smoother_dcsr_gs (dvector *u, 
                            int i_1, 
                            int i_n, 
                            int s, 
                            dCSRmat *A, 
                            dvector *b, 
                            int L);

void fasp_smoother_dcsr_gs_cf (dvector *u, 
                               dCSRmat *A, 
                               dvector *b, 
                               int L, 
                               int *mark, 
                               int order );

void fasp_smoother_dcsr_sgs (dvector *u, 
                             dCSRmat *A, 
                             dvector *b, 
                             int L);

void fasp_smoother_dcsr_sor (dvector *u, 
                             int i_1, 
                             int i_n, 
                             int s, 
                             dCSRmat *A, 
                             dvector *b, 
                             int L, 
                             double w);

void fasp_smoother_dcsr_sor_cf (dvector *u, 
                                dCSRmat *A, 
                                dvector *b, 
                                int L, 
                                double w, 
                                int *mark, 
                                int order );

void fasp_smoother_dcsr_ilu (dCSRmat *A, 
                             dvector *b, 
                             dvector *x, 
                             void *data);

void fasp_smoother_dcsr_kaczmarz (dvector *u, 
                                  int i_1, 
                                  int i_n, 
                                  int s, 
                                  dCSRmat *A, 
                                  dvector *b, 
                                  int L, 
                                  double w);

void fasp_smoother_dcsr_L1diag (dvector *u, 
                                int i_1, 
                                int i_n, 
                                int s, 
                                dCSRmat *A, 
                                dvector *b, 
                                int L);


/*-------- In file: smoother_bsr.c --------*/

void fasp_smoother_dbsr_jacobi (dBSRmat *A, 
																dvector *b, 
																dvector *u);

void fasp_smoother_dbsr_jacobi1 (dBSRmat *A, 
																 dvector *b, 
																 dvector *u, 
																 double *diaginv)	;

void fasp_smoother_dbsr_gs (dBSRmat *A, 
														dvector *b, 
														dvector *u, 
														int order, 
														int *mark );

void fasp_smoother_dbsr_gs1 (dBSRmat *A, 
														 dvector *b, 
														 dvector *u, 
														 int order, 
														 int *mark, 
														 double *diaginv )	;

void fasp_smoother_dbsr_gs_ascend (dBSRmat *A, 
																	 dvector *b, 
																	 dvector *u, 
																	 double *diaginv );

void fasp_smoother_dbsr_gs_descend (dBSRmat *A, 
																		dvector *b, 
																		dvector *u, 
																		double *diaginv );

void fasp_smoother_dbsr_gs_order1 (dBSRmat *A, 
																	 dvector *b, 
																	 dvector *u, 
																	 double *diaginv, 
																	 int *mark );

void fasp_smoother_dbsr_gs_order2 (dBSRmat *A, 
																	 dvector *b, 
																	 dvector *u, 
																	 int *mark, 
																	 double *work);

void fasp_smoother_dbsr_sor (dBSRmat *A, 
														 dvector *b, 
														 dvector *u, 
														 int order, 
														 int *mark, 
														 double weight);

void fasp_smoother_dbsr_sor1 (dBSRmat *A, 
															dvector *b, 
															dvector *u, 
															int order, 
															int *mark, 
															double *diaginv, 
															double weight)	;

void fasp_smoother_dbsr_sor_ascend (dBSRmat *A, 
																		dvector *b, 
																		dvector *u, 
																		double *diaginv, 
																		double weight );

void fasp_smoother_dbsr_sor_descend (dBSRmat *A, 
																		 dvector *b, 
																		 dvector *u, 
																		 double *diaginv, 
																		 double weight);

void fasp_smoother_dbsr_sor_order (dBSRmat *A, 
																	 dvector *b, 
																	 dvector *u, 
																	 double *diaginv, 
																	 int *mark, 
																	 double weight );

void fasp_smoother_dbsr_ilu (dBSRmat *A, 
														 dvector *b, 
														 dvector *x, 
														 void *data);


/*-------- In file: smoother_cr.c --------*/

void fasp_smoother_dcsr_gscr (int pt, 
															int n,
															double *u,
															int *ia,
															int *ja, 
															double *a, 
															double *b, 
															int L, 
															int *CF);


/*-------- In file: smoother_omp.c --------*/

void swep3db(int *ia, int *ja, double *aa,
			double *u, double *f,
            int nbegx,
            int nbegy,
            int nbegz,
			int *mark,
            int nx, int ny, int nz);

void rb0b3d(int *ia, int *ja, double *aa,double *u, double *f, int *mark, int nx, int ny, int nz, int nsweeps);

void swep3df(int *ia, int *ja, double *aa,
			double *u, double *f,
            int nbegx, 
            int nbegy, 
            int nbegz, 
			int *mark,
            int nx, int ny, int nz);

void rb0f3d(int *ia, int *ja, double *aa,double *u, double *f, int *mark, int nx, int ny, int nz, int nsweeps);

void fasp_smoother_dcsr_gs_rb3d (dvector *u, 
															 dCSRmat *A, 
															 dvector *b, 
															 int L, 
															 int order,
															 int *mark,
															 int maximap,
															 int nx,
															 int ny,
															 int nz );

void fasp_smoother_dcsr_gs_cf_omp (dvector *u, 
																	 dCSRmat *A, 
																	 dvector *b, 
																	 int L, 
																	 int *mark, 
																	 int order, 
																	 int nthreads, 
																	 int openmp_holds);


/*-------- In file: smoother_poly.c --------*/

void fasp_smoother_dcsr_poly (dCSRmat *Amat, 
															dvector *brhs, 
															dvector *usol, 
															int n, 
															int ndeg, 
															int L);


/*-------- In file: smoother_str.c --------*/

void fasp_smoother_dstr_jacobi (dSTRmat *A, 
																dvector *b, 
																dvector *u);

void fasp_smoother_dstr_jacobi1 (dSTRmat *A, 
																 dvector *b, 
																 dvector *u, 
																 double *diaginv)	;

void fasp_smoother_dstr_gs (dSTRmat *A, 
														dvector *b, 
														dvector *u,
														int order, 
														int *mark);

void fasp_smoother_dstr_gs1 (dSTRmat *A, 
														 dvector *b, 
														 dvector *u, 
														 int order, 
														 int *mark, 
														 double *diaginv);

void fasp_smoother_dstr_gs_ascend (dSTRmat *A, 
																	 dvector *b,
																	 dvector *u, 
																	 double *diaginv);

void fasp_smoother_dstr_gs_descend (dSTRmat *A, 
																		dvector *b, 
																		dvector *u, 
																		double *diaginv);

void fasp_smoother_dstr_gs_order (dSTRmat *A, 
																	dvector *b, 
																	dvector *u,
																	double *diaginv, 
																	int *mark);

void fasp_smoother_dstr_gs_cf (dSTRmat *A, 
															 dvector *b, 
															 dvector *u, 
															 double *diaginv, 
															 int *mark, 
															 int order);

void fasp_smoother_dstr_sor (dSTRmat *A, 
														 dvector *b, 
														 dvector *u, 
														 int order, 
														 int *mark, 
														 double weight);

void fasp_smoother_dstr_sor1(dSTRmat *A, 
														 dvector *b,
														 dvector *u, 
														 int order, 
														 int *mark, 
														 double *diaginv, 
														 double weight);

void fasp_smoother_dstr_sor_ascend(dSTRmat *A,
																	 dvector *b,
																	 dvector *u,
																	 double *diaginv, 
																	 double weight);

void fasp_smoother_dstr_sor_descend (dSTRmat *A, 
																		 dvector *b, 
																		 dvector *u, 
																		 double *diaginv, 
																		 double weight);

void fasp_smoother_dstr_sor_order (dSTRmat *A, 
																	 dvector *b,
																	 dvector *u, 
																	 double *diaginv, 
																	 int *mark, 
																	 double weight);

void fasp_smoother_dstr_sor_cf (dSTRmat *A, 
																dvector *b, 
																dvector *u, 
																double *diaginv,
																int *mark, 
																int order, 
																double weight);

void fasp_generate_diaginv_block (dSTRmat *A, 
																	ivector *neigh, 
																	dvector *diaginv, 
																	ivector *pivot);

void fasp_smoother_dstr_schwarz (dSTRmat *A, 
																 dvector *b, 
																 dvector *u, 
																 dvector *diaginv, 
																 ivector *pivot, 
																 ivector *neigh, 
																 ivector *order);


/*-------- In file: sparse_block.c --------*/

int fasp_dcsr_getblk (dCSRmat *A, 
											int *Is, 
											int *Js, 
											int m, 
											int n, 
											dCSRmat *B);

int fasp_dbsr_getblk (dBSRmat *A, 
											int *Is, 
											int *Js, 
											int m, 
											int n, 
											dBSRmat *B);


/*-------- In file: sparse_block_omp.c --------*/

int fasp_dcsr_getblk_omp (dCSRmat *A, 
													int *Is, 
													int *Js, 
													int m, 
													int n, 
													dCSRmat *B, 
													int nthreads, 
													int openmp_holds);

int fasp_dbsr_getblk_omp (dBSRmat *A, 
													int *Is, 
													int *Js, 
													int m, 
													int n, 
													dBSRmat *B, 
													int nthreads, 
													int openmp_holds);


/*-------- In file: sparse_bsr.c --------*/

dBSRmat fasp_dbsr_create (int ROW, 
													int COL, 
													int NNZ, 
													int nb, 
													int storage_manner);

void fasp_dbsr_alloc (int ROW, 
											int COL, 
											int NNZ, 
											int nb, 
											int storage_manner, 
											dBSRmat *A);

void fasp_dbsr_free (dBSRmat *A);

void fasp_dbsr_init (dBSRmat *A);

int fasp_dbsr_diagpref (dBSRmat *A);

dBSRmat fasp_dbsr_diaginv (dBSRmat *A);

dBSRmat fasp_dbsr_diaginv2 (dBSRmat *A, 
														double *diaginv);

dBSRmat fasp_dbsr_diaginv3 (dBSRmat *A, 
														double *diaginv);

dBSRmat fasp_dbsr_diaginv4 (dBSRmat *A, 
														double *diaginv);

void fasp_dbsr_getdiag (int n, 
												dBSRmat *A, 
												double *diag );


/*-------- In file: sparse_bsr_omp.c --------*/

dBSRmat fasp_dbsr_diaginv3_omp (dBSRmat *A, 
																double *diaginv, 
																int nthreads, 
																int openmp_holds);


/*-------- In file: sparse_coo.c --------*/

dCOOmat fasp_dcoo_create (int m, 
                         int n, 
												 int nnz);

void fasp_dcoo_free (dCOOmat *A);

int fasp_dcoo_shift (dCOOmat *A, int offset);


/*-------- In file: sparse_csr.c --------*/

dCSRmat fasp_dcsr_create (const INT m, 
                          const INT n, 
                          const INT nnz);

void fasp_dcsr_alloc (const INT m, 
                      const INT n, 
                      const INT nnz, 
                      dCSRmat *A);

void fasp_dcsr_free (dCSRmat *A);

void fasp_icsr_free (iCSRmat *A);

void fasp_dcsr_init (dCSRmat *A);

dCSRmat fasp_dcsr_perm (dCSRmat *A, 
                        INT *P);

INT fasp_dcsr_sort (dCSRmat *A);

void fasp_dcsr_getdiag (INT n, 
                        dCSRmat *A, 
                        dvector *diag) ;

INT fasp_dcsr_getcol (const INT n, 
                      dCSRmat *A, 
                      REAL *col) ;

INT fasp_dcsr_diagpref (dCSRmat *A);

INT fasp_dcsr_regdiag (dCSRmat *A, 
                       REAL value);

void fasp_dcsr_cp (dCSRmat *A, 
                   dCSRmat *B);

void fasp_icsr_trans (iCSRmat *A, 
                      iCSRmat *AT);

INT fasp_dcsr_trans (dCSRmat *A, 
                     dCSRmat *AT);

void fasp_dcsr_transpose (INT *row[2], 
                          INT *col[2], 
                          REAL *val[2], 
                          INT *nn, 
                          INT *tniz);

INT fasp_dcsr_compress (dCSRmat *A, 
                        dCSRmat *B, 
                        REAL dtol);

INT fasp_dcsr_compress_inplace (dCSRmat *A, 
                                REAL dtol);

INT fasp_dcsr_shift (dCSRmat *A, 
                     INT offset);

void fasp_dcsr_symdiagscale (dCSRmat *A, 
                             dvector *diag);


/*-------- In file: sparse_csr_omp.c --------*/

void fasp_dcsr_getdiag_omp (INT n, 
														dCSRmat *A, 
														dvector *diag, 
														INT nthreads, 
														INT openmp_holds) ;

void fasp_dcsr_cp_omp (dCSRmat *A, 
											 dCSRmat *B, 
											 int nthreads, 
											 int openmp_holds);


/*-------- In file: sparse_csrl.c --------*/

dCSRLmat * fasp_dcsrl_create (int num_rows, 
																	int num_cols, 
																	int num_nonzeros);

void fasp_dcsrl_free (dCSRLmat *A);


/*-------- In file: sparse_str.c --------*/

void fasp_dstr_init (dSTRmat *A);

dSTRmat fasp_dstr_create (int nx, 
													int ny, 
													int nz, 
													int nc, 
													int nband, 
													int *offsets);

void fasp_dstr_alloc(int nx, 
										 int ny, 
										 int nz, 
										 int nxy, 
										 int ngrid, 
										 int nband, 
										 int nc,
										 int *offsets, 
										 dSTRmat *A);

void fasp_dstr_free (dSTRmat *A);

void fasp_dstr_cp (dSTRmat *A, 
									 dSTRmat *A1);


/*-------- In file: sparse_util.c --------*/

void fasp_sparse_abybms_ (INT *ia,
													INT *ja,
													INT *ib, 
													INT *jb,
													INT *nap,
													INT *map,
													INT *mbp,
													INT *ic,
													INT *jc);

void fasp_sparse_abyb_ (INT *ia,
												INT *ja, 
												REAL *a, 
												INT *ib, 
												INT *jb, 
												REAL *b,
												INT *nap, 
												INT *map,
												INT *mbp,
												INT *ic,
												INT *jc, 
												REAL *c);

void fasp_sparse_iit_ (int *ia, 
											 int *ja, 
											 int *na, 
											 int *ma, 
											 int *iat, 
											 int *jat);

void fasp_sparse_aat_ (int *ia, 
											 int *ja,
											 double *a,
											 int *na,
											 int *ma, 
											 int *iat, 
											 int *jat, 
											 double *at);

void fasp_sparse_aplbms_ (INT *ia,
													INT *ja, 
													INT *ib,
													INT *jb,
													INT *nab, 
													INT *mab,
													INT *ic,
													INT *jc);

void fasp_sparse_aplusb_ (INT *ia,
													INT *ja, 
													REAL *a,
													INT *ib, 
													INT *jb,
													REAL *b,
													INT *nab, 
													INT *mab,
													INT *ic, 
													INT *jc, 
													REAL *c);

void fasp_sparse_rapms_ (INT *ir, 
												 INT *jr,
												 INT *ia, 
												 INT *ja,
												 INT *ip, 
												 INT *jp,
												 INT *nin,
												 INT *ncin,
												 INT *iac, 
												 INT *jac,
												 INT *maxrout);

void fasp_sparse_wtams_ (INT *jw,
												 INT *ia, 
												 INT *ja, 
												 INT *nwp,
												 INT *map,
												 INT *jv, 
												 INT *nvp, 
												 INT *icp);

void fasp_sparse_wta_ (INT *jw, 
											 REAL *w,
											 INT *ia,
											 INT *ja,
											 REAL *a,
											 INT *nwp, 
											 INT *map, 
											 INT *jv, 
											 REAL *v, 
											 INT *nvp);

void fasp_sparse_ytxbig_ (INT *jy, 
													REAL *y, 
													INT *nyp, 
													REAL *x, 
													REAL *s);

void fasp_sparse_ytx_ (INT *jy, 
											 REAL *y, 
											 INT *jx, 
											 REAL *x,
											 INT *nyp, 
											 INT *nxp, 
											 INT *icp, 
											 REAL *s);

void fasp_sparse_rapcmp_ (INT *ir, 
													INT *jr, 
													REAL *r,
													INT *ia, 
													INT *ja, 
													REAL *a,
													INT *ipt, 
													INT *jpt, 
													REAL *pt,
													INT *nin, 
													INT *ncin,
													INT *iac,
													INT *jac, 
													REAL *ac, 
													INT *idummy);


/*-------- In file: util.c --------*/

unsigned long fasp_aux_change_endian4(unsigned long x);

double fasp_aux_change_endian8(double x);

double fasp_aux_bbyteToldouble(unsigned char bytes[]);


/*-------- In file: vec.c --------*/

dvector fasp_dvec_create (INT m);

ivector fasp_ivec_create (INT m);

void fasp_dvec_alloc (INT m, 
                      dvector *u);

void fasp_ivec_alloc (INT m, 
                      ivector *u);

void fasp_dvec_free (dvector *u);

void fasp_ivec_free (ivector *u);

void fasp_dvec_init (dvector *x) ;

void fasp_dvec_rand (INT n, 
                     dvector *x);

void fasp_dvec_set (INT n, 
                    dvector *x, 
                    REAL val);

void fasp_ivec_set (INT m, ivector *u);

void fasp_dvec_cp (dvector *x, 
                   dvector *y);

REAL fasp_dvec_maxdiff (dvector *x, 
                        dvector *y);

void fasp_dvec_symdiagscale (dvector *b, 
                             dvector *diag);


/*-------- In file: vec_omp.c --------*/

void fasp_dvec_set_omp (int n, 
												dvector *x, 
												double val, 
												int nthreads, 
												int openmp_holds);

void fasp_dvec_cp_omp (dvector *x, 
											 dvector *y, 
											 int nthreads, 
											 int openmp_holds) ;


/*-------- In file: wrapper.c --------*/

void fasp_fwrapper_amg_ (int *n, 
												 int *nnz, 
												 int *ia, 
												 int *ja, 
												 double *a, 
												 double *b, 
												 double *u, 
												 double *tol, 
												 int *maxit, 
												 int *ptrlvl);

void fasp_fwrapper_krylov_amg_ (int *n, 
																int *nnz, 
																int *ia, 
																int *ja, 
																double *a, 
																double *b, 
																double *u, 
																double *tol, 
																int *maxit, 
																int *ptrlvl);

void fasp_fwrapper_krylov_stokes_ (int *nA, 
																	 int *nnzA, 
																	 int *ia,
																	 int *ja,
																	 double *aval, 
																	 int *nB,
																	 int *nnzB, 
																	 int *ib,
																	 int *jb,
																	 double *bval,
																	 int *nM, 
																	 int *nnzM,
																	 int *im, 
																	 int *jm, 
																	 double *mval,												 
																	 int *nP, 
																	 int *nnzP, 
																	 int *ip, 
																	 int *jp, 
																	 double *pval,												 
																	 double *b, 
																	 double *u, 
																	 double *beta,
																	 double *tol, 
																	 int *maxit, 
																	 int *ptrlvl);

/* Ene of fasp_functs.h */
