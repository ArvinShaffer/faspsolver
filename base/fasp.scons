# Initialize the environment
import os
import SCons.Platform

allenv = Environment(ENV = {'PATH' : os.environ['PATH']})
print "System platform:", allenv['PLATFORM']

# Checks for libraries, header files, etc.
conf = Configure(allenv)
allenv = conf.Finish()

# Get user-defined default compilers
for key, value in ARGLIST:
    if key == 'FC':
        allenv.Replace(FORTRAN=value)
    if key == 'CC':
        allenv.Replace(CC=value)
    if key == 'CXX':
        allenv.Replace(CXX=value)

# Add equivalent target as distclean 
allenv.Clean("distclean",
            [".sconsign.dblite",".sconf_temp","config.log",
             "release","shared","debug",
            ])

# Set Library path
install_path = 'lib'
 
# Set path for FASP header files
allenv.Append(CPPPATH='include')

# Set path for external libraries
allenv.Append(LIBPATH=['/usr/lib', '/usr/local/lib'])

# Set default FASP compiler options
# Note: For compatibilty reasons, we only use the simplest options
#       If necessary, one can add options like:
#          -funroll-loops 
#          -ftree-vectorize 
#     -ffast-math
#     -pg
COPT1 = '-O2'
COPT2 = '-O0 -Wall -g'
FOPT1 = '-O2'
FOPT2 = '-O0 -Wall -g'

# Speical Note: Some compilers need /TP compiler option due to some of 
# FASP C files are using the C99-standard. 
if allenv['CC']=='cl' or allenv['CC']=='icl':
    COPT1 += ' -TP'
    COPT2 += ' -TP'

# Speical Note: If need OpenMP support, we need to add a new command 
# line variable omp=1
omp = ARGUMENTS.get('omp', 0)
if int(omp):
    if allenv['CC']=='cl' or allenv['CC']=='icl':
        COPT1 += ' -openmp'
        COPT2 += ' -openmp'
    elif allenv['FORTRAN']=='ifort':
        FOPT1 += ' -openmp'
        FOPT2 += ' -openmp'
    else:
        COPT1 += ' -fopenmp'
        COPT2 += ' -fopenmp'
        FOPT1 += ' -fopenmp'
        FOPT2 += ' -fopenmp'

#######################################################################
# Our release build is derived from the common build environment...   #
# ... and set compiler flags for RELEASE version ...                  #
#######################################################################
release_env = allenv.Clone()
release_env.Append(CCFLAGS=COPT1)
release_env.Append(F77FLAGS=FOPT1)
release_env.Append(F90FLAGS=FOPT1)
release_env.Append(F95FLAGS=FOPT1)
release_env.Append(FORTRANFLAGS=FOPT1)

# ... and release builds end up in the "release" dir
release_env.VariantDir('release','src',duplicate=False)
release_env.VariantDir('release/ilu','extra/sparsekit',duplicate=False)

# ... and set source directories for RELEASE version
srcs_release = release_env.Glob('release/*.c')
srcs_release = srcs_release + release_env.Glob('release/*.cpp')
srcs_release = srcs_release + release_env.Glob('release/*.f')
srcs_release = srcs_release + release_env.Glob('release/*.f90')
srcs_release = srcs_release + release_env.Glob('release/ilu/*.f')

# ... build target for Release Version
objs_release = release_env.Object(srcs_release)

# ... make a static library
fasp_release = release_env.Library('release/libfasp', objs_release)

#######################################################################
# Our sharelib build is derived from the common build environment...  #
# ... and set compiler flags for SharedLib version ...                #
#######################################################################
shared_env = allenv.Clone()
shared_env.Append(CCFLAGS=COPT1)
shared_env.Append(F77FLAGS=FOPT1)
shared_env.Append(F90FLAGS=FOPT1)
shared_env.Append(F95FLAGS=FOPT1)
shared_env.Append(FORTRANFLAGS=FOPT1)

# ... and release builds end up in the "shared" dir
shared_env.VariantDir('shared','src',duplicate=False)
shared_env.VariantDir('shared/ilu','extra/sparsekit',duplicate=False)

# ... and set source directories for SharedLib version
srcs_shared = shared_env.Glob('shared/*.c')
srcs_shared = srcs_shared + shared_env.Glob('shared/*.cpp')
srcs_shared = srcs_shared + shared_env.Glob('shared/*.f')
srcs_shared = srcs_shared + shared_env.Glob('shared/*.f90')
srcs_shared = srcs_shared + shared_env.Glob('shared/ilu/*.f')

# ... build target for SharedLib Version
objs_shared = shared_env.SharedObject(srcs_shared)

# ... make a shared library
fasp_shared = shared_env.SharedLibrary('shared/libfasp', objs_shared)

#######################################################################
# We define our debug build environment in a similar fashion...       #
# ... and set compiler flags for DEBUG version ...                    #
#######################################################################

debug_env = allenv.Clone()
debug_env.Append(CCFLAGS=COPT2)
debug_env.Append(F77FLAGS=FOPT2)
debug_env.Append(F90FLAGS=FOPT2)
debug_env.Append(F95FLAGS=FOPT2)
debug_env.Append(FORTRANFLAGS=FOPT2)

# ... and release builds end up in the "debug" dir
debug_env.VariantDir('debug','src',duplicate=False)
debug_env.VariantDir('debug/ilu','extra/sparsekit',duplicate=False)

# ... and set source directories for DEBUG version
srcs_debug = release_env.Glob('debug/*.c')
srcs_debug = srcs_debug + release_env.Glob('debug/*.cpp')
srcs_debug = srcs_debug + release_env.Glob('debug/*.f')
srcs_debug = srcs_debug + release_env.Glob('debug/*.f90')
srcs_debug = srcs_debug + debug_env.Glob('debug/ilu/*.f')

# ... build target for Debug Version
objs_debug = debug_env.Object(srcs_debug)

# ... make a static library
fasp_debug = debug_env.Library('debug/libfaspd', objs_debug)

#########################################
# Set where to install FASP libfiles    #
#########################################

inslib  = release_env.Alias('install-lib',  release_env.Install(install_path, fasp_release))
inslibs =  shared_env.Alias('install-libs',  shared_env.Install(install_path, fasp_shared))
inslibd =   debug_env.Alias('install-libd',   debug_env.Install(install_path, fasp_debug))

allenv.Alias('install', [inslib,inslibs,inslibd])

#########################
# Set default target    #
#########################

Default(fasp_release)
