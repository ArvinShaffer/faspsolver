!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	base/extra/sparsekit/ilu.f	/^ 1    continue$/;"	language:Fortran
1	base/extra/sparsekit/ilu.f	/^ 1    mid = first$/;"	language:Fortran
10	base/extra/sparsekit/ilu.f	/^ 10         continue$/;"	language:Fortran
10	base/src/factor.f	/^ 10   continue$/;"	language:Fortran
10	base/src/schwarz.f	/^ 10         continue$/;"	language:Fortran
10	base/src/schwarz.f	/^ 10   continue$/;"	language:Fortran
10	base/src/schwarz.f	/^ 10   if(count .eq. n1) then$/;"	language:Fortran
100	base/extra/sparsekit/ilu.f	/^ 100  continue$/;"	language:Fortran
100	base/src/factor.f	/^ 100     continue$/;"	language:Fortran
100	base/src/schwarz.f	/^ 100        continue$/;"	language:Fortran
100	base/src/schwarz.f	/^ 100     continue$/;"	language:Fortran
100	base/src/schwarz.f	/^ 100  continue$/;"	language:Fortran
110	base/src/factor.f	/^ 110     ip(j) = i$/;"	language:Fortran
110	base/src/schwarz.f	/^ 110  k = n - kh$/;"	language:Fortran
1111	base/src/schwarz.f	/^ 1111 format(\/\/10x,'          there were  '\/$/;"	language:Fortran
120	base/src/factor.f	/^ 120     iup(i) = iua$/;"	language:Fortran
120	base/src/schwarz.f	/^ 120  b=0.d0$/;"	language:Fortran
130	base/src/factor.f	/^ 130  continue$/;"	language:Fortran
130	base/src/schwarz.f	/^ 130  k=n-kh1$/;"	language:Fortran
140	base/src/schwarz.f	/^ 140  continue$/;"	language:Fortran
141	base/src/schwarz.f	/^ 141     k=k+1$/;"	language:Fortran
145	base/src/schwarz.f	/^ 145     kk=min(ic,nd)$/;"	language:Fortran
15	base/src/schwarz.f	/^ 15         continue$/;"	language:Fortran
150	base/extra/sparsekit/ilu.f	/^ 150     jj = jj+1$/;"	language:Fortran
150	base/src/schwarz.f	/^ 150     continue$/;"	language:Fortran
151	base/extra/sparsekit/ilu.f	/^ 151     continue$/;"	language:Fortran
160	base/extra/sparsekit/ilu.f	/^ 160     continue $/;"	language:Fortran
160	base/extra/sparsekit/ilu.f	/^ 160     continue$/;"	language:Fortran
160	base/src/schwarz.f	/^ 160  continue$/;"	language:Fortran
170	base/extra/sparsekit/ilu.f	/^ 170     continue$/;"	language:Fortran
2	base/extra/sparsekit/ilu.f	/^ 2    continue$/;"	language:Fortran
20	base/extra/sparsekit/ilu.f	/^ 20         continue$/;"	language:Fortran
20	base/src/factor.f	/^ 20      continue$/;"	language:Fortran
20	base/src/schwarz.f	/^ 20      continue$/;"	language:Fortran
20	base/src/schwarz.f	/^ 20   continue$/;"	language:Fortran
200	base/src/schwarz.f	/^ 200  continue$/;"	language:Fortran
2000	base/src/schwarz.f	/^ 2000 format(\/\/'   stop - matrix not positive definite'  ,\/\/$/;"	language:Fortran
203	base/extra/sparsekit/ilu.f	/^ 203     continue$/;"	language:Fortran
204	base/extra/sparsekit/ilu.f	/^ 204     continue$/;"	language:Fortran
210	base/src/schwarz.f	/^ 210     k=n-kh$/;"	language:Fortran
240	base/src/schwarz.f	/^ 240     k=n$/;"	language:Fortran
260	base/src/schwarz.f	/^ 260     continue$/;"	language:Fortran
270	base/src/schwarz.f	/^ 270        kk=min0(ic,nd)$/;"	language:Fortran
280	base/src/schwarz.f	/^ 280        continue$/;"	language:Fortran
290	base/src/schwarz.f	/^ 290        b=b+c*a(kk)$/;"	language:Fortran
30	base/extra/sparsekit/ilu.f	/^ 30      continue$/;"	language:Fortran
30	base/src/factor.f	/^ 30      continue$/;"	language:Fortran
30	base/src/schwarz.f	/^ 30      continue$/;"	language:Fortran
30	base/src/schwarz.f	/^ 30   continue$/;"	language:Fortran
300	base/src/schwarz.f	/^ 300     continue$/;"	language:Fortran
302	base/extra/sparsekit/ilu.f	/^ 302     continue$/;"	language:Fortran
304	base/src/schwarz.f	/^ 304     if (a(kn)) 310,310,200$/;"	language:Fortran
308	base/extra/sparsekit/ilu.f	/^ 308     continue$/;"	language:Fortran
310	base/src/schwarz.f	/^ 310     nlow=nlow+1$/;"	language:Fortran
320	base/src/schwarz.f	/^ 320     write(*,2000) n,a(kn)$/;"	language:Fortran
40	base/extra/sparsekit/ilu.f	/^ 40   continue$/;"	language:Fortran
40	base/src/factor.f	/^ 40      di(i) = ad(i)$/;"	language:Fortran
40	base/src/factor.f	/^ 40      l = ip(l)$/;"	language:Fortran
40	base/src/schwarz.f	/^ 40      continue$/;"	language:Fortran
40	base/src/schwarz.f	/^ 40   continue$/;"	language:Fortran
400	base/src/schwarz.f	/^ 400  continue$/;"	language:Fortran
410	base/src/schwarz.f	/^ 410     k = n$/;"	language:Fortran
410	base/src/schwarz.f	/^ 410     k=n$/;"	language:Fortran
420	base/src/schwarz.f	/^ 420     continue$/;"	language:Fortran
480	base/src/schwarz.f	/^ 480  continue$/;"	language:Fortran
50	base/extra/sparsekit/ilu.f	/^ 50                        continue$/;"	language:Fortran
50	base/src/factor.f	/^ 50      l = ln$/;"	language:Fortran
50	base/src/factor.f	/^ 50   iua = iu(k)$/;"	language:Fortran
50	base/src/schwarz.f	/^ 50   continue$/;"	language:Fortran
500	base/extra/sparsekit/ilu.f	/^ 500  continue$/;"	language:Fortran
500	base/src/schwarz.f	/^ 500  continue$/;"	language:Fortran
501	base/extra/sparsekit/ilu.f	/^ 501     continue$/;"	language:Fortran
510	base/src/schwarz.f	/^ 510     k = n$/;"	language:Fortran
510	base/src/schwarz.f	/^ 510     k=n$/;"	language:Fortran
520	base/src/schwarz.f	/^ 520     continue$/;"	language:Fortran
530	base/src/schwarz.f	/^ 530     n=n-1$/;"	language:Fortran
530	base/src/schwarz.f	/^ 530     nl = n - 1$/;"	language:Fortran
60	base/extra/sparsekit/ilu.f	/^ 60                continue$/;"	language:Fortran
60	base/src/factor.f	/^ 60      continue$/;"	language:Fortran
60	base/src/factor.f	/^ 60      if (min .eq. nh) go to 90$/;"	language:Fortran
60	base/src/schwarz.f	/^ 60   continue$/;"	language:Fortran
70	base/src/factor.f	/^ 70      ip(j) = l$/;"	language:Fortran
70	base/src/factor.f	/^ 70      l = ip(min)$/;"	language:Fortran
70	base/src/factor.f	/^ 70   k = k - 1$/;"	language:Fortran
70	base/src/schwarz.f	/^ 70   continue$/;"	language:Fortran
80	base/extra/sparsekit/ilu.f	/^ 80         continue$/;"	language:Fortran
80	base/src/factor.f	/^ 80      if(l .ne. last) go to 50$/;"	language:Fortran
80	base/src/factor.f	/^ 80      ip(min) = i$/;"	language:Fortran
80	base/src/schwarz.f	/^ 80   continue$/;"	language:Fortran
90	base/src/factor.f	/^ 90      continue$/;"	language:Fortran
90	base/src/factor.f	/^ 90      di(i) = 1.d00\/di(i)$/;"	language:Fortran
90	base/src/schwarz.f	/^ 90   continue$/;"	language:Fortran
995	base/extra/sparsekit/ilu.f	/^ 995  ierr = -1$/;"	language:Fortran
996	base/extra/sparsekit/ilu.f	/^ 996  ierr = -2$/;"	language:Fortran
997	base/extra/sparsekit/ilu.f	/^ 997  ierr = -3$/;"	language:Fortran
998	base/extra/sparsekit/ilu.f	/^ 998  ierr = -4$/;"	language:Fortran
999	base/extra/sparsekit/ilu.f	/^ 999  ierr = -5$/;"	language:Fortran
A	base/include/fasp.h	/^	dCSRmat *A;$/;"	language:C++
A	base/include/fasp.h	/^	dCSRmat A;  \/\/ note: has to be start from 1!! Change later$/;"	language:C++
A	base/include/fasp.h	/^	dCSRmat A;$/;"	language:C++
A	base/include/fasp_block.h	/^	block_BSR *A; \/**< whole jacobian system in block_BSRmat *\/$/;"	language:C++
A	base/include/fasp_block.h	/^	block_Reservoir *A; \/**< problem data in block_Reservoir format *\/$/;"	language:C++
A	base/include/fasp_block.h	/^	dBSRmat *A;$/;"	language:C++
A	base/include/fasp_block.h	/^	dBSRmat A;$/;"	language:C++
A	base/include/fasp_block.h	/^	dCSRmat  *A; \/**< problem data, the sparse matrix *\/$/;"	language:C++
A CUDA example	doc/userguide.tex	/^\\section{A CUDA example}\\label{sec:cuda}$/;"	language:Tex
A Tutorial	doc/userguide.tex	/^\\chapter{A Tutorial}\\label{ch:tutor}$/;"	language:Tex
ABORT	base/extra/dlmalloc/dlmalloc.c	565;"	language:C
ABORT	base/include/malloc.c.h	585;"	language:C++
ABORT_ON_ASSERT_FAILURE	base/extra/dlmalloc/dlmalloc.c	568;"	language:C
ABORT_ON_ASSERT_FAILURE	base/include/malloc.c.h	588;"	language:C++
ABS	base/include/fasp.h	69;"	language:C++
ACQUIRE_LOCK	base/extra/dlmalloc/dlmalloc.c	1659;"	language:C
ACQUIRE_LOCK	base/extra/dlmalloc/dlmalloc.c	1759;"	language:C
ACQUIRE_LOCK	base/extra/dlmalloc/dlmalloc.c	1824;"	language:C
ACQUIRE_LOCK	base/extra/dlmalloc/dlmalloc.c	1855;"	language:C
ACQUIRE_LOCK	base/include/malloc.c.h	1781;"	language:C++
ACQUIRE_LOCK	base/include/malloc.c.h	1882;"	language:C++
ACQUIRE_LOCK	base/include/malloc.c.h	1947;"	language:C++
ACQUIRE_LOCK	base/include/malloc.c.h	1978;"	language:C++
ACQUIRE_MALLOC_GLOBAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1906;"	language:C
ACQUIRE_MALLOC_GLOBAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1912;"	language:C
ACQUIRE_MALLOC_GLOBAL_LOCK	base/include/malloc.c.h	2029;"	language:C++
ACQUIRE_MALLOC_GLOBAL_LOCK	base/include/malloc.c.h	2035;"	language:C++
ALLPROG	base/Makefile	/^ALLPROG=$(AMGLIB)$/;"	language:Make
ALLPROG	test/Makefile	/^ALLPROG=$(TESTLIB) test$/;"	language:Make
ALLPROG	tutorial/Makefile	/^ALLPROG=$(TESTLIB)$/;"	language:Make
AMGLIB	base/Makefile	/^AMGLIB=lib\/libfasp.a$/;"	language:Make
AMG_ILU_levels	base/include/fasp.h	/^	SHORT AMG_ILU_levels; \/**< how many levels use ILU smoother *\/	$/;"	language:C++
AMG_amli_degree	base/include/fasp.h	/^	SHORT AMG_amli_degree; \/**< degree of the polynomial used by AMLI cycle *\/$/;"	language:C++
AMG_coarse_dof	base/include/fasp.h	/^	INT AMG_coarse_dof;	\/**< minimal coarsest level dof *\/$/;"	language:C++
AMG_coarse_scaling	base/include/fasp.h	/^	SHORT AMG_coarse_scaling; \/**< switch of scaling of the coarse grid correction *\/$/;"	language:C++
AMG_coarsening_type	base/include/fasp.h	/^	SHORT AMG_coarsening_type; \/**< coarsening type *\/$/;"	language:C++
AMG_cycle_type	base/include/fasp.h	/^	SHORT AMG_cycle_type; \/**< type of cycle*\/$/;"	language:C++
AMG_data	base/include/fasp.h	/^} AMG_data; \/**< Data for AMG *\/$/;"	language:C++
AMG_data_bsr	base/include/fasp_block.h	/^} AMG_data_bsr; \/**< AMG data for BSR matrices *\/$/;"	language:C++
AMG_interpolation_type	base/include/fasp.h	/^	SHORT AMG_interpolation_type; \/**< interpolation type *\/$/;"	language:C++
AMG_levels	base/include/fasp.h	/^	SHORT AMG_levels; \/**< maximal number of levels *\/$/;"	language:C++
AMG_max_aggregation	base/include/fasp.h	/^	INT AMG_max_aggregation; \/**< max size of each aggregate *\/$/;"	language:C++
AMG_max_row_sum	base/include/fasp.h	/^	REAL AMG_max_row_sum; \/**< maximal row sum *\/$/;"	language:C++
AMG_maxit	base/include/fasp.h	/^	INT AMG_maxit; \/**< max number of iterations for AMG if used as preconditioner *\/$/;"	language:C++
AMG_nl_amli_krylov_type	base/include/fasp.h	/^    SHORT AMG_nl_amli_krylov_type; \/**< type of krylov method used by nonlinear AMLI cycle *\/$/;"	language:C++
AMG_param	base/include/fasp.h	/^} AMG_param; \/**< Parameters for AMG *\/$/;"	language:C++
AMG_polynomial_degree	base/include/fasp.h	/^    SHORT AMG_polynomial_degree; \/**< degree of the polynomial smoother *\/$/;"	language:C++
AMG_postsmooth_iter	base/include/fasp.h	/^	SHORT AMG_postsmooth_iter; \/**< number of postsmoothing *\/$/;"	language:C++
AMG_presmooth_iter	base/include/fasp.h	/^	SHORT AMG_presmooth_iter; \/**< number of presmoothing *\/$/;"	language:C++
AMG_relaxation	base/include/fasp.h	/^	REAL AMG_relaxation; \/**< over-relaxation parameter for SOR *\/$/;"	language:C++
AMG_schwarz_levels	base/include/fasp.h	/^    INT AMG_schwarz_levels; \/**< number of levels use schwarz smoother *\/$/;"	language:C++
AMG_smooth_filter	base/include/fasp.h	/^	SHORT AMG_smooth_filter; \/**< switch for filtered matrix for smoothing the tentative prolongation *\/$/;"	language:C++
AMG_smoother	base/include/fasp.h	/^	SHORT AMG_smoother; \/**< type of smoother *\/$/;"	language:C++
AMG_strong_coupled	base/include/fasp.h	/^	REAL AMG_strong_coupled; \/**< strong coupled threshold for aggregate *\/$/;"	language:C++
AMG_strong_threshold	base/include/fasp.h	/^	REAL AMG_strong_threshold; \/**< strong threshold for coarsening *\/$/;"	language:C++
AMG_tentative_smooth	base/include/fasp.h	/^	REAL AMG_tentative_smooth; \/**< relaxation parameter for smoothing the tentative prolongation *\/$/;"	language:C++
AMG_tol	base/include/fasp.h	/^	REAL AMG_tol; \/**< tolerance for AMG if used as preconditioner *\/$/;"	language:C++
AMG_truncation_threshold	base/include/fasp.h	/^	REAL AMG_truncation_threshold; \/**< truncation factor for interpolation *\/$/;"	language:C++
AMG_type	base/include/fasp.h	/^	SHORT AMG_type; \/**< Type of AMG *\/$/;"	language:C++
AMG_type	base/include/fasp.h	/^	SHORT AMG_type;$/;"	language:C++
AMG_type	base/include/fasp_block.h	/^	SHORT AMG_type;$/;"	language:C++
AMLI_CYCLE	base/include/messages.h	129;"	language:C++
AR	base/Makefile	/^AR=ar ruc$/;"	language:Make
AR	test/Makefile	/^AR=ar ruc$/;"	language:Make
AR	tutorial/Makefile	/^AR=ar ruc$/;"	language:Make
ASCEND	base/include/messages.h	173;"	language:C++
A_str	base/include/fasp.h	/^	dSTRmat *A_str;$/;"	language:C++
Aarray	base/include/fasp_block.h	/^	dCSRmat  **Aarray; \/**< data generated in the setup phase *\/	$/;"	language:C++
Abcsr	base/include/fasp_block.h	/^	block_dCSRmat *Abcsr; \/**< problem data in block_dCSRmat format *\/$/;"	language:C++
Ablock	base/include/fasp_block.h	/^	dCSRmat **Ablock; \/**< problem data, the blocks *\/$/;"	language:C++
Ac	base/include/fasp_block.h	/^	dCSRmat Ac;$/;"	language:C++
Acsr	base/include/fasp_block.h	/^	dCSRmat *Acsr; \/**< problem data in CSR format *\/$/;"	language:C++
Algebraic multigrid	doc/userguide.tex	/^\\section{Algebraic multigrid}\\label{sec:amg}$/;"	language:Tex
An OpenMP example	doc/userguide.tex	/^\\section{An OpenMP example}\\label{sec:mop}$/;"	language:Tex
Appendix	doc/userguide.tex	/^\\chapter*{Appendix}\\label{ch:append}$/;"	language:Tex
BIGREAL	base/include/fasp.h	55;"	language:C++
BOPT	base/Makefile	/^BOPT=-g -O0 -Wall$/;"	language:Make
BOPT	test/Makefile	/^BOPT=-g -pg -O0 -Wall$/;"	language:Make
BOPT	tutorial/Makefile	/^BOPT=-g -O0 -Wall$/;"	language:Make
Basic Usage	doc/userguide.tex	/^\\chapter{Basic Usage}\\label{ch:basic}$/;"	language:Tex
Bd_apply_info	test/include/heat_fem.h	/^typedef struct Bd_apply_info$/;"	language:C++
Bd_apply_info	test/include/heat_fem.h	/^} Bd_apply_info;$/;"	language:C++
BitScanForward	base/extra/dlmalloc/dlmalloc.c	1379;"	language:C
BitScanForward	base/include/malloc.c.h	1403;"	language:C++
BitScanReverse	base/extra/dlmalloc/dlmalloc.c	1380;"	language:C
BitScanReverse	base/include/malloc.c.h	1404;"	language:C++
Block iterative methods and preconditioners	doc/userguide.tex	/^\\section{Block iterative methods and preconditioners}\\label{sec:block}$/;"	language:Tex
C2N	base/include/fasp.h	84;"	language:C++
CALL_DIRECT_MMAP	base/extra/dlmalloc/dlmalloc.c	1578;"	language:C
CALL_DIRECT_MMAP	base/extra/dlmalloc/dlmalloc.c	1580;"	language:C
CALL_DIRECT_MMAP	base/extra/dlmalloc/dlmalloc.c	1588;"	language:C
CALL_DIRECT_MMAP	base/include/malloc.c.h	1699;"	language:C++
CALL_DIRECT_MMAP	base/include/malloc.c.h	1701;"	language:C++
CALL_DIRECT_MMAP	base/include/malloc.c.h	1709;"	language:C++
CALL_MMAP	base/extra/dlmalloc/dlmalloc.c	1568;"	language:C
CALL_MMAP	base/extra/dlmalloc/dlmalloc.c	1570;"	language:C
CALL_MMAP	base/extra/dlmalloc/dlmalloc.c	1589;"	language:C
CALL_MMAP	base/include/malloc.c.h	1689;"	language:C++
CALL_MMAP	base/include/malloc.c.h	1691;"	language:C++
CALL_MMAP	base/include/malloc.c.h	1710;"	language:C++
CALL_MORECORE	base/extra/dlmalloc/dlmalloc.c	1553;"	language:C
CALL_MORECORE	base/extra/dlmalloc/dlmalloc.c	1555;"	language:C
CALL_MORECORE	base/extra/dlmalloc/dlmalloc.c	1558;"	language:C
CALL_MORECORE	base/include/malloc.c.h	1674;"	language:C++
CALL_MORECORE	base/include/malloc.c.h	1676;"	language:C++
CALL_MORECORE	base/include/malloc.c.h	1679;"	language:C++
CALL_MREMAP	base/extra/dlmalloc/dlmalloc.c	1598;"	language:C
CALL_MREMAP	base/extra/dlmalloc/dlmalloc.c	1600;"	language:C
CALL_MREMAP	base/extra/dlmalloc/dlmalloc.c	1603;"	language:C
CALL_MREMAP	base/include/malloc.c.h	1719;"	language:C++
CALL_MREMAP	base/include/malloc.c.h	1721;"	language:C++
CALL_MREMAP	base/include/malloc.c.h	1724;"	language:C++
CALL_MUNMAP	base/extra/dlmalloc/dlmalloc.c	1573;"	language:C
CALL_MUNMAP	base/extra/dlmalloc/dlmalloc.c	1575;"	language:C
CALL_MUNMAP	base/extra/dlmalloc/dlmalloc.c	1590;"	language:C
CALL_MUNMAP	base/include/malloc.c.h	1694;"	language:C++
CALL_MUNMAP	base/include/malloc.c.h	1696;"	language:C++
CALL_MUNMAP	base/include/malloc.c.h	1711;"	language:C++
CC	base/Makefile	/^CC=gcc$/;"	language:Make
CC	test/Makefile	/^CC=gcc$/;"	language:Make
CC	tutorial/Makefile	/^CC=gcc$/;"	language:Make
CDEFS	base/Makefile	/^CDEFS=$/;"	language:Make
CDEFS	test/Makefile	/^CDEFS=$/;"	language:Make
CDEFS	tutorial/Makefile	/^CDEFS=$/;"	language:Make
CFLAGS	base/Makefile	/^CFLAGS=$(COPTS) $(CINCLUDES) $(CDEFS)$/;"	language:Make
CFLAGS	test/Makefile	/^CFLAGS=$(CDEFS) $(COPTS) $(CINCLUDES)$/;"	language:Make
CFLAGS	tutorial/Makefile	/^CFLAGS=$(CDEFS) $(COPTS) $(CINCLUDES)$/;"	language:Make
CF_ORDER	base/include/messages.h	165;"	language:C++
CG	base/include/messages.h	138;"	language:C++
CGPT	base/include/messages.h	157;"	language:C++
CHMEM_MODE	base/include/fasp.h	33;"	language:C++
CHUNK_ALIGN_MASK	base/extra/dlmalloc/dlmalloc.c	1453;"	language:C
CHUNK_ALIGN_MASK	base/include/malloc.c.h	1477;"	language:C++
CHUNK_OVERHEAD	base/extra/dlmalloc/dlmalloc.c	2073;"	language:C
CHUNK_OVERHEAD	base/extra/dlmalloc/dlmalloc.c	2075;"	language:C
CHUNK_OVERHEAD	base/include/malloc.c.h	2195;"	language:C++
CHUNK_OVERHEAD	base/include/malloc.c.h	2197;"	language:C++
CINCLUDES	base/Makefile	/^CINCLUDES=$(INCLUDE)$/;"	language:Make
CINCLUDES	test/Makefile	/^CINCLUDES=$(INCLUDE)$/;"	language:Make
CINCLUDES	tutorial/Makefile	/^CINCLUDES=$(INCLUDE)$/;"	language:Make
CINUSE_BIT	base/extra/dlmalloc/dlmalloc.c	2117;"	language:C
CINUSE_BIT	base/include/malloc.c.h	2239;"	language:C++
CLASSIC_AMG	base/include/messages.h	120;"	language:C++
CLFLAGS	test/Makefile	/^CLFLAGS=-lstdc++ $(LINKOPTS) $(LIBS)$/;"	language:Make
CLFLAGS	tutorial/Makefile	/^CLFLAGS=-lstdc++ $(LINKOPTS) $(LIBS)$/;"	language:Make
CMFAIL	base/extra/dlmalloc/dlmalloc.c	1474;"	language:C
CMFAIL	base/include/malloc.c.h	1519;"	language:C++
COL	base/include/fasp_block.h	/^	INT COL;$/;"	language:C++
COPTS	base/Makefile	/^COPTS=$(BOPT)$/;"	language:Make
COPTS	test/Makefile	/^COPTS=$(BOPT)$/;"	language:Make
COPTS	tutorial/Makefile	/^COPTS=$(BOPT)$/;"	language:Make
CORRUPTION_ERROR_ACTION	base/extra/dlmalloc/dlmalloc.c	2629;"	language:C
CORRUPTION_ERROR_ACTION	base/extra/dlmalloc/dlmalloc.c	2635;"	language:C
CORRUPTION_ERROR_ACTION	base/include/malloc.c.h	2730;"	language:C++
CORRUPTION_ERROR_ACTION	base/include/malloc.c.h	2736;"	language:C++
CPFIRST	base/include/messages.h	171;"	language:C++
CPP	base/Makefile	/^CPP=g++$/;"	language:Make
CPP	test/Makefile	/^CPP=g++$/;"	language:Make
CPP	tutorial/Makefile	/^CPP=g++$/;"	language:Make
CSRC	base/Makefile	/^CSRC := $(foreach DIR,$(SRCDIR),$(wildcard $(DIR)\/*.c))$/;"	language:Make
CSRC	test/Makefile	/^CSRC := $(foreach DIR,$(SRCDIR),$(wildcard $(DIR)\/*.c))$/;"	language:Make
CSRC	tutorial/Makefile	/^CSRC := $(foreach DIR,$(SRCDIR),$(wildcard $(DIR)\/*.c))$/;"	language:Make
CURRENT_THREAD	base/extra/dlmalloc/dlmalloc.c	1657;"	language:C
CURRENT_THREAD	base/extra/dlmalloc/dlmalloc.c	1757;"	language:C
CURRENT_THREAD	base/extra/dlmalloc/dlmalloc.c	1822;"	language:C
CURRENT_THREAD	base/extra/dlmalloc/dlmalloc.c	1853;"	language:C
CURRENT_THREAD	base/include/malloc.c.h	1779;"	language:C++
CURRENT_THREAD	base/include/malloc.c.h	1880;"	language:C++
CURRENT_THREAD	base/include/malloc.c.h	1945;"	language:C++
CURRENT_THREAD	base/include/malloc.c.h	1976;"	language:C++
ChkedTlsGetValue	base/extra/nedmalloc/nedmalloc.c	/^static LPVOID ChkedTlsGetValue(DWORD idx)$/;"	language:C	signature:(DWORD idx)
Compilation	doc/userguide.tex	/^\\subsection{Compilation}\\label{ssec:lib}$/;"	language:Tex
DEBUG	base/extra/dlmalloc/dlmalloc.c	1308;"	language:C
DEBUG	base/extra/nedmalloc/nedmalloc.c	105;"	language:C
DEBUG	base/extra/nedmalloc/nedmalloc.c	81;"	language:C
DEBUG	base/extra/nedmalloc/nedmalloc.c	85;"	language:C
DEBUG	base/extra/nedmalloc/nedmalloc.c	87;"	language:C
DEBUG	base/extra/nedmalloc/nedmalloc.c	90;"	language:C
DEBUG	base/include/malloc.c.h	1328;"	language:C++
DEBUG_MODE	base/include/fasp.h	32;"	language:C++
DEFAULT_GRANULARITY	base/extra/dlmalloc/dlmalloc.c	619;"	language:C
DEFAULT_GRANULARITY	base/extra/dlmalloc/dlmalloc.c	621;"	language:C
DEFAULT_GRANULARITY	base/extra/nedmalloc/nedmalloc.c	95;"	language:C
DEFAULT_GRANULARITY	base/include/malloc.c.h	639;"	language:C++
DEFAULT_GRANULARITY	base/include/malloc.c.h	641;"	language:C++
DEFAULT_GRANULARITY_ALIGNED	base/extra/nedmalloc/nedmalloc.c	97;"	language:C
DEFAULT_MMAP_THRESHOLD	base/extra/dlmalloc/dlmalloc.c	633;"	language:C
DEFAULT_MMAP_THRESHOLD	base/extra/dlmalloc/dlmalloc.c	635;"	language:C
DEFAULT_MMAP_THRESHOLD	base/include/malloc.c.h	653;"	language:C++
DEFAULT_MMAP_THRESHOLD	base/include/malloc.c.h	655;"	language:C++
DEFAULT_TRIM_THRESHOLD	base/extra/dlmalloc/dlmalloc.c	626;"	language:C
DEFAULT_TRIM_THRESHOLD	base/extra/dlmalloc/dlmalloc.c	628;"	language:C
DEFAULT_TRIM_THRESHOLD	base/include/malloc.c.h	646;"	language:C++
DEFAULT_TRIM_THRESHOLD	base/include/malloc.c.h	648;"	language:C++
DESCEND	base/include/messages.h	174;"	language:C++
DIAGONAL_PREF	base/include/fasp.h	34;"	language:C++
DIM	test/main/testheat.c	20;"	language:C
DIM	test/src/heat_fem.c	5;"	language:C
DIM	test/src/mesh.c	8;"	language:C
DIM	test/src/poisson_fem.c	10;"	language:C
DIRECT_MMAP	base/extra/dlmalloc/dlmalloc.c	1587;"	language:C
DIRECT_MMAP	base/include/malloc.c.h	1708;"	language:C++
DIRECT_MMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1500;"	language:C
DIRECT_MMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1537;"	language:C
DIRECT_MMAP_DEFAULT	base/include/malloc.c.h	1572;"	language:C++
DIRECT_MMAP_DEFAULT	base/include/malloc.c.h	1658;"	language:C++
DIRICHLET	test/include/assemble.h	11;"	language:C++
DIRICHLET	test/include/mesh.h	8;"	language:C++
DIRICHLET	test/main/testfct_heat.inl	9;"	language:C++
DIRICHLET	test/main/testfct_poisson.inl	8;"	language:C++
DLMALLOC	base/include/fasp.h	41;"	language:C++
DLMALLOC_VERSION	base/extra/dlmalloc/dlmalloc.c	485;"	language:C
DLMALLOC_VERSION	base/include/malloc.c.h	506;"	language:C++
DPSinvDSS	base/include/fasp_block.h	/^	dvector *DPSinvDSS;$/;"	language:C++
Diaginv	base/src/smoother_poly.c	/^static void Diaginv(dCSRmat *Amat, REAL *Dinv)$/;"	language:C	signature:(dCSRmat *Amat, REAL *Dinv)
Diagx	base/src/smoother_poly.c	/^static void Diagx(REAL *Dinv, INT n, REAL *x, REAL *b)$/;"	language:C	signature:(REAL *Dinv, INT n, REAL *x, REAL *b)
DinvAnorminf	base/src/smoother_poly.c	/^static REAL DinvAnorminf(dCSRmat *Amat, REAL *Dinv)$/;"	language:C	signature:(dCSRmat *Amat, REAL *Dinv)
ENABLE_TOLERANT_NEDMALLOC	base/include/nedmalloc.h	144;"	language:C++
ENABLE_TOLERANT_NEDMALLOC	base/include/nedmalloc.h	92;"	language:C++
ERROR_ALLOC_MEM	base/include/messages.h	57;"	language:C++
ERROR_AMG_INTERP_TYPE	base/include/messages.h	62;"	language:C++
ERROR_AMG_SMOOTH_TYPE	base/include/messages.h	63;"	language:C++
ERROR_DATA_STRUCTURE	base/include/messages.h	58;"	language:C++
ERROR_DATA_ZERODIAG	base/include/messages.h	59;"	language:C++
ERROR_DUMMY_VAR	base/include/messages.h	60;"	language:C++
ERROR_INPUT_PAR	base/include/messages.h	52;"	language:C++
ERROR_MISC	base/include/messages.h	55;"	language:C++
ERROR_NUM_BLOCKS	base/include/messages.h	54;"	language:C++
ERROR_OPEN_FILE	base/include/messages.h	50;"	language:C++
ERROR_QUAD_DIM	base/include/messages.h	76;"	language:C++
ERROR_QUAD_TYPE	base/include/messages.h	75;"	language:C++
ERROR_REGRESS	base/include/messages.h	53;"	language:C++
ERROR_SOLVER_EXIT	base/include/messages.h	73;"	language:C++
ERROR_SOLVER_ILUSETUP	base/include/messages.h	70;"	language:C++
ERROR_SOLVER_MAXIT	base/include/messages.h	72;"	language:C++
ERROR_SOLVER_MISC	base/include/messages.h	71;"	language:C++
ERROR_SOLVER_PRECTYPE	base/include/messages.h	66;"	language:C++
ERROR_SOLVER_SOLSTAG	base/include/messages.h	68;"	language:C++
ERROR_SOLVER_STAG	base/include/messages.h	67;"	language:C++
ERROR_SOLVER_TOLSMALL	base/include/messages.h	69;"	language:C++
ERROR_SOLVER_TYPE	base/include/messages.h	65;"	language:C++
ERROR_WRONG_FILE	base/include/messages.h	51;"	language:C++
EXTDIR	base/Makefile	/^EXTDIR=.\/extra .\/extra\/interface $/;"	language:Make
EXTERN_BIT	base/extra/dlmalloc/dlmalloc.c	1610;"	language:C
EXTERN_BIT	base/include/malloc.c.h	1731;"	language:C++
External libraries	doc/userguide.tex	/^\\subsection{External libraries}\\label{ssec:lib}$/;"	language:Tex
FALSE	base/include/messages.h	27;"	language:C++
FASP for Reservoir Simulations	doc/userguide.tex	/^\\chapter{FASP for Reservoir Simulations}\\label{ch:blkoil}$/;"	language:Tex
FASP for Stokes and Navier Stokes	doc/userguide.tex	/^\\chapter{FASP for Stokes and Navier-Stokes}\\label{ch:ns}$/;"	language:Tex
FASPDIR	test/Makefile	/^FASPDIR=..\/..\/faspsolver$/;"	language:Make
FASPDIR	tutorial/Makefile	/^FASPDIR=..\/..\/faspsolver$/;"	language:Make
FASPLIB	test/Makefile	/^FASPLIB=$(FASPDIR)\/base\/lib\/libfasp.a$/;"	language:Make
FASPLIB	tutorial/Makefile	/^FASPLIB=${FASPDIR}\/base\/lib\/libfasp.a$/;"	language:Make
FASP_GET_NUM_THREADS	base/src/fasp_get_num_threads.c	/^INT FASP_GET_NUM_THREADS()$/;"	language:C
FASP_GET_START_END	base/include/fasp.h	940;"	language:C++
FASP_USE_ILU	base/include/fasp.h	39;"	language:C++
FASP_USE_OPENMP	base/include/fasp.h	40;"	language:C++
FC	base/Makefile	/^FC=gfortran$/;"	language:Make
FC	test/Makefile	/^FC=gfortran$/;"	language:Make
FC	tutorial/Makefile	/^FC=gfortran$/;"	language:Make
FDEFS	base/Makefile	/^FDEFS=$/;"	language:Make
FDEFS	test/Makefile	/^FDEFS=$(CDEFS)$/;"	language:Make
FDEFS	tutorial/Makefile	/^FDEFS=$(CDEFS)$/;"	language:Make
FEM_param	test/include/misc.h	/^typedef struct FEM_param{$/;"	language:C++
FEM_param	test/include/misc.h	/^} FEM_param;$/;"	language:C++
FEM_param_init	test/src/misc.c	/^void FEM_param_init (FEM_param *pt)$/;"	language:C	signature:(FEM_param *pt)
FEM_param_set	test/src/misc.c	/^int FEM_param_set(int argc, const char *argv [], FEM_param * pt)$/;"	language:C	signature:(int argc, const char *argv [], FEM_param * pt)
FENCEPOST_HEAD	base/extra/dlmalloc/dlmalloc.c	2123;"	language:C
FENCEPOST_HEAD	base/include/malloc.c.h	2245;"	language:C++
FFLAGS	base/Makefile	/^FFLAGS=$(FOPTS) $(FINCLUDES) $(FDEFS)$/;"	language:Make
FFLAGS	test/Makefile	/^FFLAGS=$(FDEFS) $(FOPTS) $(FINCLUDES) $/;"	language:Make
FFLAGS	tutorial/Makefile	/^FFLAGS=$(FDEFS) $(FOPTS) $(FINCLUDES)$/;"	language:Make
FGPT	base/include/messages.h	156;"	language:C++
FINCLUDES	base/Makefile	/^FINCLUDES=$(CINCLUDES)$/;"	language:Make
FINCLUDES	test/Makefile	/^FINCLUDES=$(CINCLUDES)$/;"	language:Make
FINCLUDES	tutorial/Makefile	/^FINCLUDES=$(CINCLUDES)$/;"	language:Make
FLAG4_BIT	base/extra/dlmalloc/dlmalloc.c	2118;"	language:C
FLAG4_BIT	base/include/malloc.c.h	2240;"	language:C++
FLAG_BITS	base/extra/dlmalloc/dlmalloc.c	2120;"	language:C
FLAG_BITS	base/include/malloc.c.h	2242;"	language:C++
FLFLAGS	test/Makefile	/^FLFLAGS=-lm $(LINKOPTS) $(LIBS)$/;"	language:Make
FLFLAGS	tutorial/Makefile	/^FLFLAGS=-lm $(LINKOPTS) $(LIBS)$/;"	language:Make
FOOTERS	base/extra/dlmalloc/dlmalloc.c	562;"	language:C
FOOTERS	base/extra/nedmalloc/nedmalloc.c	72;"	language:C
FOOTERS	base/include/malloc.c.h	582;"	language:C++
FOPTS	base/Makefile	/^FOPTS=$(BOPT)$/;"	language:Make
FOPTS	test/Makefile	/^FOPTS=$(BOPT)$/;"	language:Make
FOPTS	tutorial/Makefile	/^FOPTS=$(BOPT)$/;"	language:Make
FORCEINLINE	base/extra/dlmalloc/dlmalloc.c	727;"	language:C
FORCEINLINE	base/extra/dlmalloc/dlmalloc.c	729;"	language:C
FORCEINLINE	base/extra/dlmalloc/dlmalloc.c	745;"	language:C
FORCEINLINE	base/extra/dlmalloc/dlmalloc.c	749;"	language:C
FORCEINLINE	base/extra/nedmalloc/nedmalloc.c	51;"	language:C
FORCEINLINE	base/include/malloc.c.h	747;"	language:C++
FORCEINLINE	base/include/malloc.c.h	749;"	language:C++
FORCEINLINE	base/include/malloc.c.h	765;"	language:C++
FORCEINLINE	base/include/malloc.c.h	769;"	language:C++
FOUR_SIZE_T_SIZES	base/extra/dlmalloc/dlmalloc.c	1448;"	language:C
FOUR_SIZE_T_SIZES	base/include/malloc.c.h	1472;"	language:C++
FPFIRST	base/include/messages.h	172;"	language:C++
FSRC	base/Makefile	/^FSRC := $(foreach DIR,$(SRCDIR),$(wildcard $(DIR)\/*.for))$/;"	language:Make
FSRC	test/Makefile	/^FSRC := $(foreach DIR,$(SRCDIR),$(wildcard $(DIR)\/*.for))$/;"	language:Make
FSRC	tutorial/Makefile	/^FSRC := $(foreach DIR,$(SRCDIR),$(wildcard $(DIR)\/*.for))$/;"	language:Make
Fasp_Set_Num_Threads	base/src/fasp_get_num_threads.c	/^INT Fasp_Set_Num_Threads(INT nthreads )$/;"	language:C	signature:(INT nthreads )
GE	base/include/fasp.h	75;"	language:C++
GETMSPACE	base/extra/nedmalloc/nedmalloc.c	1255;"	language:C
GS	base/include/messages.h	136;"	language:C++
GSOR	base/include/messages.h	141;"	language:C++
GT	base/include/fasp.h	74;"	language:C++
Geometric multigrid	doc/userguide.tex	/^\\section{Geometric multigrid}\\label{sec:gmg}$/;"	language:Tex
GetLargePageMinimum_t	base/include/malloc.c.h	/^typedef size_t (WINAPI *GetLargePageMinimum_t)(void);$/;"	language:C++
GraphAdd	base/src/coarsening_cr.c	/^static INT GraphAdd(Link *list, INT *head, INT *tail, INT index, INT istack)$/;"	language:C	signature:(Link *list, INT *head, INT *tail, INT index, INT istack)
GraphRemove	base/src/coarsening_cr.c	/^static INT GraphRemove(Link *list, INT *head, INT *tail, INT index)$/;"	language:C	signature:(Link *list, INT *head, INT *tail, INT index)
HALF_MAX_SIZE_T	base/extra/dlmalloc/dlmalloc.c	1450;"	language:C
HALF_MAX_SIZE_T	base/include/malloc.c.h	1474;"	language:C++
HAVE_MMAP	base/extra/dlmalloc/dlmalloc.c	502;"	language:C
HAVE_MMAP	base/extra/dlmalloc/dlmalloc.c	525;"	language:C
HAVE_MMAP	base/extra/dlmalloc/dlmalloc.c	587;"	language:C
HAVE_MMAP	base/include/malloc.c.h	522;"	language:C++
HAVE_MMAP	base/include/malloc.c.h	545;"	language:C++
HAVE_MMAP	base/include/malloc.c.h	607;"	language:C++
HAVE_MORECORE	base/extra/dlmalloc/dlmalloc.c	503;"	language:C
HAVE_MORECORE	base/extra/dlmalloc/dlmalloc.c	524;"	language:C
HAVE_MORECORE	base/extra/dlmalloc/dlmalloc.c	604;"	language:C
HAVE_MORECORE	base/extra/dlmalloc/dlmalloc.c	606;"	language:C
HAVE_MORECORE	base/include/malloc.c.h	523;"	language:C++
HAVE_MORECORE	base/include/malloc.c.h	544;"	language:C++
HAVE_MORECORE	base/include/malloc.c.h	624;"	language:C++
HAVE_MORECORE	base/include/malloc.c.h	626;"	language:C++
HAVE_MREMAP	base/extra/dlmalloc/dlmalloc.c	594;"	language:C
HAVE_MREMAP	base/extra/dlmalloc/dlmalloc.c	596;"	language:C
HAVE_MREMAP	base/include/malloc.c.h	614;"	language:C++
HAVE_MREMAP	base/include/malloc.c.h	616;"	language:C++
I	base/include/fasp.h	/^	INT *I;   $/;"	language:C++
IA	base/include/fasp.h	/^	INT *IA;   $/;"	language:C++
IA	base/include/fasp_block.h	/^	INT *IA;$/;"	language:C++
ILU_data	base/include/fasp.h	/^} ILU_data; \/**< Data for ILU *\/$/;"	language:C++
ILU_droptol	base/include/fasp.h	/^	REAL ILU_droptol; \/**< drop tolerance *\/$/;"	language:C++
ILU_droptol	base/include/fasp.h	/^	REAL ILU_droptol;$/;"	language:C++
ILU_levels	base/include/fasp.h	/^	INT ILU_levels;$/;"	language:C++
ILU_levels	base/include/fasp.h	/^	SHORT ILU_levels;$/;"	language:C++
ILU_levels	base/include/fasp_block.h	/^	INT ILU_levels;$/;"	language:C++
ILU_lfil	base/include/fasp.h	/^	INT ILU_lfil; \/**< level of fill-in *\/$/;"	language:C++
ILU_lfil	base/include/fasp.h	/^	INT ILU_lfil;$/;"	language:C++
ILU_lfil	base/include/fasp_block.h	/^	INT ILU_lfil; \/**< level of fill-in for structured ILU(k) *\/$/;"	language:C++
ILU_param	base/include/fasp.h	/^} ILU_param; \/**< Parameters for ILU *\/	$/;"	language:C++
ILU_permtol	base/include/fasp.h	/^	REAL ILU_permtol; \/**< permutation tolerance *\/$/;"	language:C++
ILU_permtol	base/include/fasp.h	/^	REAL ILU_permtol;$/;"	language:C++
ILU_relax	base/include/fasp.h	/^	REAL ILU_relax; \/**< scaling factor: add the sum of dropped entries to diagnal *\/$/;"	language:C++
ILU_relax	base/include/fasp.h	/^	REAL ILU_relax;$/;"	language:C++
ILU_type	base/include/fasp.h	/^	SHORT ILU_type; \/**< ILU type for decomposition*\/$/;"	language:C++
ILU_type	base/include/fasp.h	/^	SHORT ILU_type;$/;"	language:C++
ILUk	base/include/messages.h	179;"	language:C++
ILUt	base/include/messages.h	180;"	language:C++
ILUtp	base/include/messages.h	181;"	language:C++
INCLUDE	base/Makefile	/^INCLUDE=-I.\/include$/;"	language:Make
INCLUDE	test/Makefile	/^INCLUDE=-I$(FASPDIR)\/base\/include -I.\/include$/;"	language:Make
INCLUDE	tutorial/Makefile	/^INCLUDE=-I${FASPDIR}\/base\/include$/;"	language:Make
INITIAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1658;"	language:C
INITIAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1758;"	language:C
INITIAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1823;"	language:C
INITIAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1854;"	language:C
INITIAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1901;"	language:C
INITIAL_LOCK	base/include/malloc.c.h	1780;"	language:C++
INITIAL_LOCK	base/include/malloc.c.h	1881;"	language:C++
INITIAL_LOCK	base/include/malloc.c.h	1946;"	language:C++
INITIAL_LOCK	base/include/malloc.c.h	1977;"	language:C++
INITIAL_LOCK	base/include/malloc.c.h	2024;"	language:C++
INSECURE	base/extra/dlmalloc/dlmalloc.c	584;"	language:C
INSECURE	base/include/malloc.c.h	604;"	language:C++
INT	base/include/fasp.h	48;"	language:C++
INTERIORI	test/include/assemble.h	12;"	language:C++
INTERIORI	test/include/mesh.h	9;"	language:C++
INTERIROI	test/main/testfct_heat.inl	10;"	language:C++
INTERIROI	test/main/testfct_poisson.inl	9;"	language:C++
INTERP_ENG_MIN	base/include/messages.h	151;"	language:C++
INTERP_REG	base/include/messages.h	149;"	language:C++
INTERP_STD	base/include/messages.h	150;"	language:C++
INUSE_BITS	base/extra/dlmalloc/dlmalloc.c	2119;"	language:C
INUSE_BITS	base/include/malloc.c.h	2241;"	language:C++
ISPT	base/include/messages.h	158;"	language:C++
ISTART	base/include/fasp.h	82;"	language:C++
ITS_CHECK	base/src/its_util.inl	/^inline static void ITS_CHECK (const INT MaxIt, const REAL tol) $/;"	language:C++	signature:(const INT MaxIt, const REAL tol)
ITS_COMPRES	base/src/its_util.inl	31;"	language:C++
ITS_DIFFRES	base/src/its_util.inl	34;"	language:C++
ITS_DIVZERO	base/src/its_util.inl	25;"	language:C++
ITS_FACONV	base/src/its_util.inl	10;"	language:C++
ITS_FINAL	base/src/its_util.inl	/^inline static void ITS_FINAL (const INT iter, const INT MaxIt, const REAL relres) $/;"	language:C++	signature:(const INT iter, const INT MaxIt, const REAL relres)
ITS_PUTNORM	base/src/its_util.inl	37;"	language:C++
ITS_REALRES	base/src/its_util.inl	28;"	language:C++
ITS_RESTART	base/src/its_util.inl	16;"	language:C++
ITS_SMALLSP	base/src/pbcgs.c	62;"	language:C
ITS_STAGGED	base/src/its_util.inl	19;"	language:C++
ITS_ZEROSOL	base/src/its_util.inl	13;"	language:C++
ITS_ZEROTOL	base/src/its_util.inl	22;"	language:C++
Iterative methods	doc/userguide.tex	/^\\section{Iterative methods}\\label{sec:iter}$/;"	language:Tex
J	base/include/fasp.h	/^	INT *J;    $/;"	language:C++
JA	base/include/fasp.h	/^	INT *JA;    $/;"	language:C++
JA	base/include/fasp_block.h	/^	INT *JA;$/;"	language:C++
JACOBI	base/include/messages.h	135;"	language:C++
L1_DIAG	base/include/messages.h	144;"	language:C++
LACKS_ERRNO_H	base/extra/dlmalloc/dlmalloc.c	510;"	language:C
LACKS_ERRNO_H	base/include/malloc.c.h	530;"	language:C++
LACKS_FCNTL_H	base/extra/dlmalloc/dlmalloc.c	495;"	language:C
LACKS_FCNTL_H	base/include/malloc.c.h	514;"	language:C++
LACKS_STRINGS_H	base/extra/dlmalloc/dlmalloc.c	508;"	language:C
LACKS_STRINGS_H	base/include/malloc.c.h	528;"	language:C++
LACKS_STRING_H	base/extra/dlmalloc/dlmalloc.c	507;"	language:C
LACKS_STRING_H	base/include/malloc.c.h	527;"	language:C++
LACKS_SYS_MMAN_H	base/extra/dlmalloc/dlmalloc.c	506;"	language:C
LACKS_SYS_MMAN_H	base/include/malloc.c.h	526;"	language:C++
LACKS_SYS_PARAM_H	base/extra/dlmalloc/dlmalloc.c	505;"	language:C
LACKS_SYS_PARAM_H	base/include/malloc.c.h	525;"	language:C++
LACKS_SYS_TYPES_H	base/extra/dlmalloc/dlmalloc.c	509;"	language:C
LACKS_SYS_TYPES_H	base/include/malloc.c.h	529;"	language:C++
LACKS_UNISTD_H	base/extra/dlmalloc/dlmalloc.c	504;"	language:C
LACKS_UNISTD_H	base/include/malloc.c.h	524;"	language:C++
LE	base/include/fasp.h	77;"	language:C++
LIBS	base/Makefile	/^LIBS=$(AMGLIB)$/;"	language:Make
LIBS	test/Makefile	/^LIBS=$(TESTLIB) $(FASPLIB)$/;"	language:Make
LIBS	tutorial/Makefile	/^LIBS=$(TESTLIB) $(FASPLIB)$/;"	language:Make
LINKOPTS	test/Makefile	/^LINKOPTS=$(BOPT)$/;"	language:Make
LINKOPTS	tutorial/Makefile	/^LINKOPTS=$(BOPT)$/;"	language:Make
LIST_HEAD	base/src/coarsening_rs.c	139;"	language:C
LIST_TAIL	base/src/coarsening_rs.c	140;"	language:C
LONG	base/include/fasp.h	49;"	language:C++
LS	base/include/fasp.h	76;"	language:C++
LU	base/include/fasp.h	/^	ILU_data *LU;$/;"	language:C++
LU	base/include/fasp.h	/^	ILU_data LU;$/;"	language:C++
LU	base/include/fasp_block.h	/^	ILU_data *LU;$/;"	language:C++
LU	base/include/fasp_block.h	/^	ILU_data LU;$/;"	language:C++
LU	base/include/fasp_block.h	/^	dSTRmat *LU; \/**< LU matrix for ResRes block *\/$/;"	language:C++
LUcsr	base/include/fasp_block.h	/^	ILU_data *LUcsr; \/**< LU matrix for ResRes block *\/$/;"	language:C++
Link	base/include/fasp.h	/^} Link; \/**< General data structure for Links *\/$/;"	language:C++
LinkList	base/include/fasp.h	/^typedef ListElement *LinkList; \/**< linked list *\/$/;"	language:C++
List of Data Structures	doc/userguide.tex	/^\\section*{List of Data Structures}$/;"	language:Tex
List of Functions	doc/userguide.tex	/^\\section*{List of Functions}$/;"	language:Tex
ListElement	base/include/fasp.h	/^} ListElement; \/**< Linked element in list *\/$/;"	language:C++
MALLINFO_FIELD_TYPE	base/extra/dlmalloc/dlmalloc.c	655;"	language:C
MALLINFO_FIELD_TYPE	base/include/dlmalloc.h	65;"	language:C++
MALLINFO_FIELD_TYPE	base/include/malloc.c.h	675;"	language:C++
MALLOC_280_H	base/include/dlmalloc.h	26;"	language:C++
MALLOC_ALIGNMENT	base/extra/dlmalloc/dlmalloc.c	528;"	language:C
MALLOC_ALIGNMENT	base/extra/dlmalloc/dlmalloc.c	559;"	language:C
MALLOC_ALIGNMENT	base/include/malloc.c.h	548;"	language:C++
MALLOC_ALIGNMENT	base/include/malloc.c.h	579;"	language:C++
MALLOC_FAILURE_ACTION	base/extra/dlmalloc/dlmalloc.c	512;"	language:C
MALLOC_FAILURE_ACTION	base/extra/dlmalloc/dlmalloc.c	600;"	language:C
MALLOC_FAILURE_ACTION	base/include/malloc.c.h	532;"	language:C++
MALLOC_FAILURE_ACTION	base/include/malloc.c.h	620;"	language:C++
MAP_ANONYMOUS	base/extra/dlmalloc/dlmalloc.c	1482;"	language:C
MAP_ANONYMOUS	base/include/malloc.c.h	1525;"	language:C++
MAX	base/include/fasp.h	67;"	language:C++
MAXTHREADSINPOOL	base/extra/nedmalloc/nedmalloc.c	116;"	language:C
MAX_AMG_LVL	base/include/fasp.h	58;"	language:C++
MAX_QUAD	test/src/heat_fem.c	6;"	language:C
MAX_QUAD	test/src/poisson_fem.c	11;"	language:C
MAX_REFINE_LVL	base/include/fasp.h	57;"	language:C++
MAX_RELEASE_CHECK_RATE	base/extra/dlmalloc/dlmalloc.c	640;"	language:C
MAX_RELEASE_CHECK_RATE	base/extra/dlmalloc/dlmalloc.c	642;"	language:C
MAX_RELEASE_CHECK_RATE	base/include/malloc.c.h	660;"	language:C++
MAX_RELEASE_CHECK_RATE	base/include/malloc.c.h	662;"	language:C++
MAX_REQUEST	base/extra/dlmalloc/dlmalloc.c	2094;"	language:C
MAX_REQUEST	base/include/malloc.c.h	2216;"	language:C++
MAX_RESTART	base/include/fasp.h	61;"	language:C++
MAX_SIZE_T	base/extra/dlmalloc/dlmalloc.c	544;"	language:C
MAX_SIZE_T	base/include/malloc.c.h	564;"	language:C++
MAX_SMALL_REQUEST	base/extra/dlmalloc/dlmalloc.c	2441;"	language:C
MAX_SMALL_REQUEST	base/include/malloc.c.h	2563;"	language:C++
MAX_SMALL_SIZE	base/extra/dlmalloc/dlmalloc.c	2440;"	language:C
MAX_SMALL_SIZE	base/include/malloc.c.h	2562;"	language:C++
MAX_STAG	base/include/fasp.h	60;"	language:C++
MCHUNK_SIZE	base/extra/dlmalloc/dlmalloc.c	2070;"	language:C
MCHUNK_SIZE	base/include/malloc.c.h	2192;"	language:C++
MFAIL	base/extra/dlmalloc/dlmalloc.c	1473;"	language:C
MFAIL	base/include/malloc.c.h	1518;"	language:C++
MIN	base/include/fasp.h	68;"	language:C++
MIN_CHUNK_SIZE	base/extra/dlmalloc/dlmalloc.c	2084;"	language:C
MIN_CHUNK_SIZE	base/include/malloc.c.h	2206;"	language:C++
MIN_LARGE_SIZE	base/extra/dlmalloc/dlmalloc.c	2439;"	language:C
MIN_LARGE_SIZE	base/include/malloc.c.h	2561;"	language:C++
MIN_REQUEST	base/extra/dlmalloc/dlmalloc.c	2095;"	language:C
MIN_REQUEST	base/include/malloc.c.h	2217;"	language:C++
MIN_SMALL_INDEX	base/extra/dlmalloc/dlmalloc.c	2682;"	language:C
MIN_SMALL_INDEX	base/include/malloc.c.h	2783;"	language:C++
MLOCK_T	base/extra/dlmalloc/dlmalloc.c	1656;"	language:C
MLOCK_T	base/extra/dlmalloc/dlmalloc.c	1756;"	language:C
MLOCK_T	base/extra/dlmalloc/dlmalloc.c	1821;"	language:C
MLOCK_T	base/extra/dlmalloc/dlmalloc.c	1852;"	language:C
MLOCK_T	base/include/malloc.c.h	1778;"	language:C++
MLOCK_T	base/include/malloc.c.h	1879;"	language:C++
MLOCK_T	base/include/malloc.c.h	1944;"	language:C++
MLOCK_T	base/include/malloc.c.h	1975;"	language:C++
MMAP	base/extra/dlmalloc/dlmalloc.c	1585;"	language:C
MMAP	base/include/malloc.c.h	1706;"	language:C++
MMAP_CHUNK_OVERHEAD	base/extra/dlmalloc/dlmalloc.c	2079;"	language:C
MMAP_CHUNK_OVERHEAD	base/include/malloc.c.h	2201;"	language:C++
MMAP_CLEARS	base/extra/dlmalloc/dlmalloc.c	515;"	language:C
MMAP_CLEARS	base/extra/dlmalloc/dlmalloc.c	517;"	language:C
MMAP_CLEARS	base/extra/dlmalloc/dlmalloc.c	590;"	language:C
MMAP_CLEARS	base/include/malloc.c.h	535;"	language:C++
MMAP_CLEARS	base/include/malloc.c.h	537;"	language:C++
MMAP_CLEARS	base/include/malloc.c.h	610;"	language:C++
MMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1486;"	language:C
MMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1494;"	language:C
MMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1535;"	language:C
MMAP_DEFAULT	base/include/malloc.c.h	1558;"	language:C++
MMAP_DEFAULT	base/include/malloc.c.h	1566;"	language:C++
MMAP_DEFAULT	base/include/malloc.c.h	1656;"	language:C++
MMAP_FLAGS	base/extra/dlmalloc/dlmalloc.c	1485;"	language:C
MMAP_FLAGS	base/extra/dlmalloc/dlmalloc.c	1492;"	language:C
MMAP_FLAGS	base/include/malloc.c.h	1557;"	language:C++
MMAP_FLAGS	base/include/malloc.c.h	1564;"	language:C++
MMAP_FOOT_PAD	base/extra/dlmalloc/dlmalloc.c	2081;"	language:C
MMAP_FOOT_PAD	base/include/malloc.c.h	2203;"	language:C++
MMAP_IMPL	base/include/malloc.c.h	1528;"	language:C++
MMAP_IMPL	base/include/malloc.c.h	1552;"	language:C++
MMAP_PROT	base/extra/dlmalloc/dlmalloc.c	1480;"	language:C
MMAP_PROT	base/include/malloc.c.h	1555;"	language:C++
MORECORE_CONTIGUOUS	base/extra/dlmalloc/dlmalloc.c	610;"	language:C
MORECORE_CONTIGUOUS	base/extra/dlmalloc/dlmalloc.c	614;"	language:C
MORECORE_CONTIGUOUS	base/include/malloc.c.h	630;"	language:C++
MORECORE_CONTIGUOUS	base/include/malloc.c.h	634;"	language:C++
MORECORE_DEFAULT	base/extra/dlmalloc/dlmalloc.c	612;"	language:C
MORECORE_DEFAULT	base/include/malloc.c.h	632;"	language:C++
MREMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1543;"	language:C
MREMAP_DEFAULT	base/include/malloc.c.h	1664;"	language:C++
MSPACES	base/extra/dlmalloc/dlmalloc.c	553;"	language:C
MSPACES	base/extra/dlmalloc/dlmalloc.c	555;"	language:C
MSPACES	base/extra/nedmalloc/nedmalloc.c	65;"	language:C
MSPACES	base/include/malloc.c.h	573;"	language:C++
MSPACES	base/include/malloc.c.h	575;"	language:C++
MUNMAP	base/extra/dlmalloc/dlmalloc.c	1586;"	language:C
MUNMAP	base/include/malloc.c.h	1707;"	language:C++
MUNMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1479;"	language:C
MUNMAP_DEFAULT	base/extra/dlmalloc/dlmalloc.c	1536;"	language:C
MUNMAP_DEFAULT	base/include/malloc.c.h	1554;"	language:C++
MUNMAP_DEFAULT	base/include/malloc.c.h	1657;"	language:C++
M_GRANULARITY	base/extra/dlmalloc/dlmalloc.c	669;"	language:C
M_GRANULARITY	base/include/dlmalloc.h	183;"	language:C++
M_GRANULARITY	base/include/malloc.c.h	689;"	language:C++
M_MMAP_THRESHOLD	base/extra/dlmalloc/dlmalloc.c	670;"	language:C
M_MMAP_THRESHOLD	base/include/dlmalloc.h	184;"	language:C++
M_MMAP_THRESHOLD	base/include/malloc.c.h	690;"	language:C++
M_TRIM_THRESHOLD	base/extra/dlmalloc/dlmalloc.c	668;"	language:C
M_TRIM_THRESHOLD	base/include/dlmalloc.h	182;"	language:C++
M_TRIM_THRESHOLD	base/include/malloc.c.h	688;"	language:C++
Mesh	test/include/mesh.h	/^typedef struct Mesh{$/;"	language:C++
Mesh	test/include/mesh.h	/^} Mesh;$/;"	language:C++
Mesh_aux	test/include/mesh.h	/^typedef struct Mesh_aux{$/;"	language:C++
Mesh_aux	test/include/mesh.h	/^} Mesh_aux;$/;"	language:C++
More Advanced Usage	doc/userguide.tex	/^\\chapter{More Advanced Usage}\\label{ch:advanced}$/;"	language:Tex
N2C	base/include/fasp.h	83;"	language:C++
NDEBUG	base/extra/nedmalloc/nedmalloc.c	32;"	language:C
NEDMALLOC	base/include/fasp.h	42;"	language:C++
NEDMALLOCEXTSPEC	base/include/nedmalloc.h	87;"	language:C++
NEDMALLOCEXTSPEC	base/include/nedmalloc.h	89;"	language:C++
NEDMALLOCEXTSPEC	base/include/nedmalloc.h	95;"	language:C++
NEDMALLOCNOALIASATTR	base/include/nedmalloc.h	115;"	language:C++
NEDMALLOCNOALIASATTR	base/include/nedmalloc.h	124;"	language:C++
NEDMALLOCPTRATTR	base/include/nedmalloc.h	114;"	language:C++
NEDMALLOCPTRATTR	base/include/nedmalloc.h	118;"	language:C++
NEDMALLOCPTRATTR	base/include/nedmalloc.h	121;"	language:C++
NEDMALLOC_DEBUG	base/extra/nedmalloc/nedmalloc.c	75;"	language:C
NEDMALLOC_DEBUG	base/extra/nedmalloc/nedmalloc.c	77;"	language:C
NEDMALLOC_H	base/include/nedmalloc.h	30;"	language:C++
NEED_GLOBAL_LOCK_INIT	base/extra/dlmalloc/dlmalloc.c	1858;"	language:C
NEED_GLOBAL_LOCK_INIT	base/include/malloc.c.h	1981;"	language:C++
NL_AMLI_CYCLE	base/include/messages.h	130;"	language:C++
NNZ	base/include/fasp_block.h	/^	INT NNZ;$/;"	language:C++
NOINLINE	base/extra/dlmalloc/dlmalloc.c	734;"	language:C
NOINLINE	base/extra/dlmalloc/dlmalloc.c	736;"	language:C
NOINLINE	base/extra/dlmalloc/dlmalloc.c	738;"	language:C
NOINLINE	base/extra/nedmalloc/nedmalloc.c	52;"	language:C
NOINLINE	base/include/malloc.c.h	754;"	language:C++
NOINLINE	base/include/malloc.c.h	756;"	language:C++
NOINLINE	base/include/malloc.c.h	758;"	language:C++
NO_MALLINFO	base/extra/dlmalloc/dlmalloc.c	652;"	language:C
NO_MALLINFO	base/include/dlmalloc.h	38;"	language:C++
NO_MALLINFO	base/include/malloc.c.h	672;"	language:C++
NO_ORDER	base/include/messages.h	164;"	language:C++
NO_SEGMENT_TRAVERSAL	base/extra/dlmalloc/dlmalloc.c	658;"	language:C
NO_SEGMENT_TRAVERSAL	base/include/malloc.c.h	678;"	language:C++
NSMALLBINS	base/extra/dlmalloc/dlmalloc.c	2434;"	language:C
NSMALLBINS	base/include/malloc.c.h	2556;"	language:C++
NTREEBINS	base/extra/dlmalloc/dlmalloc.c	2435;"	language:C
NTREEBINS	base/include/malloc.c.h	2557;"	language:C++
Numeric	base/include/fasp_block.h	/^	void *Numeric;$/;"	language:C++
OBJSC	base/Makefile	/^OBJSC := $(patsubst %.c,%.o,$(CSRC))$/;"	language:Make
OBJSC	test/Makefile	/^OBJSC := $(patsubst %.c,%.o,$(CSRC))$/;"	language:Make
OBJSC	tutorial/Makefile	/^OBJSC := $(patsubst %.c,%.o,$(CSRC))$/;"	language:Make
OBJSF	base/Makefile	/^OBJSF := $(patsubst %.for,%.o,$(FSRC))$/;"	language:Make
OBJSF	test/Makefile	/^OBJSF := $(patsubst %.for,%.o,$(FSRC))$/;"	language:Make
OBJSF	tutorial/Makefile	/^OBJSF := $(patsubst %.for,%.o,$(FSRC))$/;"	language:Make
OFF	base/include/messages.h	33;"	language:C++
ON	base/include/messages.h	32;"	language:C++
ONLY_MSPACES	base/extra/dlmalloc/dlmalloc.c	547;"	language:C
ONLY_MSPACES	base/extra/dlmalloc/dlmalloc.c	549;"	language:C
ONLY_MSPACES	base/extra/nedmalloc/nedmalloc.c	66;"	language:C
ONLY_MSPACES	base/include/dlmalloc.h	35;"	language:C++
ONLY_MSPACES	base/include/malloc.c.h	567;"	language:C++
ONLY_MSPACES	base/include/malloc.c.h	569;"	language:C++
OPENMP_HOLDS	base/include/fasp.h	62;"	language:C++
Our strategy	doc/userguide.tex	/^\\subsection{Our strategy}$/;"	language:Tex
P	base/include/fasp.h	/^	dCSRmat P;$/;"	language:C++
P	base/include/fasp_block.h	/^	dBSRmat P;$/;"	language:C++
PI	test/include/poisson_fdm.h	16;"	language:C++
PINUSE_BIT	base/extra/dlmalloc/dlmalloc.c	2116;"	language:C
PINUSE_BIT	base/include/malloc.c.h	2238;"	language:C++
POLY	base/include/messages.h	143;"	language:C++
POSTACTION	base/extra/dlmalloc/dlmalloc.c	2600;"	language:C
POSTACTION	base/extra/dlmalloc/dlmalloc.c	2608;"	language:C
POSTACTION	base/include/malloc.c.h	2701;"	language:C++
POSTACTION	base/include/malloc.c.h	2709;"	language:C++
PP	base/include/fasp_block.h	/^	dCSRmat *PP; \/**< pressure block after diagonal scaling *\/$/;"	language:C++
PP	base/include/fasp_block.h	/^	dCSRmat PP;$/;"	language:C++
PREACTION	base/extra/dlmalloc/dlmalloc.c	2599;"	language:C
PREACTION	base/extra/dlmalloc/dlmalloc.c	2604;"	language:C
PREACTION	base/include/malloc.c.h	2700;"	language:C++
PREACTION	base/include/malloc.c.h	2705;"	language:C++
PREC_AMG	base/include/messages.h	112;"	language:C++
PREC_DIAG	base/include/messages.h	111;"	language:C++
PREC_FMG	base/include/messages.h	113;"	language:C++
PREC_ILU	base/include/messages.h	114;"	language:C++
PREC_NULL	base/include/messages.h	110;"	language:C++
PREC_SCHWARZ	base/include/messages.h	115;"	language:C++
PRINT_ALL	base/include/messages.h	43;"	language:C++
PRINT_MIN	base/include/messages.h	39;"	language:C++
PRINT_MORE	base/include/messages.h	41;"	language:C++
PRINT_MOST	base/include/messages.h	42;"	language:C++
PRINT_NONE	base/include/messages.h	38;"	language:C++
PRINT_SOME	base/include/messages.h	40;"	language:C++
PROCEED_ON_ERROR	base/extra/dlmalloc/dlmalloc.c	571;"	language:C
PROCEED_ON_ERROR	base/include/malloc.c.h	591;"	language:C++
PTHREAD_MUTEX_RECURSIVE	base/extra/dlmalloc/dlmalloc.c	1836;"	language:C
PTHREAD_MUTEX_RECURSIVE	base/include/malloc.c.h	1959;"	language:C++
Parameters for AMG	doc/userguide.tex	/^\\subsection{Parameters for AMG}$/;"	language:Tex
R	base/include/fasp.h	/^	dCSRmat R;$/;"	language:C++
R	base/include/fasp_block.h	/^	dBSRmat R;$/;"	language:C++
REAL	base/include/fasp.h	50;"	language:C++
REGRESSION	test/Makefile	/^REGRESSION=$(TESTLIB) main\/regression.o $/;"	language:Make
RELEASE_LOCK	base/extra/dlmalloc/dlmalloc.c	1660;"	language:C
RELEASE_LOCK	base/extra/dlmalloc/dlmalloc.c	1760;"	language:C
RELEASE_LOCK	base/extra/dlmalloc/dlmalloc.c	1825;"	language:C
RELEASE_LOCK	base/extra/dlmalloc/dlmalloc.c	1856;"	language:C
RELEASE_LOCK	base/include/malloc.c.h	1782;"	language:C++
RELEASE_LOCK	base/include/malloc.c.h	1883;"	language:C++
RELEASE_LOCK	base/include/malloc.c.h	1948;"	language:C++
RELEASE_LOCK	base/include/malloc.c.h	1979;"	language:C++
RELEASE_MALLOC_GLOBAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1909;"	language:C
RELEASE_MALLOC_GLOBAL_LOCK	base/extra/dlmalloc/dlmalloc.c	1913;"	language:C
RELEASE_MALLOC_GLOBAL_LOCK	base/include/malloc.c.h	2032;"	language:C++
RELEASE_MALLOC_GLOBAL_LOCK	base/include/malloc.c.h	2036;"	language:C++
RESTRICT	base/include/nedmalloc.h	100;"	language:C++
RESTRICT	base/include/nedmalloc.h	103;"	language:C++
RESTRICT	base/include/nedmalloc.h	106;"	language:C++
RESTRICT	base/include/nedmalloc.h	110;"	language:C++
ROW	base/include/fasp_block.h	/^	INT ROW;$/;"	language:C++
RR	base/include/fasp_block.h	/^	dBSRmat *RR;  \/**< reservoir block *\/$/;"	language:C++
RR	base/include/fasp_block.h	/^	dSTRmat *RR;  \/**< Diagonal scaled reservoir block *\/$/;"	language:C++
RTCHECK	base/extra/dlmalloc/dlmalloc.c	2891;"	language:C
RTCHECK	base/extra/dlmalloc/dlmalloc.c	2893;"	language:C
RTCHECK	base/extra/dlmalloc/dlmalloc.c	2896;"	language:C
RTCHECK	base/include/malloc.c.h	2992;"	language:C++
RTCHECK	base/include/malloc.c.h	2994;"	language:C++
RTCHECK	base/include/malloc.c.h	2997;"	language:C++
RUN_FAIL	base/include/messages.h	78;"	language:C++
ResRes	base/include/fasp_block.h	/^	dBSRmat ResRes;$/;"	language:C++
ResRes	base/include/fasp_block.h	/^	dSTRmat ResRes;$/;"	language:C++
ResWel	base/include/fasp_block.h	/^	dCSRmat ResWel;	$/;"	language:C++
Rr	base/src/smoother_poly.c	/^static void Rr(dCSRmat *Amat, REAL *Dinv, REAL *r, REAL *rbar, REAL *v0, REAL *v1, REAL *vnew, REAL *k, INT m)$/;"	language:C	signature:(dCSRmat *Amat, REAL *Dinv, REAL *r, REAL *rbar, REAL *v0, REAL *v1, REAL *vnew, REAL *k, INT m)
SA_AMG	base/include/messages.h	121;"	language:C++
SGS	base/include/messages.h	137;"	language:C++
SGSOR	base/include/messages.h	142;"	language:C++
SHORT	base/include/fasp.h	47;"	language:C++
SIX_SIZE_T_SIZES	base/extra/dlmalloc/dlmalloc.c	1449;"	language:C
SIX_SIZE_T_SIZES	base/include/malloc.c.h	1473;"	language:C++
SIZE_T_BITSIZE	base/extra/dlmalloc/dlmalloc.c	1439;"	language:C
SIZE_T_BITSIZE	base/include/malloc.c.h	1463;"	language:C++
SIZE_T_FOUR	base/extra/dlmalloc/dlmalloc.c	1446;"	language:C
SIZE_T_FOUR	base/include/malloc.c.h	1470;"	language:C++
SIZE_T_ONE	base/extra/dlmalloc/dlmalloc.c	1444;"	language:C
SIZE_T_ONE	base/include/malloc.c.h	1468;"	language:C++
SIZE_T_SIZE	base/extra/dlmalloc/dlmalloc.c	1438;"	language:C
SIZE_T_SIZE	base/include/malloc.c.h	1462;"	language:C++
SIZE_T_TWO	base/extra/dlmalloc/dlmalloc.c	1445;"	language:C
SIZE_T_TWO	base/include/malloc.c.h	1469;"	language:C++
SIZE_T_ZERO	base/extra/dlmalloc/dlmalloc.c	1443;"	language:C
SIZE_T_ZERO	base/include/malloc.c.h	1467;"	language:C++
SMALLBIN_SHIFT	base/extra/dlmalloc/dlmalloc.c	2436;"	language:C
SMALLBIN_SHIFT	base/include/malloc.c.h	2558;"	language:C++
SMALLBIN_WIDTH	base/extra/dlmalloc/dlmalloc.c	2437;"	language:C
SMALLBIN_WIDTH	base/include/malloc.c.h	2559;"	language:C++
SMALLREAL	base/include/fasp.h	56;"	language:C++
SOLVER_AMG	base/include/messages.h	90;"	language:C++
SOLVER_BiCGstab	base/include/messages.h	84;"	language:C++
SOLVER_CG	base/include/messages.h	83;"	language:C++
SOLVER_FMG	base/include/messages.h	91;"	language:C++
SOLVER_GCG	base/include/messages.h	89;"	language:C++
SOLVER_GMRES	base/include/messages.h	86;"	language:C++
SOLVER_MUMPS	base/include/messages.h	98;"	language:C++
SOLVER_MinRes	base/include/messages.h	85;"	language:C++
SOLVER_SUPERLU	base/include/messages.h	96;"	language:C++
SOLVER_UMFPACK	base/include/messages.h	97;"	language:C++
SOLVER_VFGMRES	base/include/messages.h	88;"	language:C++
SOLVER_VGMRES	base/include/messages.h	87;"	language:C++
SOR	base/include/messages.h	139;"	language:C++
SPINS_PER_YIELD	base/extra/dlmalloc/dlmalloc.c	1662;"	language:C
SPINS_PER_YIELD	base/extra/dlmalloc/dlmalloc.c	1762;"	language:C
SPINS_PER_YIELD	base/include/malloc.c.h	1784;"	language:C++
SPINS_PER_YIELD	base/include/malloc.c.h	1885;"	language:C++
SPIN_LOCKS_AVAILABLE	base/extra/dlmalloc/dlmalloc.c	538;"	language:C
SPIN_LOCKS_AVAILABLE	base/extra/dlmalloc/dlmalloc.c	540;"	language:C
SPIN_LOCKS_AVAILABLE	base/include/malloc.c.h	558;"	language:C++
SPIN_LOCKS_AVAILABLE	base/include/malloc.c.h	560;"	language:C++
SRCDIR	base/Makefile	/^SRCDIR=.\/src$/;"	language:Make
SRCDIR	test/Makefile	/^SRCDIR=.\/src$/;"	language:Make
SRCDIR	tutorial/Makefile	/^SRCDIR=.\/src$/;"	language:Make
SS	base/include/fasp_block.h	/^	dBSRmat *SS; \/**< saturation block *\/$/;"	language:C++
SS	base/include/fasp_block.h	/^	dSTRmat *SS; \/**< saturation block after diaogonal scaling *\/$/;"	language:C++
SSOR	base/include/messages.h	140;"	language:C++
SS_str	base/include/fasp.h	/^	dSTRmat *SS_str;$/;"	language:C++
STAG_RATIO	base/include/fasp.h	59;"	language:C++
STOP_MOD_REL_RES	base/include/messages.h	105;"	language:C++
STOP_REL_PRECRES	base/include/messages.h	104;"	language:C++
STOP_REL_RES	base/include/messages.h	103;"	language:C++
STRUCT_MALLINFO_DECLARED	base/extra/dlmalloc/dlmalloc.c	703;"	language:C
STRUCT_MALLINFO_DECLARED	base/include/dlmalloc.h	68;"	language:C++
STRUCT_MALLINFO_DECLARED	base/include/malloc.c.h	723;"	language:C++
SUCCESS	base/include/messages.h	48;"	language:C++
SYS_ALLOC_PADDING	base/extra/dlmalloc/dlmalloc.c	2541;"	language:C
SYS_ALLOC_PADDING	base/include/malloc.c.h	2642;"	language:C++
Schwarz_data	base/include/fasp.h	/^} Schwarz_data;$/;"	language:C++
Schwarz_maxlvl	base/include/fasp.h	/^	INT Schwarz_maxlvl; \/**< maximal levels *\/$/;"	language:C++
Schwarz_mmsize	base/include/fasp.h	/^	INT Schwarz_mmsize; \/**< maximal block size *\/$/;"	language:C++
Schwarz_param	base/include/fasp.h	/^} Schwarz_param; \/**< Parameters for ILU *\/	$/;"	language:C++
Schwarz_type	base/include/fasp.h	/^	INT Schwarz_type; \/**< type of schwarz method *\/$/;"	language:C++
Set parameters	doc/userguide.tex	/^\\section{Set parameters}\\label{sec:parameters}$/;"	language:Tex
Sparse BLAS	doc/userguide.tex	/^\\subsection{Sparse BLAS}$/;"	language:Tex
Sparse matrices	doc/userguide.tex	/^\\subsection{Sparse matrices}$/;"	language:Tex
T	test/include/misc.h	/^    double T;$/;"	language:C++
TESTLIB	test/Makefile	/^TESTLIB=lib\/libfasptest.a$/;"	language:Make
TESTMATPROG	test/Makefile	/^TESTMATPROG=$(TESTLIB) main\/testmat.o$/;"	language:Make
TESTPROG	test/Makefile	/^TESTPROG=$(TESTLIB) main\/test.o $/;"	language:Make
TESTPROG	tutorial/Makefile	/^TESTPROG=$(TESTLIB) main\/poisson-amg.o $/;"	language:Make
THDs_AMG_GS	base/src/itsolver_bsr.c	/^INT THDs_AMG_GS;  \/**< cpr amg gs smoothing threads      *\/$/;"	language:C
THDs_CPR_gGS	base/src/itsolver_bsr.c	/^INT THDs_CPR_gGS; \/**< global matrix gs smoothing threads *\/$/;"	language:C
THDs_CPR_lGS	base/src/itsolver_bsr.c	/^INT THDs_CPR_lGS; \/**< reservoir gs smoothing threads     *\/$/;"	language:C
THREADCACHEMAX	base/extra/nedmalloc/nedmalloc.c	124;"	language:C
THREADCACHEMAXBINS	base/extra/nedmalloc/nedmalloc.c	138;"	language:C
THREADCACHEMAXCACHES	base/extra/nedmalloc/nedmalloc.c	120;"	language:C
THREADCACHEMAXFREESPACE	base/extra/nedmalloc/nedmalloc.c	143;"	language:C
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedcalloc(size_t no, size_t size) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedmalloc(size_t size) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedmemalign(size_t alignment, size_t bytes) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void * nedrealloc(void *mem, size_t size) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void **nedindependent_calloc(size_t elemsno, size_t elemsize, void **chunks) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR NEDMALLOCPTRATTR void **nedindependent_comalloc(size_t elems, size_t *sizes, void **chunks) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR int    nedmalloc_trim(size_t pad) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR int    nedmallopt(int parno, int value) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR size_t nedblksize(int *RESTRICT isforeign, void *RESTRICT mem) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR size_t nedmalloc_footprint(void) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR struct nedmallinfo nedmallinfo(void) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR void   nedfree(void *mem) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR void nedsetvalue(void *v) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCNOALIASATTR void*  nedmalloc_internals(size_t *granularity, size_t *magic) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR nedpool *nedcreatepool(size_t capacity, int threads) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR void * nedpcalloc(nedpool *p, size_t no, size_t size) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR void * nedpmalloc(nedpool *p, size_t size) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR void * nedpmemalign(nedpool *p, size_t alignment, size_t bytes) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR void * nedprealloc(nedpool *p, void *mem, size_t size) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR void **nedpindependent_calloc(nedpool *p, size_t elemsno, size_t elemsize, void **chunks) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC NEDMALLOCPTRATTR void **nedpindependent_comalloc(nedpool *p, size_t elems, size_t *sizes, void **chunks) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC int    nedpmalloc_trim(nedpool *p, size_t pad) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC int    nedpmallopt(nedpool *p, int parno, int value) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC nedpool **nedpoollist() THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC size_t nedpmalloc_footprint(nedpool *p) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC struct nedmallinfo nedpmallinfo(nedpool *p) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void   nedmalloc_stats(void) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void   nedpfree(nedpool *p, void *mem) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void   nedpmalloc_stats(nedpool *p) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void *nedgetvalue(nedpool **p, void *mem) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void neddestroypool(nedpool *p) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void neddestroysyspool() THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void neddisablethreadcache(nedpool *p) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void nedpsetvalue(nedpool *p, void *v) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	/^NEDMALLOCEXTSPEC void nedtrimthreadcache(nedpool *p, int disable) THROWSPEC;$/;"	language:C++
THROWSPEC	base/include/nedmalloc.h	190;"	language:C++
TLSALLOC	base/extra/nedmalloc/nedmalloc.c	150;"	language:C
TLSALLOC	base/extra/nedmalloc/nedmalloc.c	166;"	language:C
TLSALLOC	base/extra/nedmalloc/nedmalloc.c	173;"	language:C
TLSFREE	base/extra/nedmalloc/nedmalloc.c	151;"	language:C
TLSFREE	base/extra/nedmalloc/nedmalloc.c	167;"	language:C
TLSFREE	base/extra/nedmalloc/nedmalloc.c	174;"	language:C
TLSGET	base/extra/nedmalloc/nedmalloc.c	152;"	language:C
TLSGET	base/extra/nedmalloc/nedmalloc.c	161;"	language:C
TLSGET	base/extra/nedmalloc/nedmalloc.c	162;"	language:C
TLSGET	base/extra/nedmalloc/nedmalloc.c	168;"	language:C
TLSGET	base/extra/nedmalloc/nedmalloc.c	175;"	language:C
TLSSET	base/extra/nedmalloc/nedmalloc.c	153;"	language:C
TLSSET	base/extra/nedmalloc/nedmalloc.c	169;"	language:C
TLSSET	base/extra/nedmalloc/nedmalloc.c	176;"	language:C
TLSVAR	base/extra/nedmalloc/nedmalloc.c	149;"	language:C
TLSVAR	base/extra/nedmalloc/nedmalloc.c	165;"	language:C
TLSVAR	base/extra/nedmalloc/nedmalloc.c	172;"	language:C
TOP_FOOT_SIZE	base/extra/dlmalloc/dlmalloc.c	2585;"	language:C
TOP_FOOT_SIZE	base/include/malloc.c.h	2686;"	language:C++
TREEBIN_SHIFT	base/extra/dlmalloc/dlmalloc.c	2438;"	language:C
TREEBIN_SHIFT	base/include/malloc.c.h	2560;"	language:C++
TRUE	base/include/messages.h	26;"	language:C++
TRY_LOCK	base/extra/dlmalloc/dlmalloc.c	1661;"	language:C
TRY_LOCK	base/extra/dlmalloc/dlmalloc.c	1761;"	language:C
TRY_LOCK	base/extra/dlmalloc/dlmalloc.c	1826;"	language:C
TRY_LOCK	base/extra/dlmalloc/dlmalloc.c	1857;"	language:C
TRY_LOCK	base/include/malloc.c.h	1783;"	language:C++
TRY_LOCK	base/include/malloc.c.h	1884;"	language:C++
TRY_LOCK	base/include/malloc.c.h	1949;"	language:C++
TRY_LOCK	base/include/malloc.c.h	1980;"	language:C++
TWO_SIZE_T_SIZES	base/extra/dlmalloc/dlmalloc.c	1447;"	language:C
TWO_SIZE_T_SIZES	base/include/malloc.c.h	1471;"	language:C++
The debug environment	doc/userguide.tex	/^\\section{The debug environment}\\label{sec:debug}$/;"	language:Tex
The first example	doc/userguide.tex	/^\\section{The first example}\\label{sec:ex1}$/;"	language:Tex
The second example	doc/userguide.tex	/^\\section{The second example}\\label{sec:ex2}$/;"	language:Tex
The third example	doc/userguide.tex	/^\\section{The third example}\\label{sec:ex3}$/;"	language:Tex
UA_AMG	base/include/messages.h	122;"	language:C++
UNPT	base/include/messages.h	159;"	language:C++
USAGE_ERROR_ACTION	base/extra/dlmalloc/dlmalloc.c	2630;"	language:C
USAGE_ERROR_ACTION	base/extra/dlmalloc/dlmalloc.c	2639;"	language:C
USAGE_ERROR_ACTION	base/include/malloc.c.h	2731;"	language:C++
USAGE_ERROR_ACTION	base/include/malloc.c.h	2740;"	language:C++
USERDEFINED	base/include/messages.h	170;"	language:C++
USE_ALLOCATOR	base/include/nedmalloc.h	132;"	language:C++
USE_BUILTIN_FFS	base/extra/dlmalloc/dlmalloc.c	646;"	language:C
USE_BUILTIN_FFS	base/include/malloc.c.h	666;"	language:C++
USE_DEV_RANDOM	base/extra/dlmalloc/dlmalloc.c	649;"	language:C
USE_DEV_RANDOM	base/include/malloc.c.h	669;"	language:C++
USE_DL_PREFIX	base/extra/nedmalloc/nedmalloc.c	68;"	language:C
USE_LOCKS	base/extra/dlmalloc/dlmalloc.c	574;"	language:C
USE_LOCKS	base/extra/nedmalloc/nedmalloc.c	70;"	language:C
USE_LOCKS	base/include/malloc.c.h	594;"	language:C++
USE_LOCK_BIT	base/extra/dlmalloc/dlmalloc.c	1898;"	language:C
USE_LOCK_BIT	base/extra/dlmalloc/dlmalloc.c	1900;"	language:C
USE_LOCK_BIT	base/include/malloc.c.h	2021;"	language:C++
USE_LOCK_BIT	base/include/malloc.c.h	2023;"	language:C++
USE_MAGIC_HEADERS	base/include/nedmalloc.h	128;"	language:C++
USE_MMAP_BIT	base/extra/dlmalloc/dlmalloc.c	1565;"	language:C
USE_MMAP_BIT	base/extra/dlmalloc/dlmalloc.c	1583;"	language:C
USE_MMAP_BIT	base/include/malloc.c.h	1686;"	language:C++
USE_MMAP_BIT	base/include/malloc.c.h	1704;"	language:C++
USE_NONCONTIGUOUS_BIT	base/extra/dlmalloc/dlmalloc.c	1607;"	language:C
USE_NONCONTIGUOUS_BIT	base/include/malloc.c.h	1728;"	language:C++
USE_SPIN_LOCKS	base/extra/dlmalloc/dlmalloc.c	578;"	language:C
USE_SPIN_LOCKS	base/extra/dlmalloc/dlmalloc.c	580;"	language:C
USE_SPIN_LOCKS	base/include/malloc.c.h	598;"	language:C++
USE_SPIN_LOCKS	base/include/malloc.c.h	600;"	language:C++
V_CYCLE	base/include/messages.h	127;"	language:C++
Vectors	doc/userguide.tex	/^\\subsection{Vectors}$/;"	language:Tex
Vectors and sparse matrices	doc/userguide.tex	/^\\section{Vectors and sparse matrices}\\label{sec:blas}$/;"	language:Tex
WIN32	base/extra/dlmalloc/dlmalloc.c	492;"	language:C
WIN32	base/extra/dlmalloc/dlmalloc.c	496;"	language:C
WIN32	base/include/malloc.c.h	511;"	language:C++
WIN32	base/include/malloc.c.h	515;"	language:C++
WIN32_LEAN_AND_MEAN	base/extra/dlmalloc/dlmalloc.c	500;"	language:C
WIN32_LEAN_AND_MEAN	base/include/malloc.c.h	519;"	language:C++
WW	base/include/fasp_block.h	/^	dCSRmat *WW; \/**< Argumented well block *\/$/;"	language:C++
W_CYCLE	base/include/messages.h	128;"	language:C++
WelRes	base/include/fasp_block.h	/^	dCSRmat WelRes;$/;"	language:C++
WelWel	base/include/fasp_block.h	/^	dCSRmat WelWel;$/;"	language:C++
What you can expect	doc/userguide.tex	/^\\section{What you can expect}\\label{sec:idea}$/;"	language:Tex
_ASSEMBLE_H_	test/include/assemble.h	6;"	language:C++
_DEBUG	base/extra/nedmalloc/nedmalloc.c	82;"	language:C
_DEBUG	base/extra/nedmalloc/nedmalloc.c	84;"	language:C
_DEBUG	base/extra/nedmalloc/nedmalloc.c	91;"	language:C
_FSLS_HEADER_	test/include/poisson_fdm.h	6;"	language:C++
_HEAT_FEM_H_	test/include/heat_fem.h	6;"	language:C++
_MESH_H_	test/include/mesh.h	6;"	language:C++
_MISC_H_	test/include/misc.h	6;"	language:C++
_SC_PAGE_SIZE	base/extra/dlmalloc/dlmalloc.c	1390;"	language:C
_SC_PAGE_SIZE	base/include/malloc.c.h	1414;"	language:C++
_SETUP_POISSON_H_	test/include/poisson_fem.h	6;"	language:C++
__FASPBLK_HEADER__	base/include/fasp_block.h	21;"	language:C++
__FASP_HEADER__	base/include/fasp.h	23;"	language:C++
__FASP_MESSAGES__	base/include/messages.h	21;"	language:C++
__USE_GNU	base/extra/dlmalloc/dlmalloc.c	1322;"	language:C
__USE_GNU	base/extra/dlmalloc/dlmalloc.c	1324;"	language:C
__USE_GNU	base/include/malloc.c.h	1342;"	language:C++
__USE_GNU	base/include/malloc.c.h	1344;"	language:C++
__linux__	base/extra/nedmalloc/nedmalloc.c	29;"	language:C
_gm_	base/extra/dlmalloc/dlmalloc.c	/^static struct malloc_state _gm_;$/;"	language:C
_gm_	base/include/malloc.c.h	/^static struct malloc_state _gm_;$/;"	language:C++
a	test/main/testf.f90	/^  double precision, dimension(:), al/;"	language:Fortran
a	tutorial/main/poisson-amg.f90	/^  double precision, dimension(:), al/;"	language:Fortran
a	tutorial/main/poisson-pcg.f90	/^  double precision, dimension(:), al/;"	language:Fortran
aAxpby	base/src/smoother_str.c	/^static void aAxpby(REAL alpha, REAL beta, INT size, REAL *A, REAL *x, REAL *y)$/;"	language:C	signature:(REAL alpha, REAL beta, INT size, REAL *A, REAL *x, REAL *y)
add_segment	base/extra/dlmalloc/dlmalloc.c	/^static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {$/;"	language:C	signature:(mstate m, char* tbase, size_t tsize, flag_t mmapped)
add_segment	base/include/malloc.c.h	/^static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {$/;"	language:C++	signature:(mstate m, char* tbase, size_t tsize, flag_t mmapped)
aggregation	base/src/amg_setup_aggregation.inl	/^static void aggregation (dCSRmat *A,$/;"	language:C++	signature:(dCSRmat *A, ivector *vertices, AMG_param *param, INT levelNum, dCSRmat *Neigh, INT *num_aggregations)
al	base/include/fasp.h	/^	REAL *al;$/;"	language:C++
align_as_chunk	base/extra/dlmalloc/dlmalloc.c	2091;"	language:C
align_as_chunk	base/include/malloc.c.h	2213;"	language:C++
align_offset	base/extra/dlmalloc/dlmalloc.c	1459;"	language:C
align_offset	base/include/malloc.c.h	1483;"	language:C++
amg_setup_smoothP_smoothA	base/src/amg_setup_sa.c	/^static SHORT amg_setup_smoothP_smoothA (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
amg_setup_smoothP_unsmoothA	base/src/amg_setup_sa.c	/^static SHORT amg_setup_smoothP_unsmoothA (AMG_data *mgl,$/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
amg_setup_unsmoothP_unsmoothA	base/src/amg_setup_sa.c	/^static INT amg_setup_unsmoothP_unsmoothA(AMG_data *mgl,$/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
amg_setup_unsmoothP_unsmoothA	base/src/amg_setup_ua.c	/^static SHORT amg_setup_unsmoothP_unsmoothA (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
amg_setup_unsmoothP_unsmoothA_bsr	base/src/amg_setup_ua.c	/^static SHORT amg_setup_unsmoothP_unsmoothA_bsr(AMG_data_bsr *mgl, AMG_param *param)$/;"	language:C	signature:(AMG_data_bsr *mgl, AMG_param *param)
amg_tol	base/include/fasp_block.h	/^	REAL amg_tol;$/;"	language:C++
amgparam	base/include/fasp_block.h	/^	AMG_param *amgparam; \/**< parameters for AMG *\/$/;"	language:C++
amli_coef	base/include/fasp.h	/^	REAL *amli_coef;$/;"	language:C++
amli_coef	base/include/fasp_block.h	/^	REAL *amli_coef;$/;"	language:C++
amli_degree	base/include/fasp.h	/^	SHORT amli_degree;$/;"	language:C++
amli_degree	base/include/fasp_block.h	/^	SHORT amli_degree;$/;"	language:C++
areaT	test/src/basis.inl	/^double areaT (double x1,$/;"	language:C++	signature:(double x1, double x2, double x3, double y1, double y2, double y3)
arena	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE arena;    \/* non-mmapped space allocated from system *\/$/;"	language:C
arena	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE arena;    \/* non-mmapped space allocated from system *\/$/;"	language:C++
arena	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE arena;    \/* non-mmapped space allocated from system *\/$/;"	language:C++
arena	base/include/nedmalloc.h	/^  size_t arena;    \/* non-mmapped space allocated from system *\/$/;"	language:C++
assemble_stiffmat	test/src/heat_fem.c	/^static void assemble_stiffmat (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *M, dvector *b, Mesh *mesh, Mesh_aux *mesh_aux, FEM_param *pt, double dt)
assemble_stiffmat	test/src/poisson_fem.c	/^static void assemble_stiffmat (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, Mesh *mesh, Mesh_aux *mesh_aux, FEM_param *pt)
assert	base/extra/dlmalloc/dlmalloc.c	1299;"	language:C
assert	base/extra/dlmalloc/dlmalloc.c	1300;"	language:C
assert	base/extra/dlmalloc/dlmalloc.c	1306;"	language:C
assert	base/include/malloc.c.h	1319;"	language:C++
assert	base/include/malloc.c.h	1320;"	language:C++
assert	base/include/malloc.c.h	1326;"	language:C++
au	base/include/fasp.h	/^	REAL *au;$/;"	language:C++
b	base/include/fasp.h	/^	dvector b;$/;"	language:C++
b	base/include/fasp_block.h	/^	dvector b;$/;"	language:C++
b	test/main/testf.f90	/^  doubl/;"	language:Fortran
b	tutorial/main/poisson-amg.f90	/^  doubl/;"	language:Fortran
b	tutorial/main/poisson-pcg.f90	/^  doubl/;"	language:Fortran
base	base/extra/dlmalloc/dlmalloc.c	/^  char*        base;             \/* base address *\/$/;"	language:C
base	base/include/malloc.c.h	/^  char*        base;             \/* base address *\/$/;"	language:C++
basisP1	test/src/basis.inl	/^double basisP1 (int index, $/;"	language:C++	signature:(int index, double lambda[2])
bcol	base/include/fasp_block.h	/^	INT bcol;   $/;"	language:C++
bd	test/include/heat_fem.h	/^    ivector dof, bd, idx;$/;"	language:C++
bd_flag	test/main/testfct_heat.inl	/^int bd_flag (double *p)$/;"	language:C++	signature:(double *p)
bd_flag	test/main/testfct_poisson.inl	/^int bd_flag (double *p)$/;"	language:C++	signature:(double *p)
bin_find	base/extra/dlmalloc/dlmalloc.c	/^static int bin_find(mstate m, mchunkptr x) {$/;"	language:C	signature:(mstate m, mchunkptr x)
bin_find	base/include/malloc.c.h	/^static int bin_find(mstate m, mchunkptr x) {$/;"	language:C++	signature:(mstate m, mchunkptr x)
bindex_t	base/extra/dlmalloc/dlmalloc.c	/^typedef unsigned int bindex_t;         \/* Described below *\/$/;"	language:C
bindex_t	base/include/malloc.c.h	/^typedef unsigned int bindex_t;         \/* Described below *\/$/;"	language:C++
binmap_t	base/extra/dlmalloc/dlmalloc.c	/^typedef unsigned int binmap_t;         \/* Described below *\/$/;"	language:C
binmap_t	base/include/malloc.c.h	/^typedef unsigned int binmap_t;         \/* Described below *\/$/;"	language:C++
bit_for_tree_index	base/extra/dlmalloc/dlmalloc.c	2754;"	language:C
bit_for_tree_index	base/include/malloc.c.h	2855;"	language:C++
bk	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_chunk* bk;$/;"	language:C
bk	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_tree_chunk* bk;$/;"	language:C
bk	base/include/malloc.c.h	/^  struct malloc_chunk* bk;$/;"	language:C++
bk	base/include/malloc.c.h	/^  struct malloc_tree_chunk* bk;$/;"	language:C++
blkcontr2_str	base/src/smoother_str.c	/^static void blkcontr2_str(INT start_data, INT start_vecx, INT start_vecy, INT nc, $/;"	language:C	signature:(INT start_data, INT start_vecx, INT start_vecy, INT nc, REAL *data, REAL *x, REAL *y)
blkcontr_str	base/src/blas_str.c	/^static inline void blkcontr_str (INT start_data, $/;"	language:C	signature:(INT start_data, INT start_vecx, INT start_vecy, INT nc, REAL *data, REAL *x, REAL *y)
block_BSR	base/include/fasp_block.h	/^typedef struct block_BSR{$/;"	language:C++
block_BSR	base/include/fasp_block.h	/^} block_BSR; \/**< Block of BSR matrices of REAL type *\/$/;"	language:C++
block_Reservoir	base/include/fasp_block.h	/^typedef struct block_Reservoir{$/;"	language:C++
block_Reservoir	base/include/fasp_block.h	/^} block_Reservoir; \/**< Special bloack matrix for Reservoir Simulation *\/$/;"	language:C++
block_dCSRmat	base/include/fasp_block.h	/^typedef struct block_dCSRmat{$/;"	language:C++
block_dCSRmat	base/include/fasp_block.h	/^} block_dCSRmat; \/**< Matrix of REAL type in Block BSR format *\/$/;"	language:C++
block_dvector	base/include/fasp_block.h	/^typedef struct block_dvector{$/;"	language:C++
block_dvector	base/include/fasp_block.h	/^} block_dvector; \/**< Vector of REAL type in Block format *\/$/;"	language:C++
block_iCSRmat	base/include/fasp_block.h	/^typedef struct block_iCSRmat{$/;"	language:C++
block_iCSRmat	base/include/fasp_block.h	/^} block_iCSRmat; \/**< Matrix of INT type in Block BSR format *\/$/;"	language:C++
block_ivector	base/include/fasp_block.h	/^typedef struct block_ivector{$/;"	language:C++
block_ivector	base/include/fasp_block.h	/^} block_ivector; \/**< Vector of INT type in Block format *\/$/;"	language:C++
blocks	base/include/fasp_block.h	/^	dCSRmat **blocks;$/;"	language:C++
blocks	base/include/fasp_block.h	/^	dvector **blocks;$/;"	language:C++
blocks	base/include/fasp_block.h	/^	iCSRmat **blocks;$/;"	language:C++
blocks	base/include/fasp_block.h	/^	ivector **blocks;$/;"	language:C++
bminax	base/src/smoother_poly.c	/^static void bminax(REAL *b,INT *ia,INT *ja, REAL *a, REAL *x,INT *nn, REAL *res)$/;"	language:C	signature:(REAL *b,INT *ia,INT *ja, REAL *a, REAL *x,INT *nn, REAL *res)
brow	base/include/fasp_block.h	/^	INT brow;   $/;"	language:C++
c	base/extra/dlmalloc/dlmalloc.c	/^  unsigned int c;$/;"	language:C
c	base/include/malloc.c.h	/^  unsigned int c;$/;"	language:C++
cachelinepadding	base/include/malloc.c.h	/^  char cachelinepadding[64];$/;"	language:C++
calloc_must_clear	base/extra/dlmalloc/dlmalloc.c	2164;"	language:C
calloc_must_clear	base/extra/dlmalloc/dlmalloc.c	2166;"	language:C
calloc_must_clear	base/include/malloc.c.h	2286;"	language:C++
calloc_must_clear	base/include/malloc.c.h	2288;"	language:C++
cfmark	base/include/fasp.h	/^	ivector cfmark; 	$/;"	language:C++
cfmark	base/include/fasp_block.h	/^	ivector cfmark; 	$/;"	language:C++
change_mparam	base/extra/dlmalloc/dlmalloc.c	/^static int change_mparam(int param_number, int value) {$/;"	language:C	signature:(int param_number, int value)
change_mparam	base/include/malloc.c.h	/^static int change_mparam(int param_number, int value) {$/;"	language:C++	signature:(int param_number, int value)
check_free_chunk	base/extra/dlmalloc/dlmalloc.c	2648;"	language:C
check_free_chunk	base/extra/dlmalloc/dlmalloc.c	2656;"	language:C
check_free_chunk	base/include/malloc.c.h	2749;"	language:C++
check_free_chunk	base/include/malloc.c.h	2757;"	language:C++
check_inuse_chunk	base/extra/dlmalloc/dlmalloc.c	2649;"	language:C
check_inuse_chunk	base/extra/dlmalloc/dlmalloc.c	2657;"	language:C
check_inuse_chunk	base/include/malloc.c.h	2750;"	language:C++
check_inuse_chunk	base/include/malloc.c.h	2758;"	language:C++
check_malloc_state	base/extra/dlmalloc/dlmalloc.c	2652;"	language:C
check_malloc_state	base/extra/dlmalloc/dlmalloc.c	2661;"	language:C
check_malloc_state	base/include/malloc.c.h	2753;"	language:C++
check_malloc_state	base/include/malloc.c.h	2762;"	language:C++
check_malloced_chunk	base/extra/dlmalloc/dlmalloc.c	2650;"	language:C
check_malloced_chunk	base/extra/dlmalloc/dlmalloc.c	2659;"	language:C
check_malloced_chunk	base/include/malloc.c.h	2751;"	language:C++
check_malloced_chunk	base/include/malloc.c.h	2760;"	language:C++
check_mmapped_chunk	base/extra/dlmalloc/dlmalloc.c	2651;"	language:C
check_mmapped_chunk	base/extra/dlmalloc/dlmalloc.c	2660;"	language:C
check_mmapped_chunk	base/include/malloc.c.h	2752;"	language:C++
check_mmapped_chunk	base/include/malloc.c.h	2761;"	language:C++
check_solu	test/main/regression.c	/^static void check_solu(dvector *x, dvector *sol, double tol)$/;"	language:C	signature:(dvector *x, dvector *sol, double tol)
check_solu	test/main/testmm.c	/^static void check_solu(dvector *x, dvector *sol, double tol, unsigned int *nt, unsigned int *nf)$/;"	language:C	signature:(dvector *x, dvector *sol, double tol, unsigned int *nt, unsigned int *nf)
check_top_chunk	base/extra/dlmalloc/dlmalloc.c	2653;"	language:C
check_top_chunk	base/extra/dlmalloc/dlmalloc.c	2658;"	language:C
check_top_chunk	base/include/malloc.c.h	2754;"	language:C++
check_top_chunk	base/include/malloc.c.h	2759;"	language:C++
child	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_tree_chunk* child[2];$/;"	language:C
child	base/include/malloc.c.h	/^  struct malloc_tree_chunk* child[2];$/;"	language:C++
chunk2mem	base/extra/dlmalloc/dlmalloc.c	2088;"	language:C
chunk2mem	base/include/malloc.c.h	2210;"	language:C++
chunk_minus_offset	base/extra/dlmalloc/dlmalloc.c	2137;"	language:C
chunk_minus_offset	base/include/malloc.c.h	2259;"	language:C++
chunk_plus_offset	base/extra/dlmalloc/dlmalloc.c	2136;"	language:C
chunk_plus_offset	base/include/malloc.c.h	2258;"	language:C++
chunksize	base/extra/dlmalloc/dlmalloc.c	2131;"	language:C
chunksize	base/include/malloc.c.h	2253;"	language:C++
cinuse	base/extra/dlmalloc/dlmalloc.c	2126;"	language:C
cinuse	base/include/malloc.c.h	2248;"	language:C++
clear_pinuse	base/extra/dlmalloc/dlmalloc.c	2133;"	language:C
clear_pinuse	base/include/malloc.c.h	2255;"	language:C++
clear_smallmap	base/extra/dlmalloc/dlmalloc.c	2775;"	language:C
clear_smallmap	base/include/malloc.c.h	2876;"	language:C++
clear_treemap	base/extra/dlmalloc/dlmalloc.c	2779;"	language:C
clear_treemap	base/include/malloc.c.h	2880;"	language:C++
coarse_dof	base/include/fasp.h	/^	INT coarse_dof;	$/;"	language:C++
coarse_scaling	base/include/fasp.h	/^	SHORT coarse_scaling;$/;"	language:C++
coarse_scaling	base/include/fasp_block.h	/^	SHORT coarse_scaling;$/;"	language:C++
coarsening_type	base/include/fasp.h	/^	SHORT coarsening_type;$/;"	language:C++
coarsening_type	base/include/fasp_block.h	/^	SHORT coarsening_type;$/;"	language:C++
col	base/include/fasp.h	/^	INT col;	$/;"	language:C++
col	base/include/fasp.h	/^	INT col;   $/;"	language:C++
col	base/include/fasp.h	/^	INT col;$/;"	language:C++
col_idx	base/include/fasp_block.h	/^	ivector **col_idx; \/**< problem data, col indices *\/$/;"	language:C++
compute_bit2idx	base/extra/dlmalloc/dlmalloc.c	2794;"	language:C
compute_bit2idx	base/extra/dlmalloc/dlmalloc.c	2802;"	language:C
compute_bit2idx	base/extra/dlmalloc/dlmalloc.c	2810;"	language:C
compute_bit2idx	base/extra/dlmalloc/dlmalloc.c	2818;"	language:C
compute_bit2idx	base/extra/dlmalloc/dlmalloc.c	2821;"	language:C
compute_bit2idx	base/include/malloc.c.h	2895;"	language:C++
compute_bit2idx	base/include/malloc.c.h	2903;"	language:C++
compute_bit2idx	base/include/malloc.c.h	2911;"	language:C++
compute_bit2idx	base/include/malloc.c.h	2919;"	language:C++
compute_bit2idx	base/include/malloc.c.h	2922;"	language:C++
compute_tree_index	base/extra/dlmalloc/dlmalloc.c	2690;"	language:C
compute_tree_index	base/extra/dlmalloc/dlmalloc.c	2705;"	language:C
compute_tree_index	base/extra/dlmalloc/dlmalloc.c	2719;"	language:C
compute_tree_index	base/extra/dlmalloc/dlmalloc.c	2734;"	language:C
compute_tree_index	base/include/malloc.c.h	2791;"	language:C++
compute_tree_index	base/include/malloc.c.h	2806;"	language:C++
compute_tree_index	base/include/malloc.c.h	2820;"	language:C++
compute_tree_index	base/include/malloc.c.h	2835;"	language:C++
create_mspace	base/extra/dlmalloc/dlmalloc.c	/^mspace create_mspace(size_t capacity, int locked) {$/;"	language:C	signature:(size_t capacity, int locked)
create_mspace	base/include/malloc.c.h	/^mspace create_mspace(size_t capacity, int locked) {$/;"	language:C++	signature:(size_t capacity, int locked)
create_mspace_with_base	base/extra/dlmalloc/dlmalloc.c	/^mspace create_mspace_with_base(void* base, size_t capacity, int locked) {$/;"	language:C	signature:(void* base, size_t capacity, int locked)
create_mspace_with_base	base/include/malloc.c.h	/^mspace create_mspace_with_base(void* base, size_t capacity, int locked) {$/;"	language:C++	signature:(void* base, size_t capacity, int locked)
create_node	base/src/coarsening_rs.c	/^static LinkList create_node (INT Item)$/;"	language:C	signature:(INT Item)
cut0	base/src/schwarz.f	/^      subroutine cut0(/;"	language:Fortran
cycle_type	base/include/fasp.h	/^	SHORT cycle_type;$/;"	language:C++
cycle_type	base/include/fasp_block.h	/^	SHORT cycle_type;$/;"	language:C++
dBSRmat	base/include/fasp_block.h	/^typedef struct dBSRmat{$/;"	language:C++
dBSRmat	base/include/fasp_block.h	/^} dBSRmat; \/**< Matrix of REAL type in BSR format *\/$/;"	language:C++
dCOOmat	base/include/fasp.h	/^typedef struct dCOOmat{$/;"	language:C++
dCOOmat	base/include/fasp.h	/^} dCOOmat; \/**< Sparse matrix of REAL type in COO format *\/$/;"	language:C++
dCSRLmat	base/include/fasp.h	/^typedef struct dCSRLmat{$/;"	language:C++
dCSRLmat	base/include/fasp.h	/^} dCSRLmat; \/**< Sparse matrix of REAL type in CSRL format *\/$/;"	language:C++
dCSRmat	base/include/fasp.h	/^typedef struct dCSRmat{$/;"	language:C++
dCSRmat	base/include/fasp.h	/^} dCSRmat; \/**< Sparse matrix of REAL type in CSR format *\/$/;"	language:C++
dCSRmat2SAMGInput	base/extra/interface/interface_samg.c	/^int dCSRmat2SAMGInput(dCSRmat *A, char *filefrm, char *fileamg)$/;"	language:C	signature:(dCSRmat *A, char *filefrm, char *fileamg)
dSTRmat	base/include/fasp.h	/^typedef struct dSTRmat{$/;"	language:C++
dSTRmat	base/include/fasp.h	/^} dSTRmat; \/**< Structured matrix of REAL type *\/$/;"	language:C++
dSwapping	base/src/ordering.c	/^static void dSwapping (REAL *w, $/;"	language:C	signature:(REAL *w, INT i, INT j)
data	base/include/fasp.h	/^	INT data;$/;"	language:C++
data	base/include/fasp.h	/^	void *data; 	$/;"	language:C++
data	test/include/poisson_fdm.h	/^    double  *data;     \/**< @brief data of the vector (length is size) *\/$/;"	language:C++
data	test/include/poisson_fdm.h	/^    double  *data;$/;"	language:C++
data_ext	test/include/poisson_fdm.h	/^    double  *data_ext; \/**< @brief data part, including diag_ext and offdiag_ext *\/$/;"	language:C++
data_ext	test/include/poisson_fdm.h	/^    double  *data_ext; \/**< @brief data part, including extended data *\/$/;"	language:C++
dcsr_output	test/src/assemble.c	/^void dcsr_output ( dCSRmat *t, dCSRmat *s )$/;"	language:C	signature:( dCSRmat *t, dCSRmat *s )
dden_output	test/src/assemble.c	/^void dden_output ( ddenmat *t, ddenmat *s )$/;"	language:C	signature:( ddenmat *t, ddenmat *s )
ddenmat	base/include/fasp.h	/^typedef struct ddenmat{$/;"	language:C++
ddenmat	base/include/fasp.h	/^} ddenmat; \/**< Dense matrix of REAL type *\/$/;"	language:C++
default_mflags	base/extra/dlmalloc/dlmalloc.c	/^  flag_t default_mflags;$/;"	language:C
default_mflags	base/include/malloc.c.h	/^  flag_t default_mflags;$/;"	language:C++
destroy_mspace	base/extra/dlmalloc/dlmalloc.c	/^size_t destroy_mspace(mspace msp) {$/;"	language:C	signature:(mspace msp)
destroy_mspace	base/include/malloc.c.h	/^size_t destroy_mspace(mspace msp) {$/;"	language:C++	signature:(mspace msp)
dev_zero_fd	base/extra/dlmalloc/dlmalloc.c	/^static int dev_zero_fd = -1; \/* Cached file descriptor for \/dev\/zero. *\/$/;"	language:C
dev_zero_fd	base/include/malloc.c.h	/^static int dev_zero_fd = -1; \/* Cached file descriptor for \/dev\/zero. *\/$/;"	language:C++
diag	base/include/fasp.h	/^	REAL *diag;$/;"	language:C++
diag	base/include/fasp.h	/^	dvector diag;$/;"	language:C++
diag	base/include/fasp_block.h	/^	precond_diagstr *diag; \/**< the diagonal inverse for diagonal scaling *\/$/;"	language:C++
diag	test/include/poisson_fdm.h	/^    double  *diag; \/**< @brief diagonal entries (length is n) *\/$/;"	language:C++
diaginv	base/include/fasp.h	/^	dvector *diaginv;$/;"	language:C++
diaginv	base/include/fasp_block.h	/^	dvector *diaginv; \/**< inverse of the diagonal blocks for GS\/bGS smoother for reservoir block *\/$/;"	language:C++
diaginv	base/include/fasp_block.h	/^	dvector *diaginv; \/**< the inverse of the diagonals for GS\/block GS smoother (whole reservoir matrix) *\/$/;"	language:C++
diaginvS	base/include/fasp.h	/^	dvector *diaginvS;$/;"	language:C++
diaginvS	base/include/fasp_block.h	/^	dvector *diaginvS; \/**< the inverse of the diagonals for GS\/block GS smoother (saturation block) *\/$/;"	language:C++
diaginv_S	base/include/fasp_block.h	/^	dvector *diaginv_S; \/**< inverse of the diagonal blocks for GS\/block GS smoother for saturation block *\/$/;"	language:C++
diaginv_noscale	base/include/fasp_block.h	/^	dvector *diaginv_noscale; \/**< inverse of diagonal blocks for diagonal scaling *\/$/;"	language:C++
dif	base/include/fasp.h	/^	INT dif;$/;"	language:C++
disable_contiguous	base/extra/dlmalloc/dlmalloc.c	2516;"	language:C
disable_contiguous	base/include/malloc.c.h	2617;"	language:C++
disable_lock	base/extra/dlmalloc/dlmalloc.c	2509;"	language:C
disable_lock	base/include/malloc.c.h	2610;"	language:C++
disable_mmap	base/extra/dlmalloc/dlmalloc.c	2513;"	language:C
disable_mmap	base/include/malloc.c.h	2614;"	language:C++
dispose_node	base/src/coarsening_rs.c	/^static void dispose_node (LinkList node_ptr)$/;"	language:C	signature:(LinkList node_ptr)
dlcalloc	base/extra/dlmalloc/dlmalloc.c	/^void* dlcalloc(size_t n_elements, size_t elem_size) {$/;"	language:C	signature:(size_t n_elements, size_t elem_size)
dlcalloc	base/extra/dlmalloc/dlmalloc.c	757;"	language:C
dlcalloc	base/include/dlmalloc.h	45;"	language:C++
dlcalloc	base/include/malloc.c.h	/^void* dlcalloc(size_t n_elements, size_t elem_size) {$/;"	language:C++	signature:(size_t n_elements, size_t elem_size)
dlcalloc	base/include/malloc.c.h	777;"	language:C++
dlfree	base/extra/dlmalloc/dlmalloc.c	/^void dlfree(void* mem) {$/;"	language:C	signature:(void* mem)
dlfree	base/extra/dlmalloc/dlmalloc.c	758;"	language:C
dlfree	base/include/dlmalloc.h	46;"	language:C++
dlfree	base/include/malloc.c.h	/^void dlfree(void* mem) {$/;"	language:C++	signature:(void* mem)
dlfree	base/include/malloc.c.h	778;"	language:C++
dlindependent_calloc	base/extra/dlmalloc/dlmalloc.c	/^void** dlindependent_calloc(size_t n_elements, size_t elem_size,$/;"	language:C	signature:(size_t n_elements, size_t elem_size, void* chunks[])
dlindependent_calloc	base/extra/dlmalloc/dlmalloc.c	771;"	language:C
dlindependent_calloc	base/include/dlmalloc.h	58;"	language:C++
dlindependent_calloc	base/include/malloc.c.h	/^void** dlindependent_calloc(size_t n_elements, size_t elem_size,$/;"	language:C++	signature:(size_t n_elements, size_t elem_size, void* chunks[])
dlindependent_calloc	base/include/malloc.c.h	791;"	language:C++
dlindependent_comalloc	base/extra/dlmalloc/dlmalloc.c	/^void** dlindependent_comalloc(size_t n_elements, size_t sizes[],$/;"	language:C	signature:(size_t n_elements, size_t sizes[], void* chunks[])
dlindependent_comalloc	base/extra/dlmalloc/dlmalloc.c	772;"	language:C
dlindependent_comalloc	base/include/dlmalloc.h	59;"	language:C++
dlindependent_comalloc	base/include/malloc.c.h	/^void** dlindependent_comalloc(size_t n_elements, size_t sizes[],$/;"	language:C++	signature:(size_t n_elements, size_t sizes[], void* chunks[])
dlindependent_comalloc	base/include/malloc.c.h	792;"	language:C++
dlmallinfo	base/extra/dlmalloc/dlmalloc.c	/^struct mallinfo dlmallinfo(void) {$/;"	language:C	signature:(void)
dlmallinfo	base/extra/dlmalloc/dlmalloc.c	764;"	language:C
dlmallinfo	base/include/dlmalloc.h	52;"	language:C++
dlmallinfo	base/include/malloc.c.h	/^struct mallinfo dlmallinfo(void) {$/;"	language:C++	signature:(void)
dlmallinfo	base/include/malloc.c.h	784;"	language:C++
dlmalloc	base/extra/dlmalloc/dlmalloc.c	/^void* dlmalloc(size_t bytes) {$/;"	language:C	signature:(size_t bytes)
dlmalloc	base/extra/dlmalloc/dlmalloc.c	759;"	language:C
dlmalloc	base/include/dlmalloc.h	47;"	language:C++
dlmalloc	base/include/malloc.c.h	/^void* dlmalloc(size_t bytes) {$/;"	language:C++	signature:(size_t bytes)
dlmalloc	base/include/malloc.c.h	779;"	language:C++
dlmalloc_footprint	base/extra/dlmalloc/dlmalloc.c	/^size_t dlmalloc_footprint(void) {$/;"	language:C	signature:(void)
dlmalloc_footprint	base/extra/dlmalloc/dlmalloc.c	769;"	language:C
dlmalloc_footprint	base/include/dlmalloc.h	57;"	language:C++
dlmalloc_footprint	base/include/malloc.c.h	/^size_t dlmalloc_footprint(void) {$/;"	language:C++	signature:(void)
dlmalloc_footprint	base/include/malloc.c.h	789;"	language:C++
dlmalloc_max_footprint	base/extra/dlmalloc/dlmalloc.c	/^size_t dlmalloc_max_footprint(void) {$/;"	language:C	signature:(void)
dlmalloc_max_footprint	base/extra/dlmalloc/dlmalloc.c	770;"	language:C
dlmalloc_max_footprint	base/include/malloc.c.h	/^size_t dlmalloc_max_footprint(void) {$/;"	language:C++	signature:(void)
dlmalloc_max_footprint	base/include/malloc.c.h	790;"	language:C++
dlmalloc_stats	base/extra/dlmalloc/dlmalloc.c	/^void dlmalloc_stats() {$/;"	language:C
dlmalloc_stats	base/extra/dlmalloc/dlmalloc.c	767;"	language:C
dlmalloc_stats	base/include/dlmalloc.h	55;"	language:C++
dlmalloc_stats	base/include/malloc.c.h	/^void dlmalloc_stats() {$/;"	language:C++	signature:()
dlmalloc_stats	base/include/malloc.c.h	787;"	language:C++
dlmalloc_trim	base/extra/dlmalloc/dlmalloc.c	/^int dlmalloc_trim(size_t pad) {$/;"	language:C	signature:(size_t pad)
dlmalloc_trim	base/extra/dlmalloc/dlmalloc.c	766;"	language:C
dlmalloc_trim	base/include/dlmalloc.h	54;"	language:C++
dlmalloc_trim	base/include/malloc.c.h	/^int dlmalloc_trim(size_t pad) {$/;"	language:C++	signature:(size_t pad)
dlmalloc_trim	base/include/malloc.c.h	786;"	language:C++
dlmalloc_usable_size	base/extra/dlmalloc/dlmalloc.c	/^size_t dlmalloc_usable_size(void* mem) {$/;"	language:C	signature:(void* mem)
dlmalloc_usable_size	base/extra/dlmalloc/dlmalloc.c	768;"	language:C
dlmalloc_usable_size	base/include/dlmalloc.h	56;"	language:C++
dlmalloc_usable_size	base/include/malloc.c.h	/^size_t dlmalloc_usable_size(void* mem) {$/;"	language:C++	signature:(void* mem)
dlmalloc_usable_size	base/include/malloc.c.h	788;"	language:C++
dlmallopt	base/extra/dlmalloc/dlmalloc.c	/^int dlmallopt(int param_number, int value) {$/;"	language:C	signature:(int param_number, int value)
dlmallopt	base/extra/dlmalloc/dlmalloc.c	765;"	language:C
dlmallopt	base/include/dlmalloc.h	53;"	language:C++
dlmallopt	base/include/malloc.c.h	/^int dlmallopt(int param_number, int value) {$/;"	language:C++	signature:(int param_number, int value)
dlmallopt	base/include/malloc.c.h	785;"	language:C++
dlmemalign	base/extra/dlmalloc/dlmalloc.c	/^void* dlmemalign(size_t alignment, size_t bytes) {$/;"	language:C	signature:(size_t alignment, size_t bytes)
dlmemalign	base/extra/dlmalloc/dlmalloc.c	760;"	language:C
dlmemalign	base/include/dlmalloc.h	48;"	language:C++
dlmemalign	base/include/malloc.c.h	/^void* dlmemalign(size_t alignment, size_t bytes) {$/;"	language:C++	signature:(size_t alignment, size_t bytes)
dlmemalign	base/include/malloc.c.h	780;"	language:C++
dlpvalloc	base/extra/dlmalloc/dlmalloc.c	/^void* dlpvalloc(size_t bytes) {$/;"	language:C	signature:(size_t bytes)
dlpvalloc	base/extra/dlmalloc/dlmalloc.c	763;"	language:C
dlpvalloc	base/include/dlmalloc.h	51;"	language:C++
dlpvalloc	base/include/malloc.c.h	/^void* dlpvalloc(size_t bytes) {$/;"	language:C++	signature:(size_t bytes)
dlpvalloc	base/include/malloc.c.h	783;"	language:C++
dlrealloc	base/extra/dlmalloc/dlmalloc.c	/^void* dlrealloc(void* oldmem, size_t bytes) {$/;"	language:C	signature:(void* oldmem, size_t bytes)
dlrealloc	base/extra/dlmalloc/dlmalloc.c	761;"	language:C
dlrealloc	base/include/dlmalloc.h	49;"	language:C++
dlrealloc	base/include/malloc.c.h	/^void* dlrealloc(void* oldmem, size_t bytes) {$/;"	language:C++	signature:(void* oldmem, size_t bytes)
dlrealloc	base/include/malloc.c.h	781;"	language:C++
dlvalloc	base/extra/dlmalloc/dlmalloc.c	/^void* dlvalloc(size_t bytes) {$/;"	language:C	signature:(size_t bytes)
dlvalloc	base/extra/dlmalloc/dlmalloc.c	762;"	language:C
dlvalloc	base/include/dlmalloc.h	50;"	language:C++
dlvalloc	base/include/malloc.c.h	/^void* dlvalloc(size_t bytes) {$/;"	language:C++	signature:(size_t bytes)
dlvalloc	base/include/malloc.c.h	782;"	language:C++
do_check_any_chunk	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_any_chunk(mstate m, mchunkptr p) {$/;"	language:C	signature:(mstate m, mchunkptr p)
do_check_any_chunk	base/include/malloc.c.h	/^static void do_check_any_chunk(mstate m, mchunkptr p) {$/;"	language:C++	signature:(mstate m, mchunkptr p)
do_check_free_chunk	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_free_chunk(mstate m, mchunkptr p) {$/;"	language:C	signature:(mstate m, mchunkptr p)
do_check_free_chunk	base/include/malloc.c.h	/^static void do_check_free_chunk(mstate m, mchunkptr p) {$/;"	language:C++	signature:(mstate m, mchunkptr p)
do_check_inuse_chunk	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_inuse_chunk(mstate m, mchunkptr p) {$/;"	language:C	signature:(mstate m, mchunkptr p)
do_check_inuse_chunk	base/include/malloc.c.h	/^static void do_check_inuse_chunk(mstate m, mchunkptr p) {$/;"	language:C++	signature:(mstate m, mchunkptr p)
do_check_malloc_state	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_malloc_state(mstate m) {$/;"	language:C	signature:(mstate m)
do_check_malloc_state	base/include/malloc.c.h	/^static void do_check_malloc_state(mstate m) {$/;"	language:C++	signature:(mstate m)
do_check_malloced_chunk	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_malloced_chunk(mstate m, void* mem, size_t s) {$/;"	language:C	signature:(mstate m, void* mem, size_t s)
do_check_malloced_chunk	base/include/malloc.c.h	/^static void do_check_malloced_chunk(mstate m, void* mem, size_t s) {$/;"	language:C++	signature:(mstate m, void* mem, size_t s)
do_check_mmapped_chunk	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_mmapped_chunk(mstate m, mchunkptr p) {$/;"	language:C	signature:(mstate m, mchunkptr p)
do_check_mmapped_chunk	base/include/malloc.c.h	/^static void do_check_mmapped_chunk(mstate m, mchunkptr p) {$/;"	language:C++	signature:(mstate m, mchunkptr p)
do_check_smallbin	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_smallbin(mstate m, bindex_t i) {$/;"	language:C	signature:(mstate m, bindex_t i)
do_check_smallbin	base/include/malloc.c.h	/^static void do_check_smallbin(mstate m, bindex_t i) {$/;"	language:C++	signature:(mstate m, bindex_t i)
do_check_top_chunk	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_top_chunk(mstate m, mchunkptr p) {$/;"	language:C	signature:(mstate m, mchunkptr p)
do_check_top_chunk	base/include/malloc.c.h	/^static void do_check_top_chunk(mstate m, mchunkptr p) {$/;"	language:C++	signature:(mstate m, mchunkptr p)
do_check_tree	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_tree(mstate m, tchunkptr t) {$/;"	language:C	signature:(mstate m, tchunkptr t)
do_check_tree	base/include/malloc.c.h	/^static void do_check_tree(mstate m, tchunkptr t) {$/;"	language:C++	signature:(mstate m, tchunkptr t)
do_check_treebin	base/extra/dlmalloc/dlmalloc.c	/^static void do_check_treebin(mstate m, bindex_t i) {$/;"	language:C	signature:(mstate m, bindex_t i)
do_check_treebin	base/include/malloc.c.h	/^static void do_check_treebin(mstate m, bindex_t i) {$/;"	language:C++	signature:(mstate m, bindex_t i)
dof	test/include/heat_fem.h	/^    ivector dof, bd, idx;$/;"	language:C++
dv	base/extra/dlmalloc/dlmalloc.c	/^  mchunkptr  dv;$/;"	language:C
dv	base/include/malloc.c.h	/^  mchunkptr  dv;$/;"	language:C++
dvec_output	test/src/assemble.c	/^void dvec_output ( dvector *t, dvector *s )$/;"	language:C	signature:( dvector *t, dvector *s )
dvector	base/include/fasp.h	/^typedef struct dvector{$/;"	language:C++
dvector	base/include/fasp.h	/^} dvector; \/**< Vector of REAL type *\/$/;"	language:C++
dvector2SAMGInput	base/extra/interface/interface_samg.c	/^void dvector2SAMGInput(dvector *vec, char *filename)$/;"	language:C	signature:(dvector *vec, char *filename)
dvsize	base/extra/dlmalloc/dlmalloc.c	/^  size_t     dvsize;$/;"	language:C
dvsize	base/include/malloc.c.h	/^  size_t     dvsize;$/;"	language:C++
e	base/include/fasp.h	/^	INT (*e)[2]; \/**< Vertices of edges *\/$/;"	language:C++
edge	test/include/mesh.h	/^    idenmat edge;$/;"	language:C++
edge_bd	test/include/mesh.h	/^    ivector edge_bd;$/;"	language:C++
edges	base/include/fasp.h	/^	INT edges; \/**< Number of edges *\/$/;"	language:C++
ediri	base/include/fasp.h	/^	INT *ediri; \/**< Boundary flags (0 <=> interior edge) *\/$/;"	language:C++
efather	base/include/fasp.h	/^	INT *efather; \/**< Father edge or triangle *\/$/;"	language:C++
elem	test/include/mesh.h	/^    idenmat elem;$/;"	language:C++
elem2edge	test/include/mesh.h	/^    idenmat elem2edge;$/;"	language:C++
enable_lock	base/extra/dlmalloc/dlmalloc.c	2508;"	language:C
enable_lock	base/include/malloc.c.h	2609;"	language:C++
enable_mmap	base/extra/dlmalloc/dlmalloc.c	2512;"	language:C
enable_mmap	base/include/malloc.c.h	2613;"	language:C++
ensure_initialization	base/extra/dlmalloc/dlmalloc.c	2490;"	language:C
ensure_initialization	base/include/malloc.c.h	1506;"	language:C++
enter_list	base/src/coarsening_rs.c	/^void enter_list (LinkList *LoL_head_ptr, $/;"	language:C	signature:(LinkList *LoL_head_ptr, LinkList *LoL_tail_ptr, INT measure, INT index, INT *lists, INT *where)
extp	base/extra/dlmalloc/dlmalloc.c	/^  void*      extp;      \/* Unused but available for extensions *\/$/;"	language:C
extp	base/include/malloc.c.h	/^  void*      extp;      \/* Unused but available for extensions *\/$/;"	language:C++
extractNondirichletMatrix	test/src/assemble.c	/^void extractNondirichletMatrix (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dCSRmat *A11, dvector *b1, ivector *isInNode, ivector *dirichlet, ivector *nondirichlet, ivector *index, dvector *uh)
exts	base/extra/dlmalloc/dlmalloc.c	/^  size_t     exts;$/;"	language:C
exts	base/include/malloc.c.h	/^  size_t     exts;$/;"	language:C++
f	test/main/testfct_heat.inl	/^double f (double *p)$/;"	language:C++	signature:(double *p)
f	test/main/testfct_poisson.inl	/^double f (double *p)$/;"	language:C++	signature:(double *p)
factor	base/src/factor.f	/^      subroutine factor(/;"	language:Fortran
fasp_BinarySearch	base/src/interpolation.c	/^INT fasp_BinarySearch (INT *list, $/;"	language:C	signature:(INT *list, INT value, INT list_length)
fasp_amg_amli_coef	base/src/amlirecur.c	/^void fasp_amg_amli_coef (const REAL lambda_max, $/;"	language:C	signature:(const REAL lambda_max, const REAL lambda_min, const INT degree, REAL *coef)
fasp_amg_coarsening_cr	base/src/coarsening_cr.c	/^INT fasp_amg_coarsening_cr (INT i_0, $/;"	language:C	signature:(INT i_0, INT i_n, dCSRmat *A, ivector *vertices, AMG_param *param)
fasp_amg_coarsening_rs	base/src/coarsening_rs.c	/^INT fasp_amg_coarsening_rs (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ivector *vertices, dCSRmat *P, iCSRmat *S, AMG_param *param)
fasp_amg_data_bsr_create	base/src/init.c	/^AMG_data_bsr * fasp_amg_data_bsr_create (SHORT max_levels)$/;"	language:C	signature:(SHORT max_levels)
fasp_amg_data_create	base/src/init.c	/^AMG_data * fasp_amg_data_create (SHORT max_levels)$/;"	language:C	signature:(SHORT max_levels)
fasp_amg_data_free	base/src/init.c	/^void fasp_amg_data_free (AMG_data *mgl)$/;"	language:C	signature:(AMG_data *mgl)
fasp_amg_interp	base/src/interpolation.c	/^SHORT fasp_amg_interp (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ivector *vertices, dCSRmat *P, iCSRmat *S, AMG_param *param)
fasp_amg_interp1	base/src/interpolation.c	/^INT fasp_amg_interp1( dCSRmat *A, $/;"	language:C	signature:( dCSRmat *A, ivector *vertices, dCSRmat *P, AMG_param *param, iCSRmat *S, INT *icor_ysk)
fasp_amg_setup_cr	base/src/amg_setup_cr.c	/^SHORT fasp_amg_setup_cr (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_setup_rs	base/src/amg_setup_rs.c	/^SHORT fasp_amg_setup_rs (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_setup_rs_omp	base/src/amg_setup_rs.c	/^INT fasp_amg_setup_rs_omp (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_setup_sa	base/src/amg_setup_sa.c	/^SHORT fasp_amg_setup_sa (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_setup_ua	base/src/amg_setup_ua.c	/^SHORT fasp_amg_setup_ua (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_setup_ua_bsr	base/src/amg_setup_ua.c	/^SHORT fasp_amg_setup_ua_bsr (AMG_data_bsr *mgl, $/;"	language:C	signature:(AMG_data_bsr *mgl, AMG_param *param)
fasp_amg_solve	base/src/amg_solve.c	/^INT fasp_amg_solve (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_solve_amli	base/src/amg_solve.c	/^INT fasp_amg_solve_amli (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_amg_solve_nl_amli	base/src/amg_solve.c	/^INT fasp_amg_solve_nl_amli (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_array_cp	base/src/array.c	/^void fasp_array_cp (const INT n, $/;"	language:C	signature:(const INT n, REAL *x, REAL *y)
fasp_array_cp_nc3	base/src/array.c	/^void fasp_array_cp_nc3 (REAL *x, $/;"	language:C	signature:(REAL *x, REAL *y)
fasp_array_cp_nc5	base/src/array.c	/^void fasp_array_cp_nc5 (REAL *x, $/;"	language:C	signature:(REAL *x, REAL *y)
fasp_array_cp_nc7	base/src/array.c	/^void fasp_array_cp_nc7 (REAL *x, $/;"	language:C	signature:(REAL *x, REAL *y)
fasp_array_null	base/src/array.c	/^void fasp_array_null (REAL *x) $/;"	language:C	signature:(REAL *x)
fasp_array_set	base/src/array.c	/^void fasp_array_set (const INT n, $/;"	language:C	signature:(const INT n, REAL *x, const REAL val)
fasp_aux_auv_	base/src/auxiliary.c	/^void fasp_aux_auv_ (INT *ia,$/;"	language:C	signature:(INT *ia, INT *ja, REAL *a, REAL *u, REAL *v, INT *nn, REAL *aauv)
fasp_aux_bbyteTolREAL	base/src/util.c	/^REAL fasp_aux_bbyteTolREAL(unsigned char bytes[])$/;"	language:C	signature:(unsigned char bytes[])
fasp_aux_change_endian4	base/src/util.c	/^unsigned long fasp_aux_change_endian4(unsigned long x)$/;"	language:C	signature:(unsigned long x)
fasp_aux_change_endian8	base/src/util.c	/^REAL fasp_aux_change_endian8(REAL x)$/;"	language:C	signature:(REAL x)
fasp_aux_dQuickSort	base/src/ordering.c	/^void fasp_aux_dQuickSort (REAL *a, $/;"	language:C	signature:(REAL *a, INT left, INT right)
fasp_aux_dQuickSortIndex	base/src/ordering.c	/^void fasp_aux_dQuickSortIndex (REAL *a, $/;"	language:C	signature:(REAL *a, INT left, INT right, INT *index)
fasp_aux_givens	base/src/givens.c	/^void fasp_aux_givens (const REAL beta, $/;"	language:C	signature:(const REAL beta, dCSRmat *H, dvector *y, REAL *tmp)
fasp_aux_iQuickSort	base/src/ordering.c	/^void fasp_aux_iQuickSort (INT *a, $/;"	language:C	signature:(INT *a, INT left, INT right)
fasp_aux_iQuickSortIndex	base/src/ordering.c	/^void fasp_aux_iQuickSortIndex (INT *a, $/;"	language:C	signature:(INT *a, INT left, INT right, INT *index)
fasp_aux_ijvcrs	base/src/auxiliary.c	/^void fasp_aux_ijvcrs (INT *nnzi, $/;"	language:C	signature:(INT *nnzi, INT *ia, INT *ja, REAL *a, INT *n, INT *nnz, INT *irow, INT *jcol, REAL *aval)
fasp_aux_merge	base/src/ordering.c	/^void fasp_aux_merge (INT numbers[], $/;"	language:C	signature:(INT numbers[], INT work[], INT left, INT mid, INT right)
fasp_aux_msort	base/src/ordering.c	/^void fasp_aux_msort (INT numbers[], $/;"	language:C	signature:(INT numbers[], INT work[], INT left, INT right)
fasp_aux_norm1_	base/src/auxiliary.c	/^void fasp_aux_norm1_ (INT *ia,$/;"	language:C	signature:(INT *ia, INT *ja, REAL *a, INT *nn, REAL *a1norm)
fasp_aux_rvecd	base/src/auxiliary.c	/^void fasp_aux_rvecd (FILE *inp,$/;"	language:C	signature:(FILE *inp, REAL *vec, INT *nn)
fasp_aux_rveci	base/src/auxiliary.c	/^void fasp_aux_rveci (FILE *inp, $/;"	language:C	signature:(FILE *inp, INT *vec, INT *nn)
fasp_aux_sh00	base/src/auxiliary.c	/^void fasp_aux_sh00 (dCSRmat *X, $/;"	language:C	signature:(dCSRmat *X, const INT ish)
fasp_aux_unique	base/src/ordering.c	/^INT fasp_aux_unique (INT numbers[], $/;"	language:C	signature:(INT numbers[], INT size)
fasp_aux_uuplv0_	base/src/auxiliary.c	/^void fasp_aux_uuplv0_ (REAL *u,$/;"	language:C	signature:(REAL *u, REAL *v, INT *n)
fasp_aux_wvecd	base/src/auxiliary.c	/^void fasp_aux_wvecd (FILE *inp,$/;"	language:C	signature:(FILE *inp, REAL *vec, INT *nn)
fasp_aux_wveci	base/src/auxiliary.c	/^void fasp_aux_wveci (FILE *inp, $/;"	language:C	signature:(FILE *inp, INT *vec, INT *nn)
fasp_blas_array_ax	base/src/blas_array.c	/^void fasp_blas_array_ax(const INT n, $/;"	language:C	signature:(const INT n, const REAL a, REAL *x)
fasp_blas_array_axpby	base/src/blas_array.c	/^void fasp_blas_array_axpby(const INT n, $/;"	language:C	signature:(const INT n, const REAL a, REAL *x, const REAL b, REAL *y)
fasp_blas_array_axpy	base/src/blas_array.c	/^void fasp_blas_array_axpy (const INT n, $/;"	language:C	signature:(const INT n, const REAL a, REAL *x, REAL *y)
fasp_blas_array_axpy_nc2	base/src/blas_smat.c	/^void fasp_blas_array_axpy_nc2 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y)
fasp_blas_array_axpy_nc3	base/src/blas_smat.c	/^void fasp_blas_array_axpy_nc3 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y)
fasp_blas_array_axpy_nc5	base/src/blas_smat.c	/^void fasp_blas_array_axpy_nc5 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y)
fasp_blas_array_axpy_nc7	base/src/blas_smat.c	/^void fasp_blas_array_axpy_nc7 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y)
fasp_blas_array_axpyz	base/src/blas_array.c	/^void fasp_blas_array_axpyz (const INT n, $/;"	language:C	signature:(const INT n, const REAL a, REAL *x, REAL *y, REAL *z)
fasp_blas_array_axpyz_nc2	base/src/blas_smat.c	/^void fasp_blas_array_axpyz_nc2 (REAL a, $/;"	language:C	signature:(REAL a, REAL *x, REAL *y, REAL *z)
fasp_blas_array_axpyz_nc3	base/src/blas_smat.c	/^void fasp_blas_array_axpyz_nc3 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y, REAL *z)
fasp_blas_array_axpyz_nc5	base/src/blas_smat.c	/^void fasp_blas_array_axpyz_nc5 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y, REAL *z)
fasp_blas_array_axpyz_nc7	base/src/blas_smat.c	/^void fasp_blas_array_axpyz_nc7 (const REAL a, $/;"	language:C	signature:(const REAL a, REAL *x, REAL *y, REAL *z)
fasp_blas_array_dotprod	base/src/blas_array.c	/^REAL fasp_blas_array_dotprod(const INT n, $/;"	language:C	signature:(const INT n, REAL *x, REAL *y)
fasp_blas_array_norm1	base/src/blas_array.c	/^REAL fasp_blas_array_norm1 (const INT n, $/;"	language:C	signature:(const INT n, REAL *x)
fasp_blas_array_norm2	base/src/blas_array.c	/^REAL fasp_blas_array_norm2 (const INT n, $/;"	language:C	signature:(const INT n, REAL *x)
fasp_blas_array_norminf	base/src/blas_array.c	/^REAL fasp_blas_array_norminf (const INT n, $/;"	language:C	signature:(const INT n, REAL *x)
fasp_blas_bdbsr_aAxpy	base/src/blas_block.c	/^void fasp_blas_bdbsr_aAxpy (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, block_BSR *A, REAL *x, REAL *y)
fasp_blas_bdbsr_mxv	base/src/blas_block.c	/^void fasp_blas_bdbsr_mxv (block_BSR *A, $/;"	language:C	signature:(block_BSR *A, REAL *x, REAL *y)
fasp_blas_bdcsr_aAxpy	base/src/blas_block.c	/^void fasp_blas_bdcsr_aAxpy (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, block_dCSRmat *A, REAL *x, REAL *y)
fasp_blas_dbsr_aAxpby	base/src/blas_bsr.c	/^void fasp_blas_dbsr_aAxpby (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, dBSRmat *A, REAL *x, const REAL beta, REAL *y )
fasp_blas_dbsr_aAxpy	base/src/blas_bsr.c	/^void fasp_blas_dbsr_aAxpy (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, dBSRmat *A, REAL *x, REAL *y)
fasp_blas_dbsr_mxv	base/src/blas_bsr.c	/^void fasp_blas_dbsr_mxv(dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, REAL *x, REAL *y)
fasp_blas_dbsr_rap	base/src/blas_bsr.c	/^void fasp_blas_dbsr_rap (dBSRmat *R, $/;"	language:C	signature:(dBSRmat *R, dBSRmat *A, dBSRmat *P, dBSRmat *B)
fasp_blas_dcsr_aAxpy	base/src/blas_csr.c	/^void fasp_blas_dcsr_aAxpy (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, dCSRmat *A, REAL *x, REAL *y)
fasp_blas_dcsr_aAxpy_agg	base/src/blas_csr.c	/^void fasp_blas_dcsr_aAxpy_agg (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, dCSRmat *A, REAL *x, REAL *y)
fasp_blas_dcsr_add	base/src/blas_csr.c	/^INT fasp_blas_dcsr_add (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, const REAL alpha, dCSRmat *B, const REAL beta, dCSRmat *C)
fasp_blas_dcsr_axm	base/src/blas_csr.c	/^void fasp_blas_dcsr_axm (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, const REAL alpha)
fasp_blas_dcsr_mxm	base/src/blas_csr.c	/^void fasp_blas_dcsr_mxm (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *B, dCSRmat *C)
fasp_blas_dcsr_mxv	base/src/blas_csr.c	/^void fasp_blas_dcsr_mxv (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, REAL *x, REAL *y)
fasp_blas_dcsr_mxv_agg	base/src/blas_csr.c	/^void fasp_blas_dcsr_mxv_agg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, REAL *x, REAL *y)
fasp_blas_dcsr_ptap	base/src/blas_csr.c	/^void fasp_blas_dcsr_ptap (dCSRmat *Pt,$/;"	language:C	signature:(dCSRmat *Pt, dCSRmat *A, dCSRmat *P, dCSRmat *Ac)
fasp_blas_dcsr_rap	base/src/blas_csr.c	/^void fasp_blas_dcsr_rap( dCSRmat  *R,$/;"	language:C	signature:( dCSRmat *R, dCSRmat *A, dCSRmat *P, dCSRmat *RAP)
fasp_blas_dcsr_rap2	base/src/rap.c	/^dCSRmat fasp_blas_dcsr_rap2 (INT *ir, $/;"	language:C	signature:(INT *ir, INT *jr, REAL *r, INT *ia, INT *ja, REAL *a, INT *ipt, INT *jpt, REAL *pt, INT n, INT nc, INT *maxrpout, INT *ipin, INT *jpin)
fasp_blas_dcsr_rap4	base/src/blas_csr.c	/^void fasp_blas_dcsr_rap4 (dCSRmat *R, $/;"	language:C	signature:(dCSRmat *R, dCSRmat *A, dCSRmat *P, dCSRmat *B, INT *icor_ysk)
fasp_blas_dcsr_rap_agg	base/src/blas_csr.c	/^void fasp_blas_dcsr_rap_agg (dCSRmat *R, $/;"	language:C	signature:(dCSRmat *R, dCSRmat *A, dCSRmat *P, dCSRmat *B)
fasp_blas_dcsr_vmv	base/src/blas_csr.c	/^REAL fasp_blas_dcsr_vmv (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, REAL *x, REAL *y)
fasp_blas_dcsrl_mxv	base/src/blas_csrl.c	/^void fasp_blas_dcsrl_mxv (dCSRLmat *A, $/;"	language:C	signature:(dCSRLmat *A, REAL *x, REAL *y)
fasp_blas_dstr_aAxpy	base/src/blas_str.c	/^void fasp_blas_dstr_aAxpy (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
fasp_blas_dvec_axpy	base/src/blas_vec.c	/^void fasp_blas_dvec_axpy (const REAL a, $/;"	language:C	signature:(const REAL a, dvector *x, dvector *y)
fasp_blas_dvec_axpyz	base/src/blas_vec.c	/^void fasp_blas_dvec_axpyz(const REAL a, $/;"	language:C	signature:(const REAL a, dvector *x, dvector *y, dvector *z)
fasp_blas_dvec_dotprod	base/src/blas_vec.c	/^REAL fasp_blas_dvec_dotprod (dvector *x, $/;"	language:C	signature:(dvector *x, dvector *y)
fasp_blas_dvec_norm1	base/src/blas_vec.c	/^REAL fasp_blas_dvec_norm1 (dvector *x) $/;"	language:C	signature:(dvector *x)
fasp_blas_dvec_norm2	base/src/blas_vec.c	/^REAL fasp_blas_dvec_norm2 (dvector *x)$/;"	language:C	signature:(dvector *x)
fasp_blas_dvec_norminf	base/src/blas_vec.c	/^REAL fasp_blas_dvec_norminf (dvector *x)$/;"	language:C	signature:(dvector *x)
fasp_blas_dvec_relerr	base/src/blas_vec.c	/^REAL fasp_blas_dvec_relerr (dvector *x, $/;"	language:C	signature:(dvector *x, dvector *y)
fasp_blas_smat_aAxpby	base/src/blas_smat.c	/^void fasp_blas_smat_aAxpby (const REAL alpha, $/;"	language:C	signature:(const REAL alpha, REAL *A, REAL *x, const REAL beta, REAL *y, const INT n )
fasp_blas_smat_inv	base/src/smat.c	/^INT fasp_blas_smat_inv (REAL *a, $/;"	language:C	signature:(REAL *a, const INT n)
fasp_blas_smat_inv_nc2	base/src/smat.c	/^void fasp_blas_smat_inv_nc2 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_blas_smat_inv_nc3	base/src/smat.c	/^void fasp_blas_smat_inv_nc3 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_blas_smat_inv_nc5	base/src/smat.c	/^void fasp_blas_smat_inv_nc5 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_blas_smat_inv_nc7	base/src/smat.c	/^void fasp_blas_smat_inv_nc7 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_blas_smat_mul	base/src/blas_smat.c	/^void fasp_blas_smat_mul (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c, const INT n)
fasp_blas_smat_mul_nc2	base/src/blas_smat.c	/^void fasp_blas_smat_mul_nc2 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mul_nc3	base/src/blas_smat.c	/^void fasp_blas_smat_mul_nc3 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mul_nc5	base/src/blas_smat.c	/^void fasp_blas_smat_mul_nc5 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mul_nc7	base/src/blas_smat.c	/^void fasp_blas_smat_mul_nc7 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mxv	base/src/blas_smat.c	/^void fasp_blas_smat_mxv (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c, const INT n)
fasp_blas_smat_mxv_nc2	base/src/blas_smat.c	/^void fasp_blas_smat_mxv_nc2 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mxv_nc3	base/src/blas_smat.c	/^void fasp_blas_smat_mxv_nc3 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mxv_nc5	base/src/blas_smat.c	/^void fasp_blas_smat_mxv_nc5 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_mxv_nc7	base/src/blas_smat.c	/^void fasp_blas_smat_mxv_nc7 (REAL *a, $/;"	language:C	signature:(REAL *a, REAL *b, REAL *c)
fasp_blas_smat_ymAx	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y, INT n)
fasp_blas_smat_ymAx_nc2	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_nc2 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_nc3	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_nc3 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_nc5	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_nc5 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_nc7	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_nc7 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_ns	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_ns (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y, const INT n)
fasp_blas_smat_ymAx_ns2	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_ns2 (REAL *A,$/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_ns3	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_ns3 (REAL *A,$/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_ns5	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_ns5 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ymAx_ns7	base/src/blas_smat.c	/^void fasp_blas_smat_ymAx_ns7 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_blas_smat_ypAx	base/src/blas_smat.c	/^void fasp_blas_smat_ypAx (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y, const INT n)
fasp_blas_smat_ypAx_nc2	base/src/blas_smat.c	/^void fasp_blas_smat_ypAx_nc2 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y )
fasp_blas_smat_ypAx_nc3	base/src/blas_smat.c	/^void fasp_blas_smat_ypAx_nc3 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y )
fasp_blas_smat_ypAx_nc5	base/src/blas_smat.c	/^void fasp_blas_smat_ypAx_nc5 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y )
fasp_blas_smat_ypAx_nc7	base/src/blas_smat.c	/^void fasp_blas_smat_ypAx_nc7 (REAL *A, $/;"	language:C	signature:(REAL *A, REAL *x, REAL *y)
fasp_check_dCSRmat	base/src/checkmat.c	/^SHORT fasp_check_dCSRmat (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_check_diagdom	base/src/checkmat.c	/^INT fasp_check_diagdom (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_check_diagpos	base/src/checkmat.c	/^INT fasp_check_diagpos (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_check_diagzero	base/src/checkmat.c	/^SHORT fasp_check_diagzero (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_check_iCSRmat	base/src/checkmat.c	/^SHORT fasp_check_iCSRmat (iCSRmat *A)$/;"	language:C	signature:(iCSRmat *A)
fasp_check_symm	base/src/checkmat.c	/^INT fasp_check_symm (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_chkerr	base/src/message.c	/^void fasp_chkerr (const SHORT status, $/;"	language:C	signature:(const SHORT status, const char *fctname)
fasp_coarse_itsolver	base/src/mg_util.inl	/^static void fasp_coarse_itsolver (dCSRmat *A,$/;"	language:C++	signature:(dCSRmat *A, dvector *b, dvector *x, const REAL ctol, const SHORT prt_lvl)
fasp_dbsr_alloc	base/src/sparse_bsr.c	/^void fasp_dbsr_alloc (INT ROW, $/;"	language:C	signature:(INT ROW, INT COL, INT NNZ, INT nb, INT storage_manner, dBSRmat *A)
fasp_dbsr_cp	base/src/sparse_bsr.c	/^void fasp_dbsr_cp (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dBSRmat *B)
fasp_dbsr_create	base/src/sparse_bsr.c	/^dBSRmat fasp_dbsr_create (INT ROW, $/;"	language:C	signature:(INT ROW, INT COL, INT NNZ, INT nb, INT storage_manner)
fasp_dbsr_diaginv	base/src/sparse_bsr.c	/^dBSRmat fasp_dbsr_diaginv (dBSRmat *A)$/;"	language:C	signature:(dBSRmat *A)
fasp_dbsr_diaginv2	base/src/sparse_bsr.c	/^dBSRmat fasp_dbsr_diaginv2 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, REAL *diaginv)
fasp_dbsr_diaginv3	base/src/sparse_bsr.c	/^dBSRmat fasp_dbsr_diaginv3 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, REAL *diaginv)
fasp_dbsr_diaginv4	base/src/sparse_bsr.c	/^dBSRmat fasp_dbsr_diaginv4 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, REAL *diaginv)
fasp_dbsr_diagpref	base/src/sparse_bsr.c	/^SHORT fasp_dbsr_diagpref (dBSRmat *A)$/;"	language:C	signature:(dBSRmat *A)
fasp_dbsr_free	base/src/sparse_bsr.c	/^void fasp_dbsr_free (dBSRmat *A)$/;"	language:C	signature:(dBSRmat *A)
fasp_dbsr_getblk	base/src/sparse_block.c	/^SHORT fasp_dbsr_getblk (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, INT *Is, INT *Js, INT m, INT n, dBSRmat *B)
fasp_dbsr_getblk_dcsr	base/src/sparse_block.c	/^dCSRmat fasp_dbsr_getblk_dcsr(dBSRmat *A)$/;"	language:C	signature:(dBSRmat *A)
fasp_dbsr_getdiag	base/src/sparse_bsr.c	/^void fasp_dbsr_getdiag (INT n, $/;"	language:C	signature:(INT n, dBSRmat *A, REAL *diag )
fasp_dbsr_null	base/src/sparse_bsr.c	/^void fasp_dbsr_null (dBSRmat *A)$/;"	language:C	signature:(dBSRmat *A)
fasp_dbsr_read	base/src/io.c	/^void fasp_dbsr_read (char *filename, $/;"	language:C	signature:(char *filename, dBSRmat *A)
fasp_dbsr_trans	base/src/sparse_bsr.c	/^INT fasp_dbsr_trans (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dBSRmat *AT)
fasp_dbsr_write	base/src/io.c	/^void fasp_dbsr_write (char *filename, $/;"	language:C	signature:(char *filename, dBSRmat *A)
fasp_dcoo_create	base/src/sparse_coo.c	/^dCOOmat fasp_dcoo_create (INT m, $/;"	language:C	signature:(INT m, INT n, INT nnz)
fasp_dcoo_free	base/src/sparse_coo.c	/^void fasp_dcoo_free (dCOOmat *A)$/;"	language:C	signature:(dCOOmat *A)
fasp_dcoo_read	base/src/io.c	/^void fasp_dcoo_read (char *filename, $/;"	language:C	signature:(char *filename, dCSRmat *A)
fasp_dcoo_shift	base/src/sparse_coo.c	/^void fasp_dcoo_shift (dCOOmat *A,$/;"	language:C	signature:(dCOOmat *A, INT offset)
fasp_dcsr_alloc	base/src/sparse_csr.c	/^void fasp_dcsr_alloc (const INT m, $/;"	language:C	signature:(const INT m, const INT n, const INT nnz, dCSRmat *A)
fasp_dcsr_compress	base/src/sparse_csr.c	/^void fasp_dcsr_compress (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *B, REAL dtol)
fasp_dcsr_compress_inplace	base/src/sparse_csr.c	/^SHORT fasp_dcsr_compress_inplace (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, REAL dtol)
fasp_dcsr_cp	base/src/sparse_csr.c	/^void fasp_dcsr_cp (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *B)
fasp_dcsr_create	base/src/sparse_csr.c	/^dCSRmat fasp_dcsr_create (const INT m, $/;"	language:C	signature:(const INT m, const INT n, const INT nnz)
fasp_dcsr_diagpref	base/src/sparse_csr.c	/^void fasp_dcsr_diagpref (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_dcsr_eig	base/src/eigen.c	/^REAL fasp_dcsr_eig (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, const REAL tol, const INT maxit)
fasp_dcsr_free	base/src/sparse_csr.c	/^void fasp_dcsr_free (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_dcsr_getblk	base/src/sparse_block.c	/^SHORT fasp_dcsr_getblk (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, INT *Is, INT *Js, INT m, INT n, dCSRmat *B)
fasp_dcsr_getcol	base/src/sparse_csr.c	/^void fasp_dcsr_getcol (const INT n, $/;"	language:C	signature:(const INT n, dCSRmat *A, REAL *col)
fasp_dcsr_getdiag	base/src/sparse_csr.c	/^void fasp_dcsr_getdiag (INT n, $/;"	language:C	signature:(INT n, dCSRmat *A, dvector *diag)
fasp_dcsr_null	base/src/sparse_csr.c	/^void fasp_dcsr_null (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_dcsr_perm	base/src/sparse_csr.c	/^dCSRmat fasp_dcsr_perm (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, INT *P)
fasp_dcsr_plot	base/src/graphics.c	/^void fasp_dcsr_plot (const dCSRmat *A, $/;"	language:C	signature:(const dCSRmat *A, const char *filename, INT size)
fasp_dcsr_postsmoothing	base/src/mg_util.inl	/^static void fasp_dcsr_postsmoothing (const SHORT smoother,$/;"	language:C++	signature:(const SHORT smoother, dCSRmat *A, dvector *b, dvector *x, const INT nsweeps, const INT istart, const INT iend, const INT istep, const REAL relax, const SHORT ndeg, const SHORT order, INT *ordering)
fasp_dcsr_presmoothing	base/src/mg_util.inl	/^static void fasp_dcsr_presmoothing (const SHORT smoother,$/;"	language:C++	signature:(const SHORT smoother, dCSRmat *A, dvector *b, dvector *x, const INT nsweeps, const INT istart, const INT iend, const INT istep, const REAL relax, const SHORT ndeg, const SHORT order, INT *ordering)
fasp_dcsr_print	base/src/io.c	/^void fasp_dcsr_print (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_dcsr_read	base/src/io.c	/^void fasp_dcsr_read (char *filename, $/;"	language:C	signature:(char *filename, dCSRmat *A)
fasp_dcsr_regdiag	base/src/sparse_csr.c	/^SHORT fasp_dcsr_regdiag (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, REAL value)
fasp_dcsr_shift	base/src/sparse_csr.c	/^void fasp_dcsr_shift (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, INT offset)
fasp_dcsr_sort	base/src/sparse_csr.c	/^void fasp_dcsr_sort (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_dcsr_symdiagscale	base/src/sparse_csr.c	/^void fasp_dcsr_symdiagscale (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *diag)
fasp_dcsr_sympat	base/src/sparse_csr.c	/^dCSRmat fasp_dcsr_sympat(dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_dcsr_trans	base/src/sparse_csr.c	/^INT fasp_dcsr_trans (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *AT)
fasp_dcsr_transpose	base/src/sparse_csr.c	/^void fasp_dcsr_transpose (INT *row[2], $/;"	language:C	signature:(INT *row[2], INT *col[2], REAL *val[2], INT *nn, INT *tniz)
fasp_dcsr_write	base/src/io.c	/^void fasp_dcsr_write (char *filename, $/;"	language:C	signature:(char *filename, dCSRmat *A)
fasp_dcsrl_create	base/src/sparse_csrl.c	/^dCSRLmat * fasp_dcsrl_create (INT num_rows, $/;"	language:C	signature:(INT num_rows, INT num_cols, INT num_nonzeros)
fasp_dcsrl_free	base/src/sparse_csrl.c	/^void fasp_dcsrl_free (dCSRLmat *A)$/;"	language:C	signature:(dCSRLmat *A)
fasp_dcsrvec1_read	base/src/io.c	/^void fasp_dcsrvec1_read (char *filename,$/;"	language:C	signature:(char *filename, dCSRmat *A, dvector *b)
fasp_dcsrvec1_write	base/src/io.c	/^void fasp_dcsrvec1_write (char *filename,$/;"	language:C	signature:(char *filename, dCSRmat *A, dvector *b)
fasp_dcsrvec2_read	base/src/io.c	/^void fasp_dcsrvec2_read (char *filemat, $/;"	language:C	signature:(char *filemat, char *filerhs, dCSRmat *A, dvector *b )
fasp_dcsrvec2_write	base/src/io.c	/^void fasp_dcsrvec2_write (char *filemat, $/;"	language:C	signature:(char *filemat, char *filerhs, dCSRmat *A, dvector *b )
fasp_dmtx_read	base/src/io.c	/^void fasp_dmtx_read (char *filename, $/;"	language:C	signature:(char *filename, dCSRmat *A)
fasp_dmtxsym_read	base/src/io.c	/^void fasp_dmtxsym_read (char *filename, $/;"	language:C	signature:(char *filename, dCSRmat *A)
fasp_dstr_alloc	base/src/sparse_str.c	/^void fasp_dstr_alloc (INT nx, $/;"	language:C	signature:(INT nx, INT ny, INT nz, INT nxy, INT ngrid, INT nband, INT nc, INT *offsets, dSTRmat *A)
fasp_dstr_cp	base/src/sparse_str.c	/^void fasp_dstr_cp (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dSTRmat *A1)
fasp_dstr_create	base/src/sparse_str.c	/^dSTRmat fasp_dstr_create (INT nx, $/;"	language:C	signature:(INT nx, INT ny, INT nz, INT nc, INT nband, INT *offsets)
fasp_dstr_diagscale	base/src/blas_str.c	/^INT fasp_dstr_diagscale (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dSTRmat *B)
fasp_dstr_free	base/src/sparse_str.c	/^void fasp_dstr_free (dSTRmat *A)$/;"	language:C	signature:(dSTRmat *A)
fasp_dstr_null	base/src/sparse_str.c	/^void fasp_dstr_null (dSTRmat *A)$/;"	language:C	signature:(dSTRmat *A)
fasp_dstr_read	base/src/io.c	/^void fasp_dstr_read (char *filename,$/;"	language:C	signature:(char *filename, dSTRmat *A)
fasp_dstr_write	base/src/io.c	/^void fasp_dstr_write (char *filename, $/;"	language:C	signature:(char *filename, dSTRmat *A)
fasp_dvec_alloc	base/src/vec.c	/^void fasp_dvec_alloc (const INT m, $/;"	language:C	signature:(const INT m, dvector *u)
fasp_dvec_cp	base/src/vec.c	/^void fasp_dvec_cp (dvector *x, $/;"	language:C	signature:(dvector *x, dvector *y)
fasp_dvec_create	base/src/vec.c	/^dvector fasp_dvec_create (const INT m)$/;"	language:C	signature:(const INT m)
fasp_dvec_free	base/src/vec.c	/^void fasp_dvec_free (dvector *u)$/;"	language:C	signature:(dvector *u)
fasp_dvec_maxdiff	base/src/vec.c	/^REAL fasp_dvec_maxdiff (dvector *x, $/;"	language:C	signature:(dvector *x, dvector *y)
fasp_dvec_null	base/src/vec.c	/^void fasp_dvec_null (dvector *x) $/;"	language:C	signature:(dvector *x)
fasp_dvec_print	base/src/io.c	/^void fasp_dvec_print (INT n, $/;"	language:C	signature:(INT n, dvector *u)
fasp_dvec_rand	base/src/vec.c	/^void fasp_dvec_rand (const INT n, $/;"	language:C	signature:(const INT n, dvector *x)
fasp_dvec_read	base/src/io.c	/^void fasp_dvec_read (char *filename, $/;"	language:C	signature:(char *filename, dvector *b)
fasp_dvec_set	base/src/vec.c	/^void fasp_dvec_set (INT n, $/;"	language:C	signature:(INT n, dvector *x, REAL val)
fasp_dvec_symdiagscale	base/src/vec.c	/^void fasp_dvec_symdiagscale (dvector *b, $/;"	language:C	signature:(dvector *b, dvector *diag)
fasp_dvec_write	base/src/io.c	/^void fasp_dvec_write (char *filename,$/;"	language:C	signature:(char *filename, dvector *vec)
fasp_dvecind_read	base/src/io.c	/^void fasp_dvecind_read (char *filename,$/;"	language:C	signature:(char *filename, dvector *b)
fasp_dvecind_write	base/src/io.c	/^void fasp_dvecind_write (char *filename,$/;"	language:C	signature:(char *filename, dvector *vec)
fasp_famg_solve	base/src/amg_solve.c	/^void fasp_famg_solve (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_format_bdcsr_dcsr	base/src/formats.c	/^dCSRmat fasp_format_bdcsr_dcsr (block_dCSRmat *Ab)$/;"	language:C	signature:(block_dCSRmat *Ab)
fasp_format_dbsr_dcoo	base/src/formats.c	/^dCOOmat * fasp_format_dbsr_dcoo (dBSRmat *B)$/;"	language:C	signature:(dBSRmat *B)
fasp_format_dbsr_dcsr	base/src/formats.c	/^dCSRmat fasp_format_dbsr_dcsr(dBSRmat *B)$/;"	language:C	signature:(dBSRmat *B)
fasp_format_dcoo_dcsr	base/src/formats.c	/^SHORT fasp_format_dcoo_dcsr (dCOOmat *A, $/;"	language:C	signature:(dCOOmat *A, dCSRmat *B)
fasp_format_dcsr_dbsr	base/src/formats.c	/^dBSRmat fasp_format_dcsr_dbsr (dCSRmat *B, $/;"	language:C	signature:(dCSRmat *B, const INT nb)
fasp_format_dcsr_dcoo	base/src/formats.c	/^SHORT fasp_format_dcsr_dcoo (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCOOmat *B)
fasp_format_dcsrl_dcsr	base/src/formats.c	/^dCSRLmat * fasp_format_dcsrl_dcsr (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_format_dstr_dbsr	base/src/formats.c	/^dBSRmat fasp_format_dstr_dbsr (dSTRmat *B)$/;"	language:C	signature:(dSTRmat *B)
fasp_format_dstr_dcsr	base/src/formats.c	/^SHORT fasp_format_dstr_dcsr (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dCSRmat *B_ptr)
fasp_fwrapper_amg_	base/src/wrapper.c	/^void fasp_fwrapper_amg_ (INT *n, $/;"	language:C	signature:(INT *n, INT *nnz, INT *ia, INT *ja, REAL *a, REAL *b, REAL *u, REAL *tol, INT *maxit, INT *ptrlvl)
fasp_fwrapper_krylov_amg_	base/src/wrapper.c	/^void fasp_fwrapper_krylov_amg_ (INT *n, $/;"	language:C	signature:(INT *n, INT *nnz, INT *ia, INT *ja, REAL *a, REAL *b, REAL *u, REAL *tol, INT *maxit, INT *ptrlvl)
fasp_gauss2d	base/src/quadrature.c	/^void fasp_gauss2d (INT num_qp, $/;"	language:C	signature:(INT num_qp, INT ncoor, REAL (*gauss)[3])
fasp_generate_diaginv_block	base/src/smoother_str.c	/^void fasp_generate_diaginv_block (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, ivector *neigh, dvector *diaginv, ivector *pivot)
fasp_get_icor_ysk	base/src/interpolation.c	/^static void fasp_get_icor_ysk(INT nrows, $/;"	language:C	signature:(INT nrows, INT ncols, INT *CoarseIndex, INT nbl_ysk, INT nbr_ysk, INT *CF_marker, INT *icor_ysk)
fasp_get_nbl_nbr_ysk	base/src/interpolation.c	/^static void fasp_get_nbl_nbr_ysk( dCSRmat *A, $/;"	language:C	signature:( dCSRmat *A, INT *nbl_ptr, INT *nbr_ptr )
fasp_grid2d_plot	base/src/graphics.c	/^void fasp_grid2d_plot (pgrid2d pg, $/;"	language:C	signature:(pgrid2d pg, INT level)
fasp_iarray_cp	base/src/array.c	/^void fasp_iarray_cp (const INT n, $/;"	language:C	signature:(const INT n, INT *x, INT *y)
fasp_iarray_set	base/src/array.c	/^void fasp_iarray_set(const INT n, $/;"	language:C	signature:(const INT n, INT *x, const INT val)
fasp_icsr_free	base/src/sparse_csr.c	/^void fasp_icsr_free (iCSRmat *A)$/;"	language:C	signature:(iCSRmat *A)
fasp_icsr_trans	base/src/sparse_csr.c	/^void fasp_icsr_trans (iCSRmat *A, $/;"	language:C	signature:(iCSRmat *A, iCSRmat *AT)
fasp_iden_free	base/src/smat.c	/^void fasp_iden_free (idenmat *A)$/;"	language:C	signature:(idenmat *A)
fasp_ilu_data_alloc	base/src/init.c	/^void fasp_ilu_data_alloc (INT iwk, $/;"	language:C	signature:(INT iwk, INT nwork, ILU_data *iludata)
fasp_ilu_data_free	base/src/init.c	/^void fasp_ilu_data_free (ILU_data *ILUdata)$/;"	language:C	signature:(ILU_data *ILUdata)
fasp_ilu_data_null	base/src/init.c	/^void fasp_ilu_data_null (ILU_data *ILUdata)$/;"	language:C	signature:(ILU_data *ILUdata)
fasp_ilu_dbsr_setup	base/src/ilu_setup_bsr.c	/^SHORT fasp_ilu_dbsr_setup (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, ILU_data *iludata, ILU_param *iluparam)
fasp_ilu_dcsr_setup	base/src/ilu_setup.c	/^SHORT fasp_ilu_dcsr_setup (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ILU_data *iludata, ILU_param *iluparam)
fasp_ilu_dstr_setup0	base/src/ilu_setup_str.c	/^void fasp_ilu_dstr_setup0 (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dSTRmat *LU)
fasp_ilu_dstr_setup1	base/src/ilu_setup_str.c	/^void fasp_ilu_dstr_setup1 (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dSTRmat *LU)
fasp_ivec_alloc	base/src/vec.c	/^void fasp_ivec_alloc (const INT m, $/;"	language:C	signature:(const INT m, ivector *u)
fasp_ivec_create	base/src/vec.c	/^ivector fasp_ivec_create (const INT m)$/;"	language:C	signature:(const INT m)
fasp_ivec_free	base/src/vec.c	/^void fasp_ivec_free (ivector *u)$/;"	language:C	signature:(ivector *u)
fasp_ivec_print	base/src/io.c	/^void fasp_ivec_print (INT n, $/;"	language:C	signature:(INT n, ivector *u)
fasp_ivec_read	base/src/io.c	/^void fasp_ivec_read (char *filename, $/;"	language:C	signature:(char *filename, ivector *b)
fasp_ivec_set	base/src/vec.c	/^void fasp_ivec_set (const INT m, $/;"	language:C	signature:(const INT m, ivector *u)
fasp_ivec_write	base/src/io.c	/^void fasp_ivec_write (char *filename, $/;"	language:C	signature:(char *filename, ivector *vec)
fasp_ivecind_read	base/src/io.c	/^void fasp_ivecind_read (char *filename, $/;"	language:C	signature:(char *filename, ivector *b)
fasp_mem_calloc	base/src/memory.c	/^void * fasp_mem_calloc (INT size, $/;"	language:C	signature:(INT size, INT type)
fasp_mem_check	base/src/memory.c	/^SHORT fasp_mem_check (void *ptr, $/;"	language:C	signature:(void *ptr, char *message, INT ERR)
fasp_mem_dcsr_check	base/src/memory.c	/^SHORT fasp_mem_dcsr_check (dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_mem_free	base/src/memory.c	/^void fasp_mem_free (void * mem)$/;"	language:C	signature:(void * mem)
fasp_mem_iludata_check	base/src/memory.c	/^SHORT fasp_mem_iludata_check (ILU_data *iludata)$/;"	language:C	signature:(ILU_data *iludata)
fasp_mem_realloc	base/src/memory.c	/^void * fasp_mem_realloc (void * oldmem, $/;"	language:C	signature:(void * oldmem, INT tsize)
fasp_mem_usage	base/src/memory.c	/^void fasp_mem_usage ()$/;"	language:C
fasp_mod_coarse_index	base/src/interpolation.c	/^static void fasp_mod_coarse_index( INT nrows, $/;"	language:C	signature:( INT nrows, INT *CoarseIndex)
fasp_param_amg_init	base/src/parameters.c	/^void fasp_param_amg_init (AMG_param *amgparam)$/;"	language:C	signature:(AMG_param *amgparam)
fasp_param_amg_print	base/src/parameters.c	/^void fasp_param_amg_print (AMG_param *param)$/;"	language:C	signature:(AMG_param *param)
fasp_param_amg_set	base/src/parameters.c	/^void fasp_param_amg_set (AMG_param *param, $/;"	language:C	signature:(AMG_param *param, input_param *inparam)
fasp_param_amg_to_prec	base/src/parameters.c	/^void fasp_param_amg_to_prec (precond_data *pcdata, $/;"	language:C	signature:(precond_data *pcdata, AMG_param *amgparam)
fasp_param_amg_to_prec_bsr	base/src/parameters.c	/^void fasp_param_amg_to_prec_bsr (precond_data_bsr *pcdata, $/;"	language:C	signature:(precond_data_bsr *pcdata, AMG_param *amgparam)
fasp_param_ilu_init	base/src/parameters.c	/^void fasp_param_ilu_init (ILU_param *iluparam)$/;"	language:C	signature:(ILU_param *iluparam)
fasp_param_ilu_print	base/src/parameters.c	/^void fasp_param_ilu_print (ILU_param *param)$/;"	language:C	signature:(ILU_param *param)
fasp_param_ilu_set	base/src/parameters.c	/^void fasp_param_ilu_set (ILU_param *iluparam, $/;"	language:C	signature:(ILU_param *iluparam, input_param *inparam)
fasp_param_init	base/src/parameters.c	/^void fasp_param_init (char *inputfile, $/;"	language:C	signature:(char *inputfile, input_param *inparam, itsolver_param *itparam, AMG_param *amgparam, ILU_param *iluparam, Schwarz_param *schwarzparam)
fasp_param_input	base/src/input.c	/^void fasp_param_input (char *filenm, $/;"	language:C	signature:(char *filenm, input_param *Input)
fasp_param_input_init	base/src/parameters.c	/^void fasp_param_input_init (input_param *inparam)$/;"	language:C	signature:(input_param *inparam)
fasp_param_prec_to_amg	base/src/parameters.c	/^void fasp_param_prec_to_amg (AMG_param *amgparam,$/;"	language:C	signature:(AMG_param *amgparam, precond_data *pcdata)
fasp_param_prec_to_amg_bsr	base/src/parameters.c	/^void fasp_param_prec_to_amg_bsr (AMG_param *amgparam,$/;"	language:C	signature:(AMG_param *amgparam, precond_data_bsr *pcdata)
fasp_param_schwarz_init	base/src/parameters.c	/^void fasp_param_schwarz_init (Schwarz_param *schwarzparam)$/;"	language:C	signature:(Schwarz_param *schwarzparam)
fasp_param_schwarz_print	base/src/parameters.c	/^void fasp_param_schwarz_print (Schwarz_param *param)$/;"	language:C	signature:(Schwarz_param *param)
fasp_param_schwarz_set	base/src/parameters.c	/^void fasp_param_schwarz_set (Schwarz_param *schwarzparam, $/;"	language:C	signature:(Schwarz_param *schwarzparam, input_param *inparam)
fasp_param_solver_init	base/src/parameters.c	/^void fasp_param_solver_init (itsolver_param *itparam)$/;"	language:C	signature:(itsolver_param *itparam)
fasp_param_solver_print	base/src/parameters.c	/^void fasp_param_solver_print (itsolver_param *param)$/;"	language:C	signature:(itsolver_param *param)
fasp_param_solver_set	base/src/parameters.c	/^void fasp_param_solver_set (itsolver_param *itparam, $/;"	language:C	signature:(itsolver_param *itparam, input_param *inparam)
fasp_precond_amg	base/src/precond_csr.c	/^void fasp_precond_amg (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_amli	base/src/precond_csr.c	/^void fasp_precond_amli (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_data_null	base/src/parameters.c	/^void fasp_precond_data_null (precond_data *pcdata)$/;"	language:C	signature:(precond_data *pcdata)
fasp_precond_dbsr_amg	base/src/precond_bsr.c	/^void fasp_precond_dbsr_amg (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_diag	base/src/precond_bsr.c	/^void fasp_precond_dbsr_diag (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_diag_nc2	base/src/precond_bsr.c	/^void fasp_precond_dbsr_diag_nc2(REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_diag_nc3	base/src/precond_bsr.c	/^void fasp_precond_dbsr_diag_nc3(REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_diag_nc5	base/src/precond_bsr.c	/^void fasp_precond_dbsr_diag_nc5(REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_diag_nc7	base/src/precond_bsr.c	/^void fasp_precond_dbsr_diag_nc7 (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_ilu	base/src/precond_bsr.c	/^void fasp_precond_dbsr_ilu (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dbsr_nl_amli	base/src/precond_bsr.c	/^void fasp_precond_dbsr_nl_amli (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_diag	base/src/precond_csr.c	/^void fasp_precond_diag (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_blockgs	base/src/precond_str.c	/^void fasp_precond_dstr_blockgs (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_diag	base/src/precond_str.c	/^void fasp_precond_dstr_diag (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_ilu0	base/src/precond_str.c	/^void fasp_precond_dstr_ilu0 (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_ilu0_backward	base/src/precond_str.c	/^void fasp_precond_dstr_ilu0_backward (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_ilu0_forward	base/src/precond_str.c	/^void fasp_precond_dstr_ilu0_forward (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_ilu1	base/src/precond_str.c	/^void fasp_precond_dstr_ilu1 (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_ilu1_backward	base/src/precond_str.c	/^void fasp_precond_dstr_ilu1_backward (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_dstr_ilu1_forward	base/src/precond_str.c	/^void fasp_precond_dstr_ilu1_forward (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_famg	base/src/precond_csr.c	/^void fasp_precond_famg (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_ilu	base/src/precond_csr.c	/^void fasp_precond_ilu (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_ilu_backward	base/src/precond_csr.c	/^void fasp_precond_ilu_backward (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_ilu_forward	base/src/precond_csr.c	/^void fasp_precond_ilu_forward (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_nl_amli	base/src/precond_csr.c	/^void fasp_precond_nl_amli (REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_null	base/src/init.c	/^void fasp_precond_null (precond *pcdata)$/;"	language:C	signature:(precond *pcdata)
fasp_precond_schwarz	base/src/precond_csr.c	/^void fasp_precond_schwarz(REAL *r, $/;"	language:C	signature:(REAL *r, REAL *z, void *data)
fasp_precond_setup	base/src/precond_csr.c	/^precond *fasp_precond_setup (SHORT precond_type, $/;"	language:C	signature:(SHORT precond_type, AMG_param *amgparam, ILU_param *iluparam, dCSRmat *A)
fasp_quad2d	base/src/quadrature.c	/^void fasp_quad2d (INT num_qp, $/;"	language:C	signature:(INT num_qp, INT ncoor, REAL (*quad)[3])
fasp_schwarz_data_free	base/src/init.c	/^void fasp_schwarz_data_free (Schwarz_data *schwarz)$/;"	language:C	signature:(Schwarz_data *schwarz)
fasp_schwarz_setup	base/src/schwarz_setup.c	/^INT fasp_schwarz_setup (Schwarz_data *schwarz, $/;"	language:C	signature:(Schwarz_data *schwarz, INT mmsize, INT maxlev, INT schwarz_type)
fasp_set_GS_threads	base/src/itsolver_bsr.c	/^void fasp_set_GS_threads(INT mythreads, INT its)$/;"	language:C	signature:(INT mythreads, INT its)
fasp_smat_identity	base/src/smat.c	/^void fasp_smat_identity (REAL *a, $/;"	language:C	signature:(REAL *a, INT n, INT n2)
fasp_smat_identity_nc2	base/src/smat.c	/^void fasp_smat_identity_nc2 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_smat_identity_nc3	base/src/smat.c	/^void fasp_smat_identity_nc3 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_smat_identity_nc5	base/src/smat.c	/^void fasp_smat_identity_nc5 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_smat_identity_nc7	base/src/smat.c	/^void fasp_smat_identity_nc7 (REAL *a)$/;"	language:C	signature:(REAL *a)
fasp_smat_lu_decomp	base/src/lu.c	/^SHORT fasp_smat_lu_decomp (REAL *A, $/;"	language:C	signature:(REAL *A, INT pivot[], INT n)
fasp_smat_lu_solve	base/src/lu.c	/^SHORT fasp_smat_lu_solve (REAL *A, $/;"	language:C	signature:(REAL *A, REAL b[], INT pivot[], REAL x[], INT n)
fasp_smoother_dbsr_gs	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_gs (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, INT order, INT *mark )
fasp_smoother_dbsr_gs1	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_gs1 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, INT order, INT *mark, REAL *diaginv )
fasp_smoother_dbsr_gs_ascend	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_gs_ascend (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv )
fasp_smoother_dbsr_gs_descend	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_gs_descend (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv )
fasp_smoother_dbsr_gs_order1	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_gs_order1 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv, INT *mark )
fasp_smoother_dbsr_gs_order2	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_gs_order2 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, INT *mark, REAL *work)
fasp_smoother_dbsr_ilu	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_ilu (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, void *data)
fasp_smoother_dbsr_jacobi	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_jacobi (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u)
fasp_smoother_dbsr_jacobi1	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_jacobi1 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv)
fasp_smoother_dbsr_sor	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_sor (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, INT order, INT *mark, REAL weight)
fasp_smoother_dbsr_sor1	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_sor1 (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, INT order, INT *mark, REAL *diaginv, REAL weight)
fasp_smoother_dbsr_sor_ascend	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_sor_ascend (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv, REAL weight )
fasp_smoother_dbsr_sor_descend	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_sor_descend (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv, REAL weight)
fasp_smoother_dbsr_sor_order	base/src/smoother_bsr.c	/^void fasp_smoother_dbsr_sor_order (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, REAL *diaginv, INT *mark, REAL weight )
fasp_smoother_dcsr_L1diag	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_L1diag (dvector *u, $/;"	language:C	signature:(dvector *u, const INT i_1, const INT i_n, const INT s, dCSRmat *A, dvector *b, INT L)
fasp_smoother_dcsr_gs	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_gs (dvector *u, $/;"	language:C	signature:(dvector *u, const INT i_1, const INT i_n, const INT s, dCSRmat *A, dvector *b, INT L)
fasp_smoother_dcsr_gs_cf	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_gs_cf (dvector *u, $/;"	language:C	signature:(dvector *u, dCSRmat *A, dvector *b, INT L, INT *mark, INT order)
fasp_smoother_dcsr_gs_rb3d	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_gs_rb3d (dvector *u, $/;"	language:C	signature:(dvector *u, dCSRmat *A, dvector *b, INT L, INT order, INT *mark, INT maximap, INT nx, INT ny, INT nz )
fasp_smoother_dcsr_gscr	base/src/smoother_cr.c	/^void fasp_smoother_dcsr_gscr (INT pt, $/;"	language:C	signature:(INT pt, INT n, REAL *u, INT *ia, INT *ja, REAL *a, REAL *b, INT L, INT *CF)
fasp_smoother_dcsr_ilu	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_ilu (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, void *data)
fasp_smoother_dcsr_jacobi	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_jacobi (dvector *u, $/;"	language:C	signature:(dvector *u, const INT i_1, const INT i_n, const INT s, dCSRmat *A, dvector *b, INT L)
fasp_smoother_dcsr_kaczmarz	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_kaczmarz (dvector *u, $/;"	language:C	signature:(dvector *u, const INT i_1, const INT i_n, const INT s, dCSRmat *A, dvector *b, INT L, const REAL w)
fasp_smoother_dcsr_poly	base/src/smoother_poly.c	/^void fasp_smoother_dcsr_poly (dCSRmat *Amat, $/;"	language:C	signature:(dCSRmat *Amat, dvector *brhs, dvector *usol, INT n, INT ndeg, INT L)
fasp_smoother_dcsr_poly_old	base/src/smoother_poly.c	/^void fasp_smoother_dcsr_poly_old (dCSRmat *Amat, $/;"	language:C	signature:(dCSRmat *Amat, dvector *brhs, dvector *usol, INT n, INT ndeg, INT L)
fasp_smoother_dcsr_sgs	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_sgs (dvector *u, $/;"	language:C	signature:(dvector *u, dCSRmat *A, dvector *b, INT L)
fasp_smoother_dcsr_sor	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_sor (dvector *u, $/;"	language:C	signature:(dvector *u, const INT i_1, const INT i_n, const INT s, dCSRmat *A, dvector *b, INT L, const REAL w)
fasp_smoother_dcsr_sor_cf	base/src/smoother_csr.c	/^void fasp_smoother_dcsr_sor_cf (dvector *u, $/;"	language:C	signature:(dvector *u, dCSRmat *A, dvector *b, INT L, const REAL w, INT *mark, const INT order )
fasp_smoother_dstr_gs	base/src/smoother_str.c	/^void fasp_smoother_dstr_gs (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, INT order, INT *mark)
fasp_smoother_dstr_gs1	base/src/smoother_str.c	/^void fasp_smoother_dstr_gs1 (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, INT order, INT *mark, REAL *diaginv)
fasp_smoother_dstr_gs_ascend	base/src/smoother_str.c	/^void fasp_smoother_dstr_gs_ascend (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv)
fasp_smoother_dstr_gs_cf	base/src/smoother_str.c	/^void fasp_smoother_dstr_gs_cf (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv, INT *mark, INT order)
fasp_smoother_dstr_gs_descend	base/src/smoother_str.c	/^void fasp_smoother_dstr_gs_descend (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv)
fasp_smoother_dstr_gs_order	base/src/smoother_str.c	/^void fasp_smoother_dstr_gs_order (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv, INT *mark)
fasp_smoother_dstr_jacobi	base/src/smoother_str.c	/^void fasp_smoother_dstr_jacobi (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u)
fasp_smoother_dstr_jacobi1	base/src/smoother_str.c	/^void fasp_smoother_dstr_jacobi1 (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv)
fasp_smoother_dstr_schwarz	base/src/smoother_str.c	/^void fasp_smoother_dstr_schwarz (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, dvector *diaginv, ivector *pivot, ivector *neigh, ivector *order)
fasp_smoother_dstr_sor	base/src/smoother_str.c	/^void fasp_smoother_dstr_sor (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, INT order, INT *mark, REAL weight)
fasp_smoother_dstr_sor1	base/src/smoother_str.c	/^void fasp_smoother_dstr_sor1(dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, INT order, INT *mark, REAL *diaginv, REAL weight)
fasp_smoother_dstr_sor_ascend	base/src/smoother_str.c	/^void fasp_smoother_dstr_sor_ascend(dSTRmat *A,$/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv, REAL weight)
fasp_smoother_dstr_sor_cf	base/src/smoother_str.c	/^void fasp_smoother_dstr_sor_cf (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv, INT *mark, INT order, REAL weight)
fasp_smoother_dstr_sor_descend	base/src/smoother_str.c	/^void fasp_smoother_dstr_sor_descend (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv, REAL weight)
fasp_smoother_dstr_sor_order	base/src/smoother_str.c	/^void fasp_smoother_dstr_sor_order (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, REAL *diaginv, INT *mark, REAL weight)
fasp_solver_amg	base/src/amg.c	/^void fasp_solver_amg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, AMG_param *param)
fasp_solver_amli	base/src/amlirecur.c	/^void fasp_solver_amli (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param, INT level)
fasp_solver_bdcsr_itsolver	base/src/itsolver_bcsr.c	/^INT fasp_solver_bdcsr_itsolver (block_dCSRmat *A, $/;"	language:C	signature:(block_dCSRmat *A, dvector *b, dvector *x, precond *pc, itsolver_param *itparam)
fasp_solver_bdcsr_krylov	base/src/itsolver_bcsr.c	/^INT fasp_solver_bdcsr_krylov (block_dCSRmat *A, $/;"	language:C	signature:(block_dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_bdcsr_pbcgs	base/src/pbcgs.c	/^INT fasp_solver_bdcsr_pbcgs (block_dCSRmat *A, $/;"	language:C	signature:(block_dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_bdcsr_pcg	base/src/pcg.c	/^INT fasp_solver_bdcsr_pcg (block_dCSRmat *A, $/;"	language:C	signature:(block_dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_bdcsr_pgmres	base/src/pgmres.c	/^INT fasp_solver_bdcsr_pgmres (block_dCSRmat *A, $/;"	language:C	signature:(block_dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_bdcsr_pminres	base/src/pminres.c	/^INT fasp_solver_bdcsr_pminres (block_dCSRmat *A, $/;"	language:C	signature:(block_dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dbsr_itsolver	base/src/itsolver_bsr.c	/^INT fasp_solver_dbsr_itsolver (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, precond *pc, itsolver_param *itparam)
fasp_solver_dbsr_krylov	base/src/itsolver_bsr.c	/^INT fasp_solver_dbsr_krylov (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_dbsr_krylov_amg	base/src/itsolver_bsr.c	/^INT fasp_solver_dbsr_krylov_amg (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, itsolver_param *itparam, AMG_param *amgparam)
fasp_solver_dbsr_krylov_diag	base/src/itsolver_bsr.c	/^INT fasp_solver_dbsr_krylov_diag (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_dbsr_krylov_ilu	base/src/itsolver_bsr.c	/^INT fasp_solver_dbsr_krylov_ilu (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, itsolver_param *itparam, ILU_param *iluparam)
fasp_solver_dbsr_pbcgs	base/src/pbcgs.c	/^INT fasp_solver_dbsr_pbcgs(dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dbsr_pgmres	base/src/pgmres.c	/^INT fasp_solver_dbsr_pgmres (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dbsr_pvfgmres	base/src/pvfgmres.c	/^INT fasp_solver_dbsr_pvfgmres (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dbsr_pvgmres	base/src/pvgmres.c	/^INT fasp_solver_dbsr_pvgmres (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_itsolver	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_itsolver (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, precond *pc, itsolver_param *itparam)
fasp_solver_dcsr_krylov	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_krylov (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_dcsr_krylov_amg	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_krylov_amg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam, AMG_param *amgparam)
fasp_solver_dcsr_krylov_diag	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_krylov_diag (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_dcsr_krylov_ilu	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_krylov_ilu (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam, ILU_param *iluparam)
fasp_solver_dcsr_krylov_ilu_M	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_krylov_ilu_M (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam, ILU_param *iluparam, dCSRmat *M)
fasp_solver_dcsr_krylov_schwarz	base/src/itsolver_csr.c	/^INT fasp_solver_dcsr_krylov_schwarz (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, itsolver_param *itparam, INT schwarz_mmsize, INT schwarz_maxlvl, INT schwarz_type)
fasp_solver_dcsr_pbcgs	base/src/pbcgs.c	/^INT fasp_solver_dcsr_pbcgs (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_pcg	base/src/pcg.c	/^INT fasp_solver_dcsr_pcg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_pgcg	base/src/pgcg.c	/^INT fasp_solver_dcsr_pgcg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_pgmres	base/src/pgmres.c	/^INT fasp_solver_dcsr_pgmres (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_pminres	base/src/pminres.c	/^INT fasp_solver_dcsr_pminres (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_pvfgmres	base/src/pvfgmres.c	/^INT fasp_solver_dcsr_pvfgmres (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dcsr_pvgmres	base/src/pvgmres.c	/^INT fasp_solver_dcsr_pvgmres (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dstr_itsolver	base/src/itsolver_str.c	/^INT fasp_solver_dstr_itsolver (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, precond *pc, itsolver_param *itparam)
fasp_solver_dstr_krylov	base/src/itsolver_str.c	/^INT fasp_solver_dstr_krylov (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_dstr_krylov_blockgs	base/src/itsolver_str.c	/^INT fasp_solver_dstr_krylov_blockgs (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, itsolver_param *itparam, ivector *neigh, ivector *order)
fasp_solver_dstr_krylov_diag	base/src/itsolver_str.c	/^INT fasp_solver_dstr_krylov_diag (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, itsolver_param *itparam)
fasp_solver_dstr_krylov_ilu	base/src/itsolver_str.c	/^INT fasp_solver_dstr_krylov_ilu (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, itsolver_param *itparam, ILU_param *iluparam)
fasp_solver_dstr_pbcgs	base/src/pbcgs.c	/^INT fasp_solver_dstr_pbcgs (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dstr_pcg	base/src/pcg.c	/^INT fasp_solver_dstr_pcg (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *u, precond *pc, const REAL tol, const INT MaxIt, const SHORT stop_type, const SHORT print_level)
fasp_solver_dstr_pgmres	base/src/pgmres.c	/^INT fasp_solver_dstr_pgmres (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_dstr_pvgmres	base/src/pvgmres.c	/^INT fasp_solver_dstr_pvgmres (dSTRmat *A, $/;"	language:C	signature:(dSTRmat *A, dvector *b, dvector *x, precond *pc, const REAL tol, const INT MaxIt, const SHORT restart, const SHORT stop_type, const SHORT print_level)
fasp_solver_famg	base/src/famg.c	/^void fasp_solver_famg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, dvector *x, AMG_param *param)
fasp_solver_fmgcycle	base/src/fmgcycle.c	/^void fasp_solver_fmgcycle (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_solver_mgcycle	base/src/mgcycle.c	/^void fasp_solver_mgcycle (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
fasp_solver_mgcycle_bsr	base/src/mgcycle.c	/^void fasp_solver_mgcycle_bsr (AMG_data_bsr *mgl, $/;"	language:C	signature:(AMG_data_bsr *mgl, AMG_param *param)
fasp_solver_mgrecur	base/src/mgrecur.c	/^void fasp_solver_mgrecur (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param, INT level)
fasp_solver_nl_amli	base/src/amlirecur.c	/^void fasp_solver_nl_amli (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, AMG_param *param, INT level, INT num_levels)
fasp_solver_nl_amli_bsr	base/src/amlirecur.c	/^void fasp_solver_nl_amli_bsr (AMG_data_bsr *mgl, $/;"	language:C	signature:(AMG_data_bsr *mgl, AMG_param *param, INT level, INT num_levels)
fasp_sparse_MIS	base/src/sparse_util.c	/^ivector fasp_sparse_MIS(dCSRmat *A)$/;"	language:C	signature:(dCSRmat *A)
fasp_sparse_aat_	base/src/sparse_util.c	/^void fasp_sparse_aat_ (INT *ia, $/;"	language:C	signature:(INT *ia, INT *ja, REAL *a, INT *na, INT *ma, INT *iat, INT *jat, REAL *at)
fasp_sparse_abyb_	base/src/sparse_util.c	/^void fasp_sparse_abyb_ (INT *ia,$/;"	language:C	signature:(INT *ia, INT *ja, REAL *a, INT *ib, INT *jb, REAL *b, INT *nap, INT *map, INT *mbp, INT *ic, INT *jc, REAL *c)
fasp_sparse_abybms_	base/src/sparse_util.c	/^void fasp_sparse_abybms_ (INT *ia,$/;"	language:C	signature:(INT *ia, INT *ja, INT *ib, INT *jb, INT *nap, INT *map, INT *mbp, INT *ic, INT *jc)
fasp_sparse_aplbms_	base/src/sparse_util.c	/^void fasp_sparse_aplbms_ (INT *ia,$/;"	language:C	signature:(INT *ia, INT *ja, INT *ib, INT *jb, INT *nab, INT *mab, INT *ic, INT *jc)
fasp_sparse_aplusb_	base/src/sparse_util.c	/^void fasp_sparse_aplusb_ (INT *ia,$/;"	language:C	signature:(INT *ia, INT *ja, REAL *a, INT *ib, INT *jb, REAL *b, INT *nab, INT *mab, INT *ic, INT *jc, REAL *c)
fasp_sparse_iit_	base/src/sparse_util.c	/^void fasp_sparse_iit_ (INT *ia, $/;"	language:C	signature:(INT *ia, INT *ja, INT *na, INT *ma, INT *iat, INT *jat)
fasp_sparse_rapcmp_	base/src/sparse_util.c	/^void fasp_sparse_rapcmp_ (INT *ir, $/;"	language:C	signature:(INT *ir, INT *jr, REAL *r, INT *ia, INT *ja, REAL *a, INT *ipt, INT *jpt, REAL *pt, INT *nin, INT *ncin, INT *iac, INT *jac, REAL *ac, INT *idummy)
fasp_sparse_rapms_	base/src/sparse_util.c	/^void fasp_sparse_rapms_ (INT *ir, $/;"	language:C	signature:(INT *ir, INT *jr, INT *ia, INT *ja, INT *ip, INT *jp, INT *nin, INT *ncin, INT *iac, INT *jac, INT *maxrout)
fasp_sparse_wta_	base/src/sparse_util.c	/^void fasp_sparse_wta_ (INT *jw, $/;"	language:C	signature:(INT *jw, REAL *w, INT *ia, INT *ja, REAL *a, INT *nwp, INT *map, INT *jv, REAL *v, INT *nvp)
fasp_sparse_wtams_	base/src/sparse_util.c	/^void fasp_sparse_wtams_ (INT *jw,$/;"	language:C	signature:(INT *jw, INT *ia, INT *ja, INT *nwp, INT *map, INT *jv, INT *nvp, INT *icp)
fasp_sparse_ytx_	base/src/sparse_util.c	/^void fasp_sparse_ytx_ (INT *jy, $/;"	language:C	signature:(INT *jy, REAL *y, INT *jx, REAL *x, INT *nyp, INT *nxp, INT *icp, REAL *s)
fasp_sparse_ytxbig_	base/src/sparse_util.c	/^void fasp_sparse_ytxbig_ (INT *jy, $/;"	language:C	signature:(INT *jy, REAL *y, INT *nyp, REAL *x, REAL *s)
fbgs2ns	base/src/schwarz.f	/^      subroutine fbgs2ns(/;"	language:Fortran
fct	base/include/fasp.h	/^	void (*fct)(REAL *, REAL *, void *);$/;"	language:C++
fct_omp	base/include/fasp.h	/^	void (*fct_omp)(REAL *, REAL *, void *, INT, INT);$/;"	language:C++
fd	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_chunk* fd;         \/* double links -- used only if free. *\/$/;"	language:C
fd	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_tree_chunk* fd;$/;"	language:C
fd	base/include/malloc.c.h	/^  struct malloc_chunk* fd;         \/* double links -- used only if free. *\/$/;"	language:C++
fd	base/include/malloc.c.h	/^  struct malloc_tree_chunk* fd;$/;"	language:C++
flag_t	base/extra/dlmalloc/dlmalloc.c	/^typedef unsigned int flag_t;           \/* The type of various bit flag sets *\/$/;"	language:C
flag_t	base/include/malloc.c.h	/^typedef unsigned int flag_t;$/;"	language:C++
fm	base/extra/dlmalloc/dlmalloc.c	4830;"	language:C
fm	base/include/malloc.c.h	4949;"	language:C++
footprint	base/extra/dlmalloc/dlmalloc.c	/^  size_t     footprint;$/;"	language:C
footprint	base/include/malloc.c.h	/^  size_t     footprint;$/;"	language:C++
forbac	base/src/factor.f	/^      subroutine forbac(/;"	language:Fortran
fordblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE fordblks; \/* total free space *\/$/;"	language:C
fordblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE fordblks; \/* total free space *\/$/;"	language:C++
fordblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE fordblks; \/* total free space *\/$/;"	language:C++
fordblks	base/include/nedmalloc.h	/^  size_t fordblks; \/* total free space *\/$/;"	language:C++
form_coarse_level	base/src/coarsening_rs.c	/^static INT form_coarse_level ( dCSRmat *A, $/;"	language:C	signature:( dCSRmat *A, iCSRmat *S, ivector *vertices, INT row, INT interpolation_type)
form_coarse_level_ag	base/src/coarsening_rs.c	/^static INT form_coarse_level_ag (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, iCSRmat *S, ivector *vertices, INT row, INT interp_type)
form_tentative_p	base/src/amg_setup_aggregation.inl	/^static void form_tentative_p (ivector *vertices, $/;"	language:C++	signature:(ivector *vertices, dCSRmat *tentp, AMG_data *mgl, INT levelNum, INT num_aggregations)
form_tentative_p_bsr	base/src/amg_setup_aggregation.inl	/^static void form_tentative_p_bsr (ivector *vertices, $/;"	language:C++	signature:(ivector *vertices, dBSRmat *tentp, AMG_data_bsr *mgl, INT levelNum, INT num_aggregations)
fsls_Band2CSRMatrix	test/src/poisson_fdm.c	/^fsls_Band2CSRMatrix (fsls_BandMatrix *B, $/;"	language:C	signature:(fsls_BandMatrix *B, fsls_CSRMatrix **A_ptr)
fsls_BandMatrix	test/include/poisson_fdm.h	/^} fsls_BandMatrix;$/;"	language:C++
fsls_BandMatrixCreate	test/src/poisson_fdm.c	/^fsls_BandMatrixCreate ( int n, int nband )$/;"	language:C	signature:( int n, int nband )
fsls_BandMatrixDataExt	test/include/poisson_fdm.h	102;"	language:C++
fsls_BandMatrixDestroy	test/src/poisson_fdm.c	/^fsls_BandMatrixDestroy (fsls_BandMatrix *matrix)$/;"	language:C	signature:(fsls_BandMatrix *matrix)
fsls_BandMatrixDiag	test/include/poisson_fdm.h	100;"	language:C++
fsls_BandMatrixInitialize	test/src/poisson_fdm.c	/^fsls_BandMatrixInitialize ( fsls_BandMatrix *matrix )$/;"	language:C	signature:( fsls_BandMatrix *matrix )
fsls_BandMatrixN	test/include/poisson_fdm.h	94;"	language:C++
fsls_BandMatrixNband	test/include/poisson_fdm.h	98;"	language:C++
fsls_BandMatrixNx	test/include/poisson_fdm.h	95;"	language:C++
fsls_BandMatrixNy	test/include/poisson_fdm.h	96;"	language:C++
fsls_BandMatrixNz	test/include/poisson_fdm.h	97;"	language:C++
fsls_BandMatrixOffdiag	test/include/poisson_fdm.h	101;"	language:C++
fsls_BandMatrixOffsets	test/include/poisson_fdm.h	99;"	language:C++
fsls_BuildLinearSystem_5pt2d	test/src/poisson_fdm.c	/^fsls_BuildLinearSystem_5pt2d (int               nt,$/;"	language:C	signature:(int nt, int nx, int ny, fsls_BandMatrix **A_ptr, fsls_XVector **f_ptr, fsls_XVector **u_ptr )
fsls_BuildLinearSystem_5pt2d_rb	test/src/poisson_fdm.c	/^fsls_BuildLinearSystem_5pt2d_rb (int               nt,$/;"	language:C	signature:(int nt, int nx, int ny, fsls_BandMatrix **A_ptr, fsls_XVector **f_ptr, fsls_XVector **u_ptr )
fsls_BuildLinearSystem_7pt3d	test/src/poisson_fdm.c	/^fsls_BuildLinearSystem_7pt3d (int               nt,$/;"	language:C	signature:(int nt, int nx, int ny, int nz, fsls_BandMatrix **A_ptr, fsls_XVector **f_ptr, fsls_XVector **u_ptr )
fsls_CAlloc	test/src/poisson_fdm.c	/^fsls_CAlloc ( size_t count, size_t elt_size )$/;"	language:C	signature:( size_t count, size_t elt_size )
fsls_COOMatrixPrint	test/src/poisson_fdm.c	/^fsls_COOMatrixPrint (fsls_CSRMatrix *matrix, $/;"	language:C	signature:(fsls_CSRMatrix *matrix, char *file_name )
fsls_CSR2FullMatrix	test/src/poisson_fdm.c	/^fsls_CSR2FullMatrix (fsls_CSRMatrix *A, $/;"	language:C	signature:(fsls_CSRMatrix *A, double **full_ptr)
fsls_CSRMatrix	test/include/poisson_fdm.h	/^} fsls_CSRMatrix;$/;"	language:C++
fsls_CSRMatrixCreate	test/src/poisson_fdm.c	/^fsls_CSRMatrixCreate (int num_rows,$/;"	language:C	signature:(int num_rows, int num_cols, int num_nonzeros)
fsls_CSRMatrixData	test/include/poisson_fdm.h	39;"	language:C++
fsls_CSRMatrixDeleteZeros	test/src/poisson_fdm.c	/^fsls_CSRMatrixDeleteZeros (fsls_CSRMatrix *A, $/;"	language:C	signature:(fsls_CSRMatrix *A, double tol)
fsls_CSRMatrixDestroy	test/src/poisson_fdm.c	/^fsls_CSRMatrixDestroy ( fsls_CSRMatrix *matrix )$/;"	language:C	signature:( fsls_CSRMatrix *matrix )
fsls_CSRMatrixI	test/include/poisson_fdm.h	40;"	language:C++
fsls_CSRMatrixInitialize	test/src/poisson_fdm.c	/^fsls_CSRMatrixInitialize ( fsls_CSRMatrix *matrix )$/;"	language:C	signature:( fsls_CSRMatrix *matrix )
fsls_CSRMatrixJ	test/include/poisson_fdm.h	41;"	language:C++
fsls_CSRMatrixNumCols	test/include/poisson_fdm.h	43;"	language:C++
fsls_CSRMatrixNumNonzeros	test/include/poisson_fdm.h	44;"	language:C++
fsls_CSRMatrixNumRownnz	test/include/poisson_fdm.h	46;"	language:C++
fsls_CSRMatrixNumRows	test/include/poisson_fdm.h	42;"	language:C++
fsls_CSRMatrixOwnsData	test/include/poisson_fdm.h	47;"	language:C++
fsls_CSRMatrixPrint	test/src/poisson_fdm.c	/^fsls_CSRMatrixPrint (fsls_CSRMatrix *matrix, $/;"	language:C	signature:(fsls_CSRMatrix *matrix, char *file_name )
fsls_CSRMatrixRownnz	test/include/poisson_fdm.h	45;"	language:C++
fsls_CTAlloc	test/include/poisson_fdm.h	20;"	language:C++
fsls_Free	test/src/poisson_fdm.c	/^fsls_Free ( char *ptr )$/;"	language:C	signature:( char *ptr )
fsls_MatrixSPGnuplot	test/src/poisson_fdm.c	/^fsls_MatrixSPGnuplot (fsls_CSRMatrix *matrix, $/;"	language:C	signature:(fsls_CSRMatrix *matrix, char *file_name )
fsls_OutOfMemory	test/src/poisson_fdm.c	/^fsls_OutOfMemory ( size_t size )$/;"	language:C	signature:( size_t size )
fsls_TFree	test/include/poisson_fdm.h	19;"	language:C++
fsls_Vector	test/include/poisson_fdm.h	/^} fsls_Vector;$/;"	language:C++
fsls_VectorData	test/include/poisson_fdm.h	60;"	language:C++
fsls_VectorIndexStride	test/include/poisson_fdm.h	66;"	language:C++
fsls_VectorMultiVecStorageMethod	test/include/poisson_fdm.h	64;"	language:C++
fsls_VectorNumVectors	test/include/poisson_fdm.h	63;"	language:C++
fsls_VectorOwnsData	test/include/poisson_fdm.h	62;"	language:C++
fsls_VectorSize	test/include/poisson_fdm.h	61;"	language:C++
fsls_VectorVectorStride	test/include/poisson_fdm.h	65;"	language:C++
fsls_WriteSAMGData	test/src/poisson_fdm.c	/^fsls_WriteSAMGData (fsls_CSRMatrix *A, $/;"	language:C	signature:(fsls_CSRMatrix *A, fsls_XVector *b, fsls_XVector *u)
fsls_XVector	test/include/poisson_fdm.h	/^} fsls_XVector;$/;"	language:C++
fsls_XVectorCreate	test/src/poisson_fdm.c	/^fsls_XVectorCreate (int size)$/;"	language:C	signature:(int size)
fsls_XVectorData	test/include/poisson_fdm.h	113;"	language:C++
fsls_XVectorDataExt	test/include/poisson_fdm.h	114;"	language:C++
fsls_XVectorDestroy	test/src/poisson_fdm.c	/^fsls_XVectorDestroy (fsls_XVector *vector)$/;"	language:C	signature:(fsls_XVector *vector)
fsls_XVectorInitialize	test/src/poisson_fdm.c	/^fsls_XVectorInitialize (fsls_XVector *vector)$/;"	language:C	signature:(fsls_XVector *vector)
fsls_XVectorPrint	test/src/poisson_fdm.c	/^fsls_XVectorPrint (fsls_XVector *vector, $/;"	language:C	signature:(fsls_XVector *vector, char *file_name)
fsls_XVectorSize	test/include/poisson_fdm.h	112;"	language:C++
fsls_dtMatrix	test/src/poisson_fdm.c	/^fsls_dtMatrix (double dt, $/;"	language:C	signature:(double dt, int n_rows, int n_cols, double *A_full)
fsls_max	test/include/poisson_fdm.h	17;"	language:C++
fsls_min	test/include/poisson_fdm.h	18;"	language:C++
fsmblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE fsmblks;  \/* always 0 *\/$/;"	language:C
fsmblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE fsmblks;  \/* always 0 *\/$/;"	language:C++
fsmblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE fsmblks;  \/* always 0 *\/$/;"	language:C++
fsmblks	base/include/nedmalloc.h	/^  size_t fsmblks;  \/* always 0 *\/$/;"	language:C++
generate_S	base/src/coarsening_rs.c	/^static void generate_S ( dCSRmat *A, $/;"	language:C	signature:( dCSRmat *A, iCSRmat *S, AMG_param *param )
generate_S_rs	base/src/coarsening_rs.c	/^void generate_S_rs (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, iCSRmat *S, REAL epsilon_str, INT coarsening_type)
generate_S_rs_ag	base/src/coarsening_rs.c	/^static void generate_S_rs_ag (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, iCSRmat *S, iCSRmat *Sh, ivector *vertices, ivector * CGPT_index, ivector *CGPT_rindex)
generate_sparsity_P	base/src/coarsening_rs.c	/^static void generate_sparsity_P ( dCSRmat *P, $/;"	language:C	signature:( dCSRmat *P, iCSRmat *S, ivector *vertices, INT row, INT col )
generate_sparsity_P_standard	base/src/coarsening_rs.c	/^static void generate_sparsity_P_standard (dCSRmat *P,$/;"	language:C	signature:(dCSRmat *P, iCSRmat *S, ivector *vertices, INT row, INT col)
genintval	base/src/interpolation.c	/^static SHORT genintval (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, INT **itmat, REAL **itmatval, INT ittniz, INT *isol, INT numiso, INT nf, INT nc)
gentisquare_nomass	base/src/interpolation.c	/^static SHORT gentisquare_nomass (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, INT mm, INT *Ii, REAL *ima, INT *mask)
get_block	base/src/interpolation.c	/^static SHORT get_block (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, INT m, INT n, INT *rows, INT *cols, REAL *Aloc, INT *mask)
get_foot	base/extra/dlmalloc/dlmalloc.c	2147;"	language:C
get_foot	base/include/malloc.c.h	2269;"	language:C++
get_l2_error_heat	test/src/heat_fem.c	/^double get_l2_error_heat (ddenmat *node,$/;"	language:C	signature:(ddenmat *node, idenmat *elem, dvector *uh, int num_qp, double t)
get_l2_error_poisson	test/src/poisson_fem.c	/^double get_l2_error_poisson (ddenmat *node,$/;"	language:C	signature:(ddenmat *node, idenmat *elem, dvector *uh, int num_qp)
get_mstate_for	base/extra/dlmalloc/dlmalloc.c	2927;"	language:C
get_mstate_for	base/include/malloc.c.h	3028;"	language:C++
getinonefull	base/src/interpolation.c	/^static SHORT getinonefull (INT **mat,$/;"	language:C	signature:(INT **mat, REAL **matval, INT *lengths, INT mm, INT *Ii, REAL *ima)
getiteval	base/src/interpolation.c	/^static SHORT getiteval (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *it)
gm	base/extra/dlmalloc/dlmalloc.c	2496;"	language:C
gm	base/include/malloc.c.h	2597;"	language:C++
gradBasisP1	test/src/basis.inl	/^void gradBasisP1 (double nodes[3][2], $/;"	language:C++	signature:(double nodes[3][2], double s, int index, double phi[2])
granularity	base/extra/dlmalloc/dlmalloc.c	/^  size_t granularity;$/;"	language:C
granularity	base/include/malloc.c.h	/^  size_t granularity;$/;"	language:C++
granularity_align	base/extra/dlmalloc/dlmalloc.c	2528;"	language:C
granularity_align	base/include/malloc.c.h	2629;"	language:C++
grid2d	base/include/fasp.h	/^typedef struct grid2d {$/;"	language:C++
grid2d	base/include/fasp.h	/^} grid2d; \/**< 2D grid type for plotting *\/$/;"	language:C++
has_segment_link	base/extra/dlmalloc/dlmalloc.c	/^static int has_segment_link(mstate m, msegmentptr ss) {$/;"	language:C	signature:(mstate m, msegmentptr ss)
has_segment_link	base/include/malloc.c.h	/^static int has_segment_link(mstate m, msegmentptr ss) {$/;"	language:C++	signature:(mstate m, msegmentptr ss)
hblkhd	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE hblkhd;   \/* space in mmapped regions *\/$/;"	language:C
hblkhd	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE hblkhd;   \/* space in mmapped regions *\/$/;"	language:C++
hblkhd	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE hblkhd;   \/* space in mmapped regions *\/$/;"	language:C++
hblkhd	base/include/nedmalloc.h	/^  size_t hblkhd;   \/* space in mmapped regions *\/$/;"	language:C++
hblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE hblks;    \/* always 0 *\/$/;"	language:C
hblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE hblks;    \/* always 0 *\/$/;"	language:C++
hblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE hblks;    \/* always 0 *\/$/;"	language:C++
hblks	base/include/nedmalloc.h	/^  size_t hblks;    \/* always 0 *\/$/;"	language:C++
head	base/extra/dlmalloc/dlmalloc.c	/^  size_t                    head;$/;"	language:C
head	base/extra/dlmalloc/dlmalloc.c	/^  size_t               head;       \/* Size and inuse bits. *\/$/;"	language:C
head	base/include/fasp.h	/^	INT head;$/;"	language:C++
head	base/include/malloc.c.h	/^  size_t                    head;$/;"	language:C++
head	base/include/malloc.c.h	/^  size_t               head;       \/* Size and inuse bits. *\/$/;"	language:C++
i	test/include/poisson_fdm.h	/^    int     *i;$/;"	language:C++
i	test/main/testf.f90	/^  in/;"	language:Fortran
i	tutorial/main/poisson-amg.f90	/^  in/;"	language:Fortran
i	tutorial/main/poisson-pcg.f90	/^  in/;"	language:Fortran
i COO format	doc/userguide.tex	/^\\subsubsection*{(i) COO format}$/;"	language:Tex
iCOOmat	base/include/fasp.h	/^typedef struct iCOOmat{$/;"	language:C++
iCOOmat	base/include/fasp.h	/^} iCOOmat; \/**< Sparse matrix of INT type in COO format *\/$/;"	language:C++
iCSRmat	base/include/fasp.h	/^typedef struct iCSRmat{$/;"	language:C++
iCSRmat	base/include/fasp.h	/^} iCSRmat; \/**< Sparse matrix of INT type in CSR format *\/$/;"	language:C++
iSwapping	base/src/ordering.c	/^static void iSwapping (INT *w, $/;"	language:C	signature:(INT *w, INT i, INT j)
ia	test/main/testf.f90	/^  integer,          dimension(:), allocatable :: ia,/;"	language:Fortran
ia	tutorial/main/poisson-amg.f90	/^  integer,          dimension(:), allocatable :: ia,/;"	language:Fortran
ia	tutorial/main/poisson-pcg.f90	/^  integer,          dimension(:), allocatable :: ia,/;"	language:Fortran
ialloc	base/extra/dlmalloc/dlmalloc.c	/^static void** ialloc(mstate m,$/;"	language:C	signature:(mstate m, size_t n_elements, size_t* sizes, int opts, void* chunks[])
ialloc	base/include/malloc.c.h	/^static void** ialloc(mstate m,$/;"	language:C++	signature:(mstate m, size_t n_elements, size_t* sizes, int opts, void* chunks[])
iblock	base/include/fasp.h	/^	INT *iblock;$/;"	language:C++
icsr_output	test/src/assemble.c	/^void icsr_output ( iCSRmat *t, iCSRmat *s )$/;"	language:C	signature:( iCSRmat *t, iCSRmat *s )
idenmat	base/include/fasp.h	/^typedef struct idenmat{$/;"	language:C++
idenmat	base/include/fasp.h	/^} idenmat; \/**< Dense matrix of INT type *\/$/;"	language:C++
idx	test/include/heat_fem.h	/^    ivector dof, bd, idx;$/;"	language:C++
idx2bit	base/extra/dlmalloc/dlmalloc.c	2771;"	language:C
idx2bit	base/include/malloc.c.h	2872;"	language:C++
idxstride	test/include/poisson_fdm.h	/^    int      vecstride, idxstride;$/;"	language:C++
ii CSR format	doc/userguide.tex	/^\\subsubsection*{(ii) CSR format}$/;"	language:Tex
iii CSRL format	doc/userguide.tex	/^\\subsubsection*{(iii) CSRL format}$/;"	language:Tex
ijlu	base/include/fasp.h	/^	INT *ijlu;   $/;"	language:C++
iluk	base/extra/sparsekit/ilu.f	/^      subroutine iluk(/;"	language:Fortran
ilut	base/extra/sparsekit/ilu.f	/^      subroutine ilut(/;"	language:Fortran
ilutp	base/extra/sparsekit/ilu.f	/^      subroutine ilutp(/;"	language:Fortran
index	base/extra/dlmalloc/dlmalloc.c	/^  bindex_t                  index;$/;"	language:C
index	base/include/fasp.h	/^	INT *index;$/;"	language:C++
index	base/include/malloc.c.h	/^  bindex_t                  index;$/;"	language:C++
indset	base/src/coarsening_cr.c	/^static INT indset(INT cand, INT cpt, INT fpt, INT *ia, INT *ja, INT n, INT *cf, REAL *ma)$/;"	language:C	signature:(INT cand, INT cpt, INT fpt, INT *ia, INT *ja, INT n, INT *cf, REAL *ma)
init_bins	base/extra/dlmalloc/dlmalloc.c	/^static void init_bins(mstate m) {$/;"	language:C	signature:(mstate m)
init_bins	base/include/malloc.c.h	/^static void init_bins(mstate m) {$/;"	language:C++	signature:(mstate m)
init_malloc_global_mutex	base/extra/dlmalloc/dlmalloc.c	/^static void init_malloc_global_mutex() {$/;"	language:C
init_malloc_global_mutex	base/include/malloc.c.h	/^static void init_malloc_global_mutex() {$/;"	language:C++	signature:()
init_mparams	base/extra/dlmalloc/dlmalloc.c	/^static int init_mparams(void) {$/;"	language:C	signature:(void)
init_mparams	base/include/malloc.c.h	/^static int init_mparams(void) {$/;"	language:C++	signature:(void)
init_top	base/extra/dlmalloc/dlmalloc.c	/^static void init_top(mstate m, mchunkptr p, size_t psize) {$/;"	language:C	signature:(mstate m, mchunkptr p, size_t psize)
init_top	base/include/malloc.c.h	/^static void init_top(mstate m, mchunkptr p, size_t psize) {$/;"	language:C++	signature:(mstate m, mchunkptr p, size_t psize)
init_user_mstate	base/extra/dlmalloc/dlmalloc.c	/^static mstate init_user_mstate(char* tbase, size_t tsize) {$/;"	language:C	signature:(char* tbase, size_t tsize)
init_user_mstate	base/include/malloc.c.h	/^static mstate init_user_mstate(char* tbase, size_t tsize) {$/;"	language:C++	signature:(char* tbase, size_t tsize)
input_param	base/include/fasp.h	/^} input_param; \/**< Input parameters *\/$/;"	language:C++
insert_chunk	base/extra/dlmalloc/dlmalloc.c	3626;"	language:C
insert_chunk	base/include/malloc.c.h	3745;"	language:C++
insert_large_chunk	base/extra/dlmalloc/dlmalloc.c	3485;"	language:C
insert_large_chunk	base/include/malloc.c.h	3604;"	language:C++
insert_small_chunk	base/extra/dlmalloc/dlmalloc.c	3412;"	language:C
insert_small_chunk	base/include/malloc.c.h	3531;"	language:C++
interlockedcompareexchange	base/extra/dlmalloc/dlmalloc.c	1362;"	language:C
interlockedcompareexchange	base/include/malloc.c.h	1382;"	language:C++
interlockedcompareexchange	base/include/malloc.c.h	1386;"	language:C++
interlockedexchange	base/extra/dlmalloc/dlmalloc.c	1363;"	language:C
interlockedexchange	base/include/malloc.c.h	1383;"	language:C++
interlockedexchange	base/include/malloc.c.h	1387;"	language:C++
internal_free	base/extra/dlmalloc/dlmalloc.c	3639;"	language:C
internal_free	base/extra/dlmalloc/dlmalloc.c	3644;"	language:C
internal_free	base/extra/dlmalloc/dlmalloc.c	3648;"	language:C
internal_free	base/include/malloc.c.h	3758;"	language:C++
internal_free	base/include/malloc.c.h	3763;"	language:C++
internal_free	base/include/malloc.c.h	3767;"	language:C++
internal_mallinfo	base/extra/dlmalloc/dlmalloc.c	/^static struct mallinfo internal_mallinfo(mstate m) {$/;"	language:C	signature:(mstate m)
internal_mallinfo	base/include/malloc.c.h	/^static struct mallinfo internal_mallinfo(mstate m) {$/;"	language:C++	signature:(mstate m)
internal_malloc	base/extra/dlmalloc/dlmalloc.c	3638;"	language:C
internal_malloc	base/extra/dlmalloc/dlmalloc.c	3642;"	language:C
internal_malloc	base/extra/dlmalloc/dlmalloc.c	3647;"	language:C
internal_malloc	base/include/malloc.c.h	3757;"	language:C++
internal_malloc	base/include/malloc.c.h	3761;"	language:C++
internal_malloc	base/include/malloc.c.h	3766;"	language:C++
internal_malloc_stats	base/extra/dlmalloc/dlmalloc.c	/^static void internal_malloc_stats(mstate m) {$/;"	language:C	signature:(mstate m)
internal_malloc_stats	base/include/malloc.c.h	/^static void internal_malloc_stats(mstate m) {$/;"	language:C++	signature:(mstate m)
internal_memalign	base/extra/dlmalloc/dlmalloc.c	/^static void* internal_memalign(mstate m, size_t alignment, size_t bytes) {$/;"	language:C	signature:(mstate m, size_t alignment, size_t bytes)
internal_memalign	base/include/malloc.c.h	/^static void* internal_memalign(mstate m, size_t alignment, size_t bytes) {$/;"	language:C++	signature:(mstate m, size_t alignment, size_t bytes)
internal_realloc	base/extra/dlmalloc/dlmalloc.c	/^static void* internal_realloc(mstate m, void* oldmem, size_t bytes) {$/;"	language:C	signature:(mstate m, void* oldmem, size_t bytes)
internal_realloc	base/include/malloc.c.h	/^static void* internal_realloc(mstate m, void* oldmem, size_t bytes) {$/;"	language:C++	signature:(mstate m, void* oldmem, size_t bytes)
interp_EM	base/src/interpolation.c	/^void interp_EM (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ivector *vertices, dCSRmat *P, AMG_param *param)
interp_RS	base/src/interpolation.c	/^static void interp_RS( dCSRmat *A, $/;"	language:C	signature:( dCSRmat *A, ivector *vertices, dCSRmat *Ptr, AMG_param *param )
interp_RS1	base/src/interpolation.c	/^static void interp_RS1(dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ivector *vertices, dCSRmat *Ptr, AMG_param *param, INT *icor_ysk)
interp_RS2	base/src/interpolation.c	/^static void interp_RS2(dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ivector *vertices, dCSRmat *Ptr, AMG_param *param)
interp_STD	base/src/interpolation.c	/^static void interp_STD (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, ivector *vertices, dCSRmat *P, iCSRmat *S, AMG_param *param)
interpolation_type	base/include/fasp.h	/^	SHORT interpolation_type;$/;"	language:C++
invS	base/include/fasp_block.h	/^	REAL *invS;$/;"	language:C++
invden	base/src/interpolation.c	/^static SHORT invden (INT nn, $/;"	language:C	signature:(INT nn, REAL *mat, REAL *invmat)
is_aligned	base/extra/dlmalloc/dlmalloc.c	1456;"	language:C
is_aligned	base/include/malloc.c.h	1480;"	language:C++
is_extern_segment	base/extra/dlmalloc/dlmalloc.c	2344;"	language:C
is_extern_segment	base/include/malloc.c.h	2466;"	language:C++
is_global	base/extra/dlmalloc/dlmalloc.c	2497;"	language:C
is_global	base/include/malloc.c.h	2598;"	language:C++
is_granularity_aligned	base/extra/dlmalloc/dlmalloc.c	2545;"	language:C
is_granularity_aligned	base/include/malloc.c.h	2646;"	language:C++
is_initialized	base/extra/dlmalloc/dlmalloc.c	2501;"	language:C
is_initialized	base/include/malloc.c.h	2602;"	language:C++
is_inuse	base/extra/dlmalloc/dlmalloc.c	2128;"	language:C
is_inuse	base/include/malloc.c.h	2250;"	language:C++
is_mmapped	base/extra/dlmalloc/dlmalloc.c	2129;"	language:C
is_mmapped	base/include/malloc.c.h	2251;"	language:C++
is_mmapped_segment	base/extra/dlmalloc/dlmalloc.c	2343;"	language:C
is_mmapped_segment	base/include/malloc.c.h	2465;"	language:C++
is_page_aligned	base/extra/dlmalloc/dlmalloc.c	2543;"	language:C
is_page_aligned	base/include/malloc.c.h	2644;"	language:C++
is_small	base/extra/dlmalloc/dlmalloc.c	2679;"	language:C
is_small	base/include/malloc.c.h	2780;"	language:C++
itsolver_maxit	base/include/fasp.h	/^	INT itsolver_maxit; \/**< maximal number of iterations for iterative solvers *\/$/;"	language:C++
itsolver_param	base/include/fasp.h	/^} itsolver_param; \/**< Parameters for iterative solvers *\/ $/;"	language:C++
itsolver_tol	base/include/fasp.h	/^	REAL itsolver_tol; \/**< tolerance for iterative linear solver *\/$/;"	language:C++
itsolver_type	base/include/fasp.h	/^	SHORT itsolver_type; \/**< solver type: see message.h *\/$/;"	language:C++
iufile	test/main/testf.f90	/^  integer          :: iufile,/;"	language:Fortran
iufile	tutorial/main/poisson-amg.f90	/^  integer          :: iufile,/;"	language:Fortran
iufile	tutorial/main/poisson-pcg.f90	/^  integer          :: iufile,/;"	language:Fortran
iv Block sparse matrix formats	doc/userguide.tex	/^\\subsubsection*{(iv) Block sparse matrix formats}$/;"	language:Tex
ivec_output	test/src/assemble.c	/^void ivec_output ( ivector *t, ivector *s )$/;"	language:C	signature:( ivector *t, ivector *s )
ivector	base/include/fasp.h	/^typedef struct ivector{$/;"	language:C++
ivector	base/include/fasp.h	/^} ivector; \/**< Vector of INT type *\/$/;"	language:C++
j	test/include/poisson_fdm.h	/^    int     *j;$/;"	language:C++
ja	base/include/fasp.h	/^	INT *ja;$/;"	language:C++
ja	test/main/testf.f90	/^  integer,          dimension(:), allocatable :: ia,ja$/;"	language:Fortran
ja	tutorial/main/poisson-amg.f90	/^  integer,          dimension(:), allocatable :: ia, ja$/;"	language:Fortran
ja	tutorial/main/poisson-pcg.f90	/^  integer,          dimension(:), allocatable :: ia,ja$/;"	language:Fortran
jblock	base/include/fasp.h	/^	INT *jblock;$/;"	language:C++
keepcost	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE keepcost; \/* releasable (via malloc_trim) space *\/$/;"	language:C
keepcost	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE keepcost; \/* releasable (via malloc_trim) space *\/$/;"	language:C++
keepcost	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE keepcost; \/* releasable (via malloc_trim) space *\/$/;"	language:C++
keepcost	base/include/nedmalloc.h	/^  size_t keepcost; \/* releasable (via malloc_trim) space *\/$/;"	language:C++
l	base/extra/dlmalloc/dlmalloc.c	/^  volatile long l;$/;"	language:C
l	base/extra/dlmalloc/dlmalloc.c	/^  volatile unsigned int l;$/;"	language:C
l	base/include/malloc.c.h	/^  volatile long l;$/;"	language:C++
l	base/include/malloc.c.h	/^  volatile unsigned int l;$/;"	language:C++
largepagesavailable	base/include/malloc.c.h	/^static int largepagesavailable = 1;$/;"	language:C++
lastAlignedmmap	base/include/malloc.c.h	/^static void* lastAlignedmmap; \/* Used as a hint *\/$/;"	language:C++
lastWin32mmap	base/include/malloc.c.h	/^static void* lastWin32mmap; \/* Used as a hint *\/$/;"	language:C++
least_addr	base/extra/dlmalloc/dlmalloc.c	/^  char*      least_addr;$/;"	language:C
least_addr	base/include/malloc.c.h	/^  char*      least_addr;$/;"	language:C++
least_bit	base/extra/dlmalloc/dlmalloc.c	2783;"	language:C
least_bit	base/include/malloc.c.h	2884;"	language:C++
left_bits	base/extra/dlmalloc/dlmalloc.c	2786;"	language:C
left_bits	base/include/malloc.c.h	2887;"	language:C++
leftmost_child	base/extra/dlmalloc/dlmalloc.c	2277;"	language:C
leftmost_child	base/include/malloc.c.h	2399;"	language:C++
leftshift_for_tree_index	base/extra/dlmalloc/dlmalloc.c	2758;"	language:C
leftshift_for_tree_index	base/include/malloc.c.h	2859;"	language:C++
linked_list	base/include/fasp.h	/^typedef struct linked_list$/;"	language:C++
localb	test/src/heat_fem.c	/^static void localb (double (*node)[2],$/;"	language:C	signature:(double (*node)[2], double *b, int num_qp, int nt, double dt)
localb	test/src/poisson_fem.c	/^static void localb (double (*node)[DIM],$/;"	language:C	signature:(double (*node)[DIM], double *b, int num_qp)
luval	base/include/fasp.h	/^	REAL *luval;$/;"	language:C++
magic	base/extra/dlmalloc/dlmalloc.c	/^  size_t     magic;$/;"	language:C
magic	base/extra/dlmalloc/dlmalloc.c	/^  volatile size_t magic;$/;"	language:C
magic	base/include/malloc.c.h	/^  size_t     magic;$/;"	language:C++
magic	base/include/malloc.c.h	/^  volatile size_t magic;$/;"	language:C++
main	test/main/regression.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/test.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/test_rsamg_omp.c	/^main(int argc, const char * argv[])$/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testbsr.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testfdm2d.cpp	/^main( int argc, char *argv[])$/;"	language:C++	signature:( int argc, char *argv[])
main	test/main/testfdm3d.cpp	/^main( int argc, char *argv[])$/;"	language:C++	signature:( int argc, char *argv[])
main	test/main/testfem.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testheat.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testmat.c	/^int main(int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testmm.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testomp.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	test/main/testrap.c	/^int main(int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	tutorial/main/poisson-amg.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	tutorial/main/poisson-its.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	tutorial/main/poisson-pcg.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
main	tutorial/main/spe01-its.c	/^int main (int argc, const char * argv[]) $/;"	language:C	signature:(int argc, const char * argv[])
mallinfo	base/extra/dlmalloc/dlmalloc.c	/^struct mallinfo {$/;"	language:C
mallinfo	base/include/dlmalloc.h	/^struct mallinfo {$/;"	language:C++
mallinfo	base/include/malloc.c.h	/^struct mallinfo {$/;"	language:C++
malloc_chunk	base/extra/dlmalloc/dlmalloc.c	/^struct malloc_chunk {$/;"	language:C
malloc_chunk	base/include/malloc.c.h	/^struct malloc_chunk {$/;"	language:C++
malloc_corruption_error_count	base/extra/dlmalloc/dlmalloc.c	/^int malloc_corruption_error_count;$/;"	language:C
malloc_corruption_error_count	base/include/malloc.c.h	/^int malloc_corruption_error_count;$/;"	language:C++
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1394;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1398;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1401;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1407;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1411;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1413;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1417;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1420;"	language:C
malloc_getpagesize	base/extra/dlmalloc/dlmalloc.c	1422;"	language:C
malloc_getpagesize	base/include/malloc.c.h	1418;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1422;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1425;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1431;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1435;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1437;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1441;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1444;"	language:C++
malloc_getpagesize	base/include/malloc.c.h	1446;"	language:C++
malloc_global_mutex	base/extra/dlmalloc/dlmalloc.c	/^static MLOCK_T malloc_global_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	language:C
malloc_global_mutex	base/extra/dlmalloc/dlmalloc.c	/^static MLOCK_T malloc_global_mutex = { 0, 0, 0};$/;"	language:C
malloc_global_mutex	base/extra/dlmalloc/dlmalloc.c	/^static MLOCK_T malloc_global_mutex;$/;"	language:C
malloc_global_mutex	base/include/malloc.c.h	/^static MLOCK_T malloc_global_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	language:C++
malloc_global_mutex	base/include/malloc.c.h	/^static MLOCK_T malloc_global_mutex = { 0, "", 0, 0};$/;"	language:C++
malloc_global_mutex	base/include/malloc.c.h	/^static MLOCK_T malloc_global_mutex = {0, "", 0, 0};$/;"	language:C++
malloc_global_mutex	base/include/malloc.c.h	/^static MLOCK_T malloc_global_mutex;$/;"	language:C++
malloc_global_mutex_status	base/extra/dlmalloc/dlmalloc.c	/^static volatile long malloc_global_mutex_status;$/;"	language:C
malloc_global_mutex_status	base/include/malloc.c.h	/^static volatile long malloc_global_mutex_status;$/;"	language:C++
malloc_params	base/extra/dlmalloc/dlmalloc.c	/^struct malloc_params {$/;"	language:C
malloc_params	base/include/malloc.c.h	/^struct malloc_params {$/;"	language:C++
malloc_segment	base/extra/dlmalloc/dlmalloc.c	/^struct malloc_segment {$/;"	language:C
malloc_segment	base/include/malloc.c.h	/^struct malloc_segment {$/;"	language:C++
malloc_state	base/extra/dlmalloc/dlmalloc.c	/^struct malloc_state {$/;"	language:C
malloc_state	base/include/malloc.c.h	/^struct malloc_state {$/;"	language:C++
malloc_tree_chunk	base/extra/dlmalloc/dlmalloc.c	/^struct malloc_tree_chunk {$/;"	language:C
malloc_tree_chunk	base/include/malloc.c.h	/^struct malloc_tree_chunk {$/;"	language:C++
mark_inuse_foot	base/extra/dlmalloc/dlmalloc.c	2903;"	language:C
mark_inuse_foot	base/extra/dlmalloc/dlmalloc.c	2924;"	language:C
mark_inuse_foot	base/include/malloc.c.h	3004;"	language:C++
mark_inuse_foot	base/include/malloc.c.h	3025;"	language:C++
mark_smallmap	base/extra/dlmalloc/dlmalloc.c	2774;"	language:C
mark_smallmap	base/include/malloc.c.h	2875;"	language:C++
mark_treemap	base/extra/dlmalloc/dlmalloc.c	2778;"	language:C
mark_treemap	base/include/malloc.c.h	2879;"	language:C++
mask	base/include/fasp.h	/^	INT *mask;$/;"	language:C++
max_aggregation	base/include/fasp.h	/^	INT max_aggregation;$/;"	language:C++
max_footprint	base/extra/dlmalloc/dlmalloc.c	/^  size_t     max_footprint;$/;"	language:C
max_footprint	base/include/malloc.c.h	/^  size_t     max_footprint;$/;"	language:C++
max_levels	base/include/fasp.h	/^	SHORT max_levels;$/;"	language:C++
max_levels	base/include/fasp_block.h	/^	INT max_levels;$/;"	language:C++
max_levels	base/include/fasp_block.h	/^	SHORT max_levels;$/;"	language:C++
max_row_sum	base/include/fasp.h	/^	REAL max_row_sum;$/;"	language:C++
maxa	base/include/fasp.h	/^	INT *maxa;$/;"	language:C++
maxit	base/include/fasp.h	/^	INT   maxit;         \/**< max number of iterations *\/$/;"	language:C++
maxit	base/include/fasp.h	/^	INT maxit;$/;"	language:C++
maxit	base/include/fasp_block.h	/^	INT  maxit; \/**< max number of iterations *\/$/;"	language:C++
maxit	base/include/fasp_block.h	/^	INT maxit;$/;"	language:C++
maxit	test/main/testf.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl, maxit,/;"	language:Fortran
maxit	tutorial/main/poisson-amg.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl, maxit$/;"	language:Fortran
maxit	tutorial/main/poisson-pcg.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl, maxit$/;"	language:Fortran
maxit_AMG	base/include/fasp_block.h	/^	INT maxit_AMG;$/;"	language:C++
mchunk	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_chunk  mchunk;$/;"	language:C
mchunk	base/include/malloc.c.h	/^typedef struct malloc_chunk  mchunk;$/;"	language:C++
mchunkptr	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_chunk* mchunkptr;$/;"	language:C
mchunkptr	base/include/malloc.c.h	/^typedef struct malloc_chunk* mchunkptr;$/;"	language:C++
mem2chunk	base/extra/dlmalloc/dlmalloc.c	2089;"	language:C
mem2chunk	base/include/malloc.c.h	2211;"	language:C++
memt	base/include/fasp.h	/^	INT memt;$/;"	language:C++
meshIn	test/include/misc.h	/^    char meshIn[128];$/;"	language:C++
meshOut	test/include/misc.h	/^    char meshOut[128];$/;"	language:C++
mesh_aux_build	test/src/mesh.c	/^int mesh_aux_build(Mesh *mesh, Mesh_aux *mesh_aux)$/;"	language:C	signature:(Mesh *mesh, Mesh_aux *mesh_aux)
mesh_aux_free	test/src/mesh.c	/^int mesh_aux_free (Mesh_aux *mesh_aux)$/;"	language:C	signature:(Mesh_aux *mesh_aux)
mesh_aux_init	test/src/mesh.c	/^int mesh_aux_init (Mesh *mesh, Mesh_aux *mesh_aux, const char *filename)$/;"	language:C	signature:(Mesh *mesh, Mesh_aux *mesh_aux, const char *filename)
mesh_aux_init_pro	test/src/mesh.c	/^int mesh_aux_init_pro (Mesh *mesh, Mesh_aux *mesh_aux, const char *filename)$/;"	language:C	signature:(Mesh *mesh, Mesh_aux *mesh_aux, const char *filename)
mesh_aux_write	test/src/mesh.c	/^int mesh_aux_write (Mesh_aux *mesh_aux, const char *filename)$/;"	language:C	signature:(Mesh_aux *mesh_aux, const char *filename)
mesh_aux_write_pro	test/src/mesh.c	/^int mesh_aux_write_pro (Mesh_aux *mesh_aux, const char *filename)$/;"	language:C	signature:(Mesh_aux *mesh_aux, const char *filename)
mesh_free	test/src/mesh.c	/^int mesh_free (Mesh *mesh)$/;"	language:C	signature:(Mesh *mesh)
mesh_init	test/src/mesh.c	/^int mesh_init (Mesh *mesh, const char *filename)$/;"	language:C	signature:(Mesh *mesh, const char *filename)
mesh_init_pro	test/src/mesh.c	/^int mesh_init_pro (Mesh *mesh, const char *filename)$/;"	language:C	signature:(Mesh *mesh, const char *filename)
mesh_out	test/include/misc.h	/^    int mesh_out;$/;"	language:C++
mesh_refine	test/src/mesh.c	/^int mesh_refine(Mesh *mesh, Mesh_aux *mesh_aux)$/;"	language:C	signature:(Mesh *mesh, Mesh_aux *mesh_aux)
mesh_write	test/src/mesh.c	/^int mesh_write (Mesh *mesh, const char *filename)$/;"	language:C	signature:(Mesh *mesh, const char *filename)
mesh_write_pro	test/src/mesh.c	/^int mesh_write_pro (Mesh *mesh, const char *filename)$/;"	language:C	signature:(Mesh *mesh, const char *filename)
mflags	base/extra/dlmalloc/dlmalloc.c	/^  flag_t     mflags;$/;"	language:C
mflags	base/include/malloc.c.h	/^  flag_t     mflags;$/;"	language:C++
mgl_data	base/include/fasp.h	/^	AMG_data *mgl_data;$/;"	language:C++
mgl_data	base/include/fasp_block.h	/^	AMG_data *mgl_data; \/**< AMG data for presure-presure block *\/$/;"	language:C++
mgl_data	base/include/fasp_block.h	/^	AMG_data_bsr *mgl_data;$/;"	language:C++
minsize_for_tree_index	base/extra/dlmalloc/dlmalloc.c	2763;"	language:C
minsize_for_tree_index	base/include/malloc.c.h	2864;"	language:C++
mmap_align	base/extra/dlmalloc/dlmalloc.c	2535;"	language:C
mmap_align	base/extra/dlmalloc/dlmalloc.c	2537;"	language:C
mmap_align	base/include/malloc.c.h	2636;"	language:C++
mmap_align	base/include/malloc.c.h	2638;"	language:C++
mmap_aligned	base/include/malloc.c.h	/^static void* mmap_aligned(void *start, size_t length, int prot, int flags, int fd, off_t offset) {$/;"	language:C++	signature:(void *start, size_t length, int prot, int flags, int fd, off_t offset)
mmap_alloc	base/extra/dlmalloc/dlmalloc.c	/^static void* mmap_alloc(mstate m, size_t nb) {$/;"	language:C	signature:(mstate m, size_t nb)
mmap_alloc	base/include/malloc.c.h	/^static void* mmap_alloc(mstate m, size_t nb) {$/;"	language:C++	signature:(mstate m, size_t nb)
mmap_resize	base/extra/dlmalloc/dlmalloc.c	/^static mchunkptr mmap_resize(mstate m, mchunkptr oldp, size_t nb) {$/;"	language:C	signature:(mstate m, mchunkptr oldp, size_t nb)
mmap_resize	base/include/malloc.c.h	/^static mchunkptr mmap_resize(mstate m, mchunkptr oldp, size_t nb) {$/;"	language:C++	signature:(mstate m, mchunkptr oldp, size_t nb)
mmap_threshold	base/extra/dlmalloc/dlmalloc.c	/^  size_t mmap_threshold;$/;"	language:C
mmap_threshold	base/include/malloc.c.h	/^  size_t mmap_threshold;$/;"	language:C++
mparams	base/extra/dlmalloc/dlmalloc.c	/^static struct malloc_params mparams;$/;"	language:C
mparams	base/include/malloc.c.h	/^static struct malloc_params mparams;$/;"	language:C++
msegment	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_segment  msegment;$/;"	language:C
msegment	base/include/malloc.c.h	/^typedef struct malloc_segment  msegment;$/;"	language:C++
msegmentptr	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_segment* msegmentptr;$/;"	language:C
msegmentptr	base/include/malloc.c.h	/^typedef struct malloc_segment* msegmentptr;$/;"	language:C++
mspace	base/extra/dlmalloc/dlmalloc.c	/^typedef void* mspace;$/;"	language:C
mspace	base/include/dlmalloc.h	/^typedef void* mspace;$/;"	language:C++
mspace	base/include/malloc.c.h	/^typedef void* mspace;$/;"	language:C++
mspace_calloc	base/extra/dlmalloc/dlmalloc.c	/^void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size) {$/;"	language:C	signature:(mspace msp, size_t n_elements, size_t elem_size)
mspace_calloc	base/include/malloc.c.h	/^void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size) {$/;"	language:C++	signature:(mspace msp, size_t n_elements, size_t elem_size)
mspace_footprint	base/extra/dlmalloc/dlmalloc.c	/^size_t mspace_footprint(mspace msp) {$/;"	language:C	signature:(mspace msp)
mspace_footprint	base/include/malloc.c.h	/^size_t mspace_footprint(mspace msp) {$/;"	language:C++	signature:(mspace msp)
mspace_free	base/extra/dlmalloc/dlmalloc.c	/^void mspace_free(mspace msp, void* mem) {$/;"	language:C	signature:(mspace msp, void* mem)
mspace_free	base/include/malloc.c.h	/^void mspace_free(mspace msp, void* mem) {$/;"	language:C++	signature:(mspace msp, void* mem)
mspace_independent_calloc	base/extra/dlmalloc/dlmalloc.c	/^void** mspace_independent_calloc(mspace msp, size_t n_elements,$/;"	language:C	signature:(mspace msp, size_t n_elements, size_t elem_size, void* chunks[])
mspace_independent_calloc	base/include/malloc.c.h	/^void** mspace_independent_calloc(mspace msp, size_t n_elements,$/;"	language:C++	signature:(mspace msp, size_t n_elements, size_t elem_size, void* chunks[])
mspace_independent_comalloc	base/extra/dlmalloc/dlmalloc.c	/^void** mspace_independent_comalloc(mspace msp, size_t n_elements,$/;"	language:C	signature:(mspace msp, size_t n_elements, size_t sizes[], void* chunks[])
mspace_independent_comalloc	base/include/malloc.c.h	/^void** mspace_independent_comalloc(mspace msp, size_t n_elements,$/;"	language:C++	signature:(mspace msp, size_t n_elements, size_t sizes[], void* chunks[])
mspace_mallinfo	base/extra/dlmalloc/dlmalloc.c	/^struct mallinfo mspace_mallinfo(mspace msp) {$/;"	language:C	signature:(mspace msp)
mspace_mallinfo	base/include/malloc.c.h	/^struct mallinfo mspace_mallinfo(mspace msp) {$/;"	language:C++	signature:(mspace msp)
mspace_malloc	base/extra/dlmalloc/dlmalloc.c	/^void* mspace_malloc(mspace msp, size_t bytes) {$/;"	language:C	signature:(mspace msp, size_t bytes)
mspace_malloc	base/include/malloc.c.h	/^void* mspace_malloc(mspace msp, size_t bytes) {$/;"	language:C++	signature:(mspace msp, size_t bytes)
mspace_malloc_stats	base/extra/dlmalloc/dlmalloc.c	/^void mspace_malloc_stats(mspace msp) {$/;"	language:C	signature:(mspace msp)
mspace_malloc_stats	base/include/malloc.c.h	/^void mspace_malloc_stats(mspace msp) {$/;"	language:C++	signature:(mspace msp)
mspace_mallopt	base/extra/dlmalloc/dlmalloc.c	/^int mspace_mallopt(int param_number, int value) {$/;"	language:C	signature:(int param_number, int value)
mspace_mallopt	base/include/malloc.c.h	/^int mspace_mallopt(int param_number, int value) {$/;"	language:C++	signature:(int param_number, int value)
mspace_max_footprint	base/extra/dlmalloc/dlmalloc.c	/^size_t mspace_max_footprint(mspace msp) {$/;"	language:C	signature:(mspace msp)
mspace_max_footprint	base/include/malloc.c.h	/^size_t mspace_max_footprint(mspace msp) {$/;"	language:C++	signature:(mspace msp)
mspace_memalign	base/extra/dlmalloc/dlmalloc.c	/^void* mspace_memalign(mspace msp, size_t alignment, size_t bytes) {$/;"	language:C	signature:(mspace msp, size_t alignment, size_t bytes)
mspace_memalign	base/include/malloc.c.h	/^void* mspace_memalign(mspace msp, size_t alignment, size_t bytes) {$/;"	language:C++	signature:(mspace msp, size_t alignment, size_t bytes)
mspace_realloc	base/extra/dlmalloc/dlmalloc.c	/^void* mspace_realloc(mspace msp, void* oldmem, size_t bytes) {$/;"	language:C	signature:(mspace msp, void* oldmem, size_t bytes)
mspace_realloc	base/include/malloc.c.h	/^void* mspace_realloc(mspace msp, void* oldmem, size_t bytes) {$/;"	language:C++	signature:(mspace msp, void* oldmem, size_t bytes)
mspace_track_large_chunks	base/extra/dlmalloc/dlmalloc.c	/^int mspace_track_large_chunks(mspace msp, int enable) {$/;"	language:C	signature:(mspace msp, int enable)
mspace_track_large_chunks	base/include/malloc.c.h	/^int mspace_track_large_chunks(mspace msp, int enable) {$/;"	language:C++	signature:(mspace msp, int enable)
mspace_trim	base/extra/dlmalloc/dlmalloc.c	/^int mspace_trim(mspace msp, size_t pad) {$/;"	language:C	signature:(mspace msp, size_t pad)
mspace_trim	base/include/malloc.c.h	/^int mspace_trim(mspace msp, size_t pad) {$/;"	language:C++	signature:(mspace msp, size_t pad)
mspace_usable_size	base/extra/dlmalloc/dlmalloc.c	/^size_t mspace_usable_size(void* mem) {$/;"	language:C	signature:(void* mem)
mspace_usable_size	base/include/malloc.c.h	/^size_t mspace_usable_size(void* mem) {$/;"	language:C++	signature:(void* mem)
mstate	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_state*    mstate;$/;"	language:C
mstate	base/include/malloc.c.h	/^typedef struct malloc_state*    mstate;$/;"	language:C++
multivec_storage_method	test/include/poisson_fdm.h	/^    int      multivec_storage_method;$/;"	language:C++
mutex	base/extra/dlmalloc/dlmalloc.c	/^  MLOCK_T    mutex;     \/* locate lock among fields that rarely change *\/$/;"	language:C
mutex	base/include/malloc.c.h	/^  MLOCK_T    mutex;     \/* locate lock among fields that rarely change *\/$/;"	language:C++
mytime	test/include/poisson_fdm.h	14;"	language:C++
n	test/include/poisson_fdm.h	/^    int      n;    \/**< @brief order of the matrix *\/$/;"	language:C++
n	test/main/testf.f90	/^  int/;"	language:Fortran
n	tutorial/main/poisson-amg.f90	/^  int/;"	language:Fortran
n	tutorial/main/poisson-pcg.f90	/^  int/;"	language:Fortran
nb	base/include/fasp.h	/^	INT nb;$/;"	language:C++
nb	base/include/fasp_block.h	/^	INT nb; \/\/ for the moment, allow nb*nb full block $/;"	language:C++
nband	base/include/fasp.h	/^	INT nband;	$/;"	language:C++
nband	test/include/poisson_fdm.h	/^    int      nband; \/**< @brief the number of offdiagonal bands *\/$/;"	language:C++
nblk	base/include/fasp.h	/^	INT nblk;$/;"	language:C++
nc	base/include/fasp.h	/^	INT nc;$/;"	language:C++
near_kernel_basis	base/include/fasp.h	/^	REAL **near_kernel_basis;$/;"	language:C++
near_kernel_basis	base/include/fasp_block.h	/^	REAL **near_kernel_basis;$/;"	language:C++
near_kernel_dim	base/include/fasp.h	/^	INT near_kernel_dim;$/;"	language:C++
near_kernel_dim	base/include/fasp_block.h	/^	INT near_kernel_dim;$/;"	language:C++
nedalloc	base/include/nedmalloc.h	/^namespace nedalloc {$/;"	language:C++
nedblksize	base/include/nedmalloc.h	160;"	language:C++
nedcalloc	base/include/nedmalloc.h	148;"	language:C++
nedfree	base/include/nedmalloc.h	150;"	language:C++
nedindependent_calloc	base/include/nedmalloc.h	157;"	language:C++
nedindependent_comalloc	base/include/nedmalloc.h	158;"	language:C++
nedmallinfo	base/include/nedmalloc.h	/^struct nedmallinfo {$/;"	language:C++
nedmallinfo	base/include/nedmalloc.h	152;"	language:C++
nedmalloc	base/include/nedmalloc.h	147;"	language:C++
nedmalloc_footprint	base/include/nedmalloc.h	156;"	language:C++
nedmalloc_stats	base/include/nedmalloc.h	155;"	language:C++
nedmalloc_trim	base/include/nedmalloc.h	154;"	language:C++
nedmallopt	base/include/nedmalloc.h	153;"	language:C++
nedmemalign	base/include/nedmalloc.h	151;"	language:C++
nedpool	base/include/nedmalloc.h	/^typedef struct nedpool_t nedpool;$/;"	language:C++
nedrealloc	base/include/nedmalloc.h	149;"	language:C++
neigh	base/include/fasp.h	/^	ivector *neigh;$/;"	language:C++
neigh	base/include/fasp_block.h	/^	ivector *neigh; \/**< neighbor information of the reservoir block *\/$/;"	language:C++
next	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_segment* next;   \/* ptr to next segment *\/$/;"	language:C
next	base/include/fasp.h	/^	INT next;$/;"	language:C++
next	base/include/malloc.c.h	/^  struct malloc_segment* next;   \/* ptr to next segment *\/$/;"	language:C++
next_chunk	base/extra/dlmalloc/dlmalloc.c	2140;"	language:C
next_chunk	base/include/malloc.c.h	2262;"	language:C++
next_node	base/include/fasp.h	/^	struct linked_list *next_node;$/;"	language:C++
next_pinuse	base/extra/dlmalloc/dlmalloc.c	2144;"	language:C
next_pinuse	base/include/malloc.c.h	2266;"	language:C++
nfail	test/main/regression.c	/^unsigned INT  nfail;    \/**< number of failed tests *\/$/;"	language:C
nfail_amg	test/main/testmm.c	/^unsigned INT  nfail_amg[num_solvers];     \/**< number of failed tests for amg preconditioner *\/$/;"	language:C
nfail_amg_solver	test/main/testmm.c	/^unsigned INT  nfail_amg_solver;           \/**< number of failed tests for amg solver *\/$/;"	language:C
nfail_diag	test/main/testmm.c	/^unsigned INT  nfail_diag[num_solvers];    \/**< number of failed tests for diag preconditioner *\/$/;"	language:C
nfail_ilu	test/main/testmm.c	/^unsigned INT  nfail_ilu[num_solvers];     \/**< number of failed tests for ilu preconditioner *\/$/;"	language:C
ngrid	base/include/fasp.h	/^	INT ngrid;$/;"	language:C++
nl_amli_krylov_type	base/include/fasp.h	/^    SHORT nl_amli_krylov_type;$/;"	language:C++
nl_amli_krylov_type	base/include/fasp_block.h	/^    SHORT nl_amli_krylov_type;$/;"	language:C++
nnz	base/include/fasp.h	/^	INT nnz;$/;"	language:C++
nnz	test/main/testf.f90	/^  integer          :: iufile, n, nnz,/;"	language:Fortran
nnz	tutorial/main/poisson-amg.f90	/^  integer          :: iufile, n, nnz,/;"	language:Fortran
nnz	tutorial/main/poisson-pcg.f90	/^  integer          :: iufile, n, nnz,/;"	language:Fortran
node	test/include/mesh.h	/^    ddenmat node;$/;"	language:C++
node_bd	test/include/mesh.h	/^    ivector node_bd;$/;"	language:C++
nt	test/include/misc.h	/^    int nt;$/;"	language:C++
ntest	test/main/regression.c	/^unsigned INT  ntest;    \/**< number of tests all together *\/$/;"	language:C
ntest_amg	test/main/testmm.c	/^unsigned INT  ntest_amg[num_solvers];     \/**< number of tests all together for amg preconditioner *\/$/;"	language:C
ntest_amg_solver	test/main/testmm.c	/^unsigned INT  ntest_amg_solver;           \/**< number of tests all together for amg solver *\/$/;"	language:C
ntest_diag	test/main/testmm.c	/^unsigned INT  ntest_diag[num_solvers];    \/**< number of tests all together for diag preconditioner *\/$/;"	language:C
ntest_ilu	test/main/testmm.c	/^unsigned INT  ntest_ilu[num_solvers];     \/**< number of tests all together for ilu preconditioner *\/$/;"	language:C
num_cols	test/include/poisson_fdm.h	/^    int      num_cols;$/;"	language:C++
num_levels	base/include/fasp.h	/^	SHORT num_levels;$/;"	language:C++
num_levels	base/include/fasp_block.h	/^	INT num_levels;$/;"	language:C++
num_nonzeros	test/include/poisson_fdm.h	/^    int      num_nonzeros;$/;"	language:C++
num_prob	test/main/testmm.c	21;"	language:C
num_qp_mat	test/include/misc.h	/^    int num_qp_mat;$/;"	language:C++
num_qp_rhs	test/include/misc.h	/^    int num_qp_rhs;$/;"	language:C++
num_rownnz	test/include/poisson_fdm.h	/^    int      num_rownnz; $/;"	language:C++
num_rows	test/include/poisson_fdm.h	/^    int      num_rows;$/;"	language:C++
num_solvers	test/main/testmm.c	22;"	language:C
num_vectors	test/include/poisson_fdm.h	/^    int      num_vectors;$/;"	language:C++
numfac_bsr	base/src/ilu_setup_bsr.c	/^static INT numfac_bsr (dBSRmat *A, $/;"	language:C	signature:(dBSRmat *A, REAL *luval, INT *jlu, INT *uptr)
nwork	base/include/fasp.h	/^	INT nwork;$/;"	language:C++
nx	base/include/fasp.h	/^	INT nx;	  $/;"	language:C++
nx	test/include/poisson_fdm.h	/^    int      nx; \/**< @brief number of nodes along x-direction(excluding boundary nodes) *\/$/;"	language:C++
nxy	base/include/fasp.h	/^	INT nxy;$/;"	language:C++
ny	base/include/fasp.h	/^	INT ny;	$/;"	language:C++
ny	test/include/poisson_fdm.h	/^    int      ny; \/**< @brief number of nodes along y-direction(excluding boundary nodes) *\/$/;"	language:C++
nz	base/include/fasp.h	/^	INT nz;$/;"	language:C++
nz	test/include/poisson_fdm.h	/^    int      nz; \/**< @brief number of nodes along z-direction(excluding boundary nodes) *\/$/;"	language:C++
nz_diff	base/include/fasp.h	/^	INT *nz_diff;$/;"	language:C++
nzlu	base/include/fasp.h	/^	INT nzlu;$/;"	language:C++
offdiag	base/include/fasp.h	/^	REAL **offdiag;$/;"	language:C++
offdiag	test/include/poisson_fdm.h	/^    double **offdiag;$/;"	language:C++
offsets	base/include/fasp.h	/^	INT *offsets;$/;"	language:C++
offsets	test/include/poisson_fdm.h	/^    int     *offsets;$/;"	language:C++
ok_address	base/extra/dlmalloc/dlmalloc.c	2865;"	language:C
ok_address	base/extra/dlmalloc/dlmalloc.c	2874;"	language:C
ok_address	base/include/malloc.c.h	2966;"	language:C++
ok_address	base/include/malloc.c.h	2975;"	language:C++
ok_inuse	base/extra/dlmalloc/dlmalloc.c	2869;"	language:C
ok_inuse	base/extra/dlmalloc/dlmalloc.c	2876;"	language:C
ok_inuse	base/include/malloc.c.h	2970;"	language:C++
ok_inuse	base/include/malloc.c.h	2977;"	language:C++
ok_magic	base/extra/dlmalloc/dlmalloc.c	2882;"	language:C
ok_magic	base/extra/dlmalloc/dlmalloc.c	2884;"	language:C
ok_magic	base/include/malloc.c.h	2983;"	language:C++
ok_magic	base/include/malloc.c.h	2985;"	language:C++
ok_next	base/extra/dlmalloc/dlmalloc.c	2867;"	language:C
ok_next	base/extra/dlmalloc/dlmalloc.c	2875;"	language:C
ok_next	base/include/malloc.c.h	2968;"	language:C++
ok_next	base/include/malloc.c.h	2976;"	language:C++
ok_pinuse	base/extra/dlmalloc/dlmalloc.c	2871;"	language:C
ok_pinuse	base/extra/dlmalloc/dlmalloc.c	2877;"	language:C
ok_pinuse	base/include/malloc.c.h	2972;"	language:C++
ok_pinuse	base/include/malloc.c.h	2978;"	language:C++
option	test/include/misc.h	/^    char option[128];$/;"	language:C++
ordblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE ordblks;  \/* number of free chunks *\/$/;"	language:C
ordblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE ordblks;  \/* number of free chunks *\/$/;"	language:C++
ordblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE ordblks;  \/* number of free chunks *\/$/;"	language:C++
ordblks	base/include/nedmalloc.h	/^  size_t ordblks;  \/* number of free chunks *\/$/;"	language:C++
order	base/include/fasp.h	/^	ivector *order;$/;"	language:C++
order	base/include/fasp_block.h	/^	ivector *order; \/**< order for smoothing *\/$/;"	language:C++
order	base/include/fasp_block.h	/^	ivector *order; \/**< ordering of the reservoir block *\/$/;"	language:C++
orderone	base/src/interpolation.c	/^static SHORT orderone (INT **mat, $/;"	language:C	signature:(INT **mat, REAL **matval, INT *lengths)
output_type	base/include/fasp.h	/^	SHORT output_type; \/**< type of output stream *\/$/;"	language:C++
overhead_for	base/extra/dlmalloc/dlmalloc.c	2159;"	language:C
overhead_for	base/include/malloc.c.h	2281;"	language:C++
owns_data	test/include/poisson_fdm.h	/^    int      owns_data;$/;"	language:C++
p	base/include/fasp.h	/^	REAL (*p)[2]; \/**< Coordinates of vertices *\/$/;"	language:C++
pad_request	base/extra/dlmalloc/dlmalloc.c	2098;"	language:C
pad_request	base/include/malloc.c.h	2220;"	language:C++
page_align	base/extra/dlmalloc/dlmalloc.c	2524;"	language:C
page_align	base/include/malloc.c.h	2625;"	language:C++
page_size	base/extra/dlmalloc/dlmalloc.c	/^  size_t page_size;$/;"	language:C
page_size	base/include/malloc.c.h	/^  size_t page_size;$/;"	language:C++
parent	base/extra/dlmalloc/dlmalloc.c	/^  struct malloc_tree_chunk* parent;$/;"	language:C
parent	base/include/malloc.c.h	/^  struct malloc_tree_chunk* parent;$/;"	language:C++
pcgrid2d	base/include/fasp.h	/^typedef const grid2d *pcgrid2d; \/**< Grid in 2d *\/$/;"	language:C++
pdiri	base/include/fasp.h	/^	INT *pdiri; \/**< Boundary flags (0 <=> interior point) *\/$/;"	language:C++
perf_idx	base/include/fasp_block.h	/^	ivector *perf_idx; \/**< index of blocks which have perforation *\/$/;"	language:C++
perf_idx	base/include/fasp_block.h	/^	ivector *perf_idx; \/**< variable index for perf *\/$/;"	language:C++
perf_neigh	base/include/fasp_block.h	/^	ivector *perf_neigh; \/**< index of blocks which are neighbors of perforations (include perforations) *\/$/;"	language:C++
pfather	base/include/fasp.h	/^	INT *pfather; \/**< Father point or edge *\/$/;"	language:C++
pgrid2d	base/include/fasp.h	/^typedef grid2d *pgrid2d; \/**< Grid in 2d *\/$/;"	language:C++
pi	test/main/testfct_heat.inl	8;"	language:C++
pinuse	base/extra/dlmalloc/dlmalloc.c	2127;"	language:C
pinuse	base/include/malloc.c.h	2249;"	language:C++
pivot	base/include/fasp.h	/^	ivector *pivot;$/;"	language:C++
pivot	base/include/fasp_block.h	/^	ivector *pivot; \/**< pivot for the GS\/bGS smoother for the reservoir matrix *\/$/;"	language:C++
pivot	base/include/fasp_block.h	/^	ivector *pivot; \/**< the pivot for the GS\/block GS smoother (whole reservoir matrix) *\/$/;"	language:C++
pivotS	base/include/fasp.h	/^	ivector *pivotS;$/;"	language:C++
pivotS	base/include/fasp_block.h	/^	ivector *pivotS; \/**< the pivot for the GS\/block GS smoother (saturation block) *\/$/;"	language:C++
pivot_S	base/include/fasp_block.h	/^	ivector *pivot_S; \/**< pivot for the GS\/block GS smoother for saturation block *\/$/;"	language:C++
polynomial_degree	base/include/fasp.h	/^    SHORT polynomial_degree;$/;"	language:C++
postsmooth_iter	base/include/fasp.h	/^	SHORT postsmooth_iter;$/;"	language:C++
postsmooth_iter	base/include/fasp_block.h	/^	SHORT postsmooth_iter;$/;"	language:C++
precond	base/include/fasp.h	/^} precond; \/**< Data for general preconditioner passed to iterative solvers *\/$/;"	language:C++
precond_FASP_blkoil_data	base/include/fasp_block.h	/^typedef struct precond_FASP_blkoil_data{$/;"	language:C++
precond_FASP_blkoil_data	base/include/fasp_block.h	/^} precond_FASP_blkoil_data; \/**< FASP precond data for Reservoir Simulation *\/$/;"	language:C++
precond_block_data	base/include/fasp_block.h	/^} precond_block_data; \/**< Precond data for block matrices *\/$/;"	language:C++
precond_block_reservoir_data	base/include/fasp_block.h	/^typedef struct precond_block_reservoir_data {$/;"	language:C++
precond_block_reservoir_data	base/include/fasp_block.h	/^} precond_block_reservoir_data; \/**< Precond data for Reservoir Simulation *\/$/;"	language:C++
precond_data	base/include/fasp.h	/^} precond_data; \/**< Data for general preconditioner *\/$/;"	language:C++
precond_data_bsr	base/include/fasp_block.h	/^} precond_data_bsr; \/**< Preconditioner data for BSR matrices *\/$/;"	language:C++
precond_data_str	base/include/fasp.h	/^} precond_data_str; \/**< Data for preconditioner of STR matrices *\/$/;"	language:C++
precond_diagbsr	base/include/fasp.h	/^} precond_diagbsr; \/**< Data for diagonal preconditioner of BSR matrices *\/$/;"	language:C++
precond_diagstr	base/include/fasp.h	/^} precond_diagstr; \/**< Data for diagonal preconditioner of STR matrices *\/$/;"	language:C++
precond_type	base/include/fasp.h	/^	SHORT precond_type;  \/**< preconditioner type: see message.h *\/$/;"	language:C++
precond_type	base/include/fasp.h	/^	SHORT precond_type; \/**< type of preconditioner for iterative solvers *\/$/;"	language:C++
prepend_alloc	base/extra/dlmalloc/dlmalloc.c	/^static void* prepend_alloc(mstate m, char* newbase, char* oldbase,$/;"	language:C	signature:(mstate m, char* newbase, char* oldbase, size_t nb)
prepend_alloc	base/include/malloc.c.h	/^static void* prepend_alloc(mstate m, char* newbase, char* oldbase,$/;"	language:C++	signature:(mstate m, char* newbase, char* oldbase, size_t nb)
presmooth_iter	base/include/fasp.h	/^	SHORT presmooth_iter;$/;"	language:C++
presmooth_iter	base/include/fasp_block.h	/^	SHORT presmooth_iter;$/;"	language:C++
prev	base/include/fasp.h	/^	INT prev;$/;"	language:C++
prev_chunk	base/extra/dlmalloc/dlmalloc.c	2141;"	language:C
prev_chunk	base/include/malloc.c.h	2263;"	language:C++
prev_foot	base/extra/dlmalloc/dlmalloc.c	/^  size_t                    prev_foot;$/;"	language:C
prev_foot	base/extra/dlmalloc/dlmalloc.c	/^  size_t               prev_foot;  \/* Size of previous chunk (if free).  *\/$/;"	language:C
prev_foot	base/include/malloc.c.h	/^  size_t                    prev_foot;$/;"	language:C++
prev_foot	base/include/malloc.c.h	/^  size_t               prev_foot;  \/* Size of previous chunk (if free).  *\/$/;"	language:C++
prev_node	base/include/fasp.h	/^	struct linked_list *prev_node;$/;"	language:C++
print_amgcomplexity	base/src/message.c	/^void print_amgcomplexity (AMG_data *mgl, $/;"	language:C	signature:(AMG_data *mgl, const SHORT prtlvl)
print_cputime	base/src/message.c	/^void print_cputime (const char *message, $/;"	language:C	signature:(const char *message, const REAL cputime)
print_itinfo	base/src/message.c	/^void print_itinfo (const INT ptrlvl, $/;"	language:C	signature:(const INT ptrlvl, const INT stop_type, const INT iter, const REAL relres, const REAL absres, const REAL factor)
print_level	base/include/fasp.h	/^	SHORT print_level;   \/**< print level: 0--10 *\/	$/;"	language:C++
print_level	base/include/fasp.h	/^	SHORT print_level; \/**< print level *\/$/;"	language:C++
print_level	base/include/fasp.h	/^	SHORT print_level;$/;"	language:C++
print_level	base/include/fasp_block.h	/^	SHORT print_level;$/;"	language:C++
print_message	base/src/message.c	/^void print_message (const INT ptrlvl, $/;"	language:C	signature:(const INT ptrlvl, const char *message)
problem_num	base/include/fasp.h	/^	INT  problem_num; \/**< problem number to solve *\/$/;"	language:C++
prt_lvl	test/main/testf.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl,/;"	language:Fortran
prt_lvl	tutorial/main/poisson-amg.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl,/;"	language:Fortran
prt_lvl	tutorial/main/poisson-pcg.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl,/;"	language:Fortran
pthread_acquire_lock	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE int pthread_acquire_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
pthread_acquire_lock	base/include/malloc.c.h	/^static FORCEINLINE int pthread_acquire_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
pthread_init_lock	base/extra/dlmalloc/dlmalloc.c	/^static int pthread_init_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
pthread_init_lock	base/include/malloc.c.h	/^static int pthread_init_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
pthread_mlock_t	base/extra/dlmalloc/dlmalloc.c	/^struct pthread_mlock_t {$/;"	language:C
pthread_mlock_t	base/include/malloc.c.h	/^struct pthread_mlock_t {$/;"	language:C++
pthread_mutexattr_settype	base/extra/dlmalloc/dlmalloc.c	1837;"	language:C
pthread_mutexattr_settype	base/include/malloc.c.h	1960;"	language:C++
pthread_release_lock	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE void pthread_release_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
pthread_release_lock	base/include/malloc.c.h	/^static FORCEINLINE void pthread_release_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
pthread_try_lock	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE int pthread_try_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
pthread_try_lock	base/include/malloc.c.h	/^static FORCEINLINE int pthread_try_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
put_byte	base/src/graphics.c	/^static void put_byte(FILE *fp, INT c)$/;"	language:C	signature:(FILE *fp, INT c)
put_dword	base/src/graphics.c	/^static void put_dword(FILE *fp, INT d)$/;"	language:C	signature:(FILE *fp, INT d)
put_word	base/src/graphics.c	/^static void put_word(FILE *fp, INT w)$/;"	language:C	signature:(FILE *fp, INT w)
qsplit	base/extra/sparsekit/ilu.f	/^      subroutine qsplit(/;"	language:Fortran
r	base/include/fasp.h	/^	dvector r; $/;"	language:C++
r	base/include/fasp.h	/^	dvector r; \/**< temporary dvector used to store and restore the residual *\/$/;"	language:C++
r	base/include/fasp_block.h	/^	dvector  *r; \/**< problem data, the right-hand side vector *\/$/;"	language:C++
r	base/include/fasp_block.h	/^	dvector r; \/**< temporary dvector used to store and restore the residual *\/$/;"	language:C++
rap_setup	test/main/testrap.c	/^static void rap_setup(AMG_data *mgl, AMG_param *param)$/;"	language:C	signature:(AMG_data *mgl, AMG_param *param)
rb0b3d	base/src/smoother_csr.c	/^void rb0b3d(INT *ia, $/;"	language:C	signature:(INT *ia, INT *ja, REAL *aa, REAL *u, REAL *f, INT *mark, INT nx, INT ny, INT nz, INT nsweeps)
rb0f3d	base/src/smoother_csr.c	/^void rb0f3d( INT *ia, $/;"	language:C	signature:( INT *ia, INT *ja, REAL *aa, REAL *u, REAL *f, INT *mark, INT nx, INT ny, INT nz, INT nsweeps )
refine_lvl	test/include/misc.h	/^    int refine_lvl;$/;"	language:C++
relaxation	base/include/fasp.h	/^	REAL relaxation;$/;"	language:C++
relaxation	base/include/fasp_block.h	/^	REAL relaxation;$/;"	language:C++
release_checks	base/extra/dlmalloc/dlmalloc.c	/^  size_t     release_checks;$/;"	language:C
release_checks	base/include/malloc.c.h	/^  size_t     release_checks;$/;"	language:C++
release_unused_segments	base/extra/dlmalloc/dlmalloc.c	/^static size_t release_unused_segments(mstate m) {$/;"	language:C	signature:(mstate m)
release_unused_segments	base/include/malloc.c.h	/^static size_t release_unused_segments(mstate m) {$/;"	language:C++	signature:(mstate m)
remove_node	base/src/coarsening_rs.c	/^void remove_node (LinkList *LoL_head_ptr, $/;"	language:C	signature:(LinkList *LoL_head_ptr, LinkList *LoL_tail_ptr, INT measure, INT index, INT *lists, INT *where)
replace_dv	base/extra/dlmalloc/dlmalloc.c	3471;"	language:C
replace_dv	base/include/malloc.c.h	3590;"	language:C++
request2size	base/extra/dlmalloc/dlmalloc.c	2102;"	language:C
request2size	base/include/malloc.c.h	2224;"	language:C++
reset_on_error	base/extra/dlmalloc/dlmalloc.c	/^static void reset_on_error(mstate m) {$/;"	language:C	signature:(mstate m)
reset_on_error	base/include/malloc.c.h	/^static void reset_on_error(mstate m) {$/;"	language:C++	signature:(mstate m)
restart	base/include/fasp.h	/^	INT   restart;       \/**< number of steps for restarting: for GMRES etc *\/$/;"	language:C++
restart	base/include/fasp.h	/^	INT restart; \/**< restart number used in GMRES *\/$/;"	language:C++
restart	base/include/fasp_block.h	/^	INT  restart; \/**< number of iterations for restart *\/$/;"	language:C++
rhsloc	base/include/fasp.h	/^	REAL *rhsloc;$/;"	language:C++
row	base/include/fasp.h	/^	INT row;	  $/;"	language:C++
row	base/include/fasp.h	/^	INT row;   $/;"	language:C++
row	base/include/fasp.h	/^	INT row;$/;"	language:C++
row_idx	base/include/fasp_block.h	/^	ivector **row_idx; \/**< problem data, row indices *\/$/;"	language:C++
rownnz	test/include/poisson_fdm.h	/^    int     *rownnz;$/;"	language:C++
s	base/include/fasp.h	/^	INT (*s)[3]; \/**< Edges of triangles *\/$/;"	language:C++
same_or_left_bits	base/extra/dlmalloc/dlmalloc.c	2789;"	language:C
same_or_left_bits	base/include/malloc.c.h	2890;"	language:C++
sbinptr	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_chunk* sbinptr;  \/* The type of bins of chunks *\/$/;"	language:C
sbinptr	base/include/malloc.c.h	/^typedef struct malloc_chunk* sbinptr;  \/* The type of bins of chunks *\/$/;"	language:C++
scaled	base/include/fasp.h	/^	SHORT scaled;$/;"	language:C++
scaled	base/include/fasp_block.h	/^	SHORT scaled; \/**< scaled = 1 means the the following RR block is diagonal scaled *\/$/;"	language:C++
scaled	base/include/fasp_block.h	/^	SHORT scaled; \/**< whether the matirx is scaled *\/$/;"	language:C++
schwarz	base/include/fasp.h	/^	Schwarz_data schwarz;$/;"	language:C++
schwarz_levels	base/include/fasp.h	/^	INT schwarz_levels;$/;"	language:C++
schwarz_maxlvl	base/include/fasp.h	/^	INT schwarz_maxlvl;$/;"	language:C++
schwarz_mmsize	base/include/fasp.h	/^	INT schwarz_mmsize;$/;"	language:C++
schwarz_mmsize	base/include/fasp.h	/^    INT schwarz_mmsize;$/;"	language:C++
schwarz_type	base/include/fasp.h	/^	INT schwarz_type;$/;"	language:C++
schwarz_type	base/include/fasp.h	/^	SHORT schwarz_type;$/;"	language:C++
seg	base/extra/dlmalloc/dlmalloc.c	/^  msegment   seg;$/;"	language:C
seg	base/include/malloc.c.h	/^  msegment   seg;$/;"	language:C++
segment_holding	base/extra/dlmalloc/dlmalloc.c	/^static msegmentptr segment_holding(mstate m, char* addr) {$/;"	language:C	signature:(mstate m, char* addr)
segment_holding	base/include/malloc.c.h	/^static msegmentptr segment_holding(mstate m, char* addr) {$/;"	language:C++	signature:(mstate m, char* addr)
segment_holds	base/extra/dlmalloc/dlmalloc.c	2549;"	language:C
segment_holds	base/include/malloc.c.h	2650;"	language:C++
set_foot	base/extra/dlmalloc/dlmalloc.c	2148;"	language:C
set_foot	base/include/malloc.c.h	2270;"	language:C++
set_free_with_pinuse	base/extra/dlmalloc/dlmalloc.c	2155;"	language:C
set_free_with_pinuse	base/include/malloc.c.h	2277;"	language:C++
set_inuse	base/extra/dlmalloc/dlmalloc.c	2908;"	language:C
set_inuse	base/extra/dlmalloc/dlmalloc.c	2931;"	language:C
set_inuse	base/include/malloc.c.h	3009;"	language:C++
set_inuse	base/include/malloc.c.h	3032;"	language:C++
set_inuse_and_pinuse	base/extra/dlmalloc/dlmalloc.c	2913;"	language:C
set_inuse_and_pinuse	base/extra/dlmalloc/dlmalloc.c	2936;"	language:C
set_inuse_and_pinuse	base/include/malloc.c.h	3014;"	language:C++
set_inuse_and_pinuse	base/include/malloc.c.h	3037;"	language:C++
set_lock	base/extra/dlmalloc/dlmalloc.c	2518;"	language:C
set_lock	base/include/malloc.c.h	2619;"	language:C++
set_size_and_pinuse_of_free_chunk	base/extra/dlmalloc/dlmalloc.c	2151;"	language:C
set_size_and_pinuse_of_free_chunk	base/include/malloc.c.h	2273;"	language:C++
set_size_and_pinuse_of_inuse_chunk	base/extra/dlmalloc/dlmalloc.c	2918;"	language:C
set_size_and_pinuse_of_inuse_chunk	base/extra/dlmalloc/dlmalloc.c	2941;"	language:C
set_size_and_pinuse_of_inuse_chunk	base/include/malloc.c.h	3019;"	language:C++
set_size_and_pinuse_of_inuse_chunk	base/include/malloc.c.h	3042;"	language:C++
setup_heat	test/src/heat_fem.c	/^int setup_heat (dCSRmat *A_heat,$/;"	language:C	signature:(dCSRmat *A_heat, dCSRmat *Mass, dvector *b_heat, Mesh *mesh, Mesh_aux *mesh_aux, FEM_param *pt, dvector *uh_heat, Bd_apply_info *bdinfo, double dt)
setup_poisson	test/src/poisson_fem.c	/^int setup_poisson (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dvector *b, Mesh *mesh, Mesh_aux *mesh_aux, FEM_param *pt, dvector *ptr_uh, ivector *dof)
sfactr	base/src/factor.f	/^      subroutine sfactr(/;"	language:Fortran
sfactr_new	base/src/factor.f	/^      subroutine sfactr_new(/;"	language:Fortran
sflags	base/extra/dlmalloc/dlmalloc.c	/^  flag_t       sflags;           \/* mmap and extern flag *\/$/;"	language:C
sflags	base/include/malloc.c.h	/^  flag_t       sflags;           \/* mmap and extern flag *\/$/;"	language:C++
shift	base/src/schwarz.f	/^      subroutine shift(/;"	language:Fortran
should_trim	base/extra/dlmalloc/dlmalloc.c	2575;"	language:C
should_trim	base/extra/dlmalloc/dlmalloc.c	2577;"	language:C
should_trim	base/include/malloc.c.h	2676;"	language:C++
should_trim	base/include/malloc.c.h	2678;"	language:C++
size	base/extra/dlmalloc/dlmalloc.c	/^  size_t       size;             \/* allocated size *\/$/;"	language:C
size	base/include/malloc.c.h	/^  size_t       size;             \/* allocated size *\/$/;"	language:C++
size	test/include/poisson_fdm.h	/^    int      size;     \/**< @brief length of the vector  *\/$/;"	language:C++
size	test/include/poisson_fdm.h	/^    int      size;$/;"	language:C++
small_index	base/extra/dlmalloc/dlmalloc.c	2680;"	language:C
small_index	base/include/malloc.c.h	2781;"	language:C++
small_index2size	base/extra/dlmalloc/dlmalloc.c	2681;"	language:C
small_index2size	base/include/malloc.c.h	2782;"	language:C++
smallbin_at	base/extra/dlmalloc/dlmalloc.c	2685;"	language:C
smallbin_at	base/include/malloc.c.h	2786;"	language:C++
smallbins	base/extra/dlmalloc/dlmalloc.c	/^  mchunkptr  smallbins[(NSMALLBINS+1)*2];$/;"	language:C
smallbins	base/include/malloc.c.h	/^  mchunkptr  smallbins[(NSMALLBINS+1)*2];$/;"	language:C++
smallmap	base/extra/dlmalloc/dlmalloc.c	/^  binmap_t   smallmap;$/;"	language:C
smallmap	base/include/malloc.c.h	/^  binmap_t   smallmap;$/;"	language:C++
smallmap_is_marked	base/extra/dlmalloc/dlmalloc.c	2776;"	language:C
smallmap_is_marked	base/include/malloc.c.h	2877;"	language:C++
smat_amxv	base/src/blas_str.c	/^static inline void smat_amxv (REAL alpha, $/;"	language:C	signature:(REAL alpha, REAL *a, REAL *b, INT n, REAL *c)
smat_amxv_nc3	base/src/blas_str.c	/^static inline void smat_amxv_nc3 (REAL alpha, $/;"	language:C	signature:(REAL alpha, REAL *a, REAL *b, REAL *c)
smat_amxv_nc5	base/src/blas_str.c	/^static inline void smat_amxv_nc5 (REAL alpha, $/;"	language:C	signature:(REAL alpha, REAL *a, REAL *b, REAL *c)
smblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE smblks;   \/* always 0 *\/$/;"	language:C
smblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE smblks;   \/* always 0 *\/$/;"	language:C++
smblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE smblks;   \/* always 0 *\/$/;"	language:C++
smblks	base/include/nedmalloc.h	/^  size_t smblks;   \/* always 0 *\/$/;"	language:C++
smooth_agg	base/src/amg_setup_sa.c	/^static void smooth_agg (dCSRmat *A, $/;"	language:C	signature:(dCSRmat *A, dCSRmat *tentp, dCSRmat *P, AMG_param *param, INT levelNum, dCSRmat *N)
smooth_filter	base/include/fasp.h	/^	SHORT smooth_filter;$/;"	language:C++
smooth_order	base/include/fasp.h	/^	SHORT smooth_order;  \/\/ 1: nature order 2: C\/F order (both are symmetric)$/;"	language:C++
smooth_order	base/include/fasp.h	/^	SHORT smooth_order;$/;"	language:C++
smooth_order	base/include/fasp_block.h	/^	SHORT smooth_order;$/;"	language:C++
smoother	base/include/fasp.h	/^	SHORT smoother;$/;"	language:C++
smoother	base/include/fasp_block.h	/^	SHORT smoother;$/;"	language:C++
solver_type	base/include/fasp.h	/^	SHORT solver_type; \/**< type of iterative solvers *\/$/;"	language:C++
spaaxpy_str_2D_block	base/src/blas_str.c	/^static inline void spaaxpy_str_2D_block (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_2D_nc3	base/src/blas_str.c	/^static inline void spaaxpy_str_2D_nc3 (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_2D_nc5	base/src/blas_str.c	/^static inline void spaaxpy_str_2D_nc5(REAL alpha, dSTRmat *A, REAL *x, REAL *y)$/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_2D_scalar	base/src/blas_str.c	/^static inline void spaaxpy_str_2D_scalar (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_3D_block	base/src/blas_str.c	/^static inline void spaaxpy_str_3D_block (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_3D_nc3	base/src/blas_str.c	/^static inline void spaaxpy_str_3D_nc3 (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_3D_nc5	base/src/blas_str.c	/^static inline void spaaxpy_str_3D_nc5 (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_3D_scalar	base/src/blas_str.c	/^static inline void spaaxpy_str_3D_scalar (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
spaaxpy_str_general	base/src/blas_str.c	/^static inline void spaaxpy_str_general (REAL alpha, $/;"	language:C	signature:(REAL alpha, dSTRmat *A, REAL *x, REAL *y)
srtr	base/extra/sparsekit/ilu.f	/^      subroutine srtr(/;"	language:Fortran
start	base/include/fasp.h	/^	INT *start;$/;"	language:C++
stop_type	base/include/fasp.h	/^	SHORT stop_type;     \/**< stopping criteria type *\/$/;"	language:C++
stop_type	base/include/fasp.h	/^	SHORT stop_type; \/**< type of stopping criteria for iterative solvers *\/$/;"	language:C++
storage_manner	base/include/fasp_block.h	/^	INT storage_manner; \/\/ 0: row-major order, 1: column-major order$/;"	language:C++
strong_coupled	base/include/fasp.h	/^	REAL strong_coupled;$/;"	language:C++
strong_threshold	base/include/fasp.h	/^	REAL strong_threshold;$/;"	language:C++
stype	test/main/testf.f90	/^  integer          :: iufile, n, nnz, i, prt_lvl, maxit, stype$/;"	language:Fortran
superlu	base/extra/interface/superlu.c	/^int superlu(dCSRmat *ptrA, dvector *b, dvector *u, const int print_level)$/;"	language:C	signature:(dCSRmat *ptrA, dvector *b, dvector *u, const int print_level)
swep3db	base/src/smoother_csr.c	/^void swep3db(INT *ia, $/;"	language:C	signature:(INT *ia, INT *ja, REAL *aa, REAL *u, REAL *f, INT nbegx, INT nbegy, INT nbegz, INT *mark, INT nx, INT ny, INT nz)
swep3df	base/src/smoother_csr.c	/^void swep3df(INT *ia, $/;"	language:C	signature:(INT *ia, INT *ja, REAL *aa, REAL *u, REAL *f, INT nbegx, INT nbegy, INT nbegz, INT *mark, INT nx, INT ny, INT nz)
symbfactor	base/extra/sparsekit/ilu.f	/^      subroutine symbfactor(/;"	language:Fortran
sys_alloc	base/extra/dlmalloc/dlmalloc.c	/^static void* sys_alloc(mstate m, size_t nb) {$/;"	language:C	signature:(mstate m, size_t nb)
sys_alloc	base/include/malloc.c.h	/^static void* sys_alloc(mstate m, size_t nb) {$/;"	language:C++	signature:(mstate m, size_t nb)
sys_trim	base/extra/dlmalloc/dlmalloc.c	/^static int sys_trim(mstate m, size_t pad) {$/;"	language:C	signature:(mstate m, size_t pad)
sys_trim	base/include/malloc.c.h	/^static int sys_trim(mstate m, size_t pad) {$/;"	language:C++	signature:(mstate m, size_t pad)
t	base/include/fasp.h	/^	INT (*t)[3]; \/**< Vertices of triangles *\/$/;"	language:C++
tail	base/include/fasp.h	/^	INT tail;$/;"	language:C++
tbinptr	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_tree_chunk* tbinptr; \/* The type of bins of trees *\/$/;"	language:C
tbinptr	base/include/malloc.c.h	/^typedef struct malloc_tree_chunk* tbinptr; \/* The type of bins of trees *\/$/;"	language:C++
tchunk	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_tree_chunk  tchunk;$/;"	language:C
tchunk	base/include/malloc.c.h	/^typedef struct malloc_tree_chunk  tchunk;$/;"	language:C++
tchunkptr	base/extra/dlmalloc/dlmalloc.c	/^typedef struct malloc_tree_chunk* tchunkptr;$/;"	language:C
tchunkptr	base/include/malloc.c.h	/^typedef struct malloc_tree_chunk* tchunkptr;$/;"	language:C++
tentative_smooth	base/include/fasp.h	/^	REAL tentative_smooth;$/;"	language:C++
tentative_smooth	base/include/fasp_block.h	/^	REAL tentative_smooth;$/;"	language:C++
test	test/main/testf.f90	/^program test$/;"	language:Fortran
test	tutorial/main/poisson-amg.f90	/^program test$/;"	language:Fortran
test	tutorial/main/poisson-pcg.f90	/^program test$/;"	language:Fortran
tfather	base/include/fasp.h	/^	INT *tfather; \/**< Father triangle *\/$/;"	language:C++
thread_ini_flag	base/src/fasp_get_num_threads.c	/^INT thread_ini_flag = 0;$/;"	language:C
threadid	base/extra/dlmalloc/dlmalloc.c	/^  long threadid;$/;"	language:C
threadid	base/extra/dlmalloc/dlmalloc.c	/^  pthread_t threadid;$/;"	language:C
threadid	base/include/malloc.c.h	/^  long threadid;$/;"	language:C++
threadid	base/include/malloc.c.h	/^  pthread_t threadid;$/;"	language:C++
tmalloc_large	base/extra/dlmalloc/dlmalloc.c	/^static void* tmalloc_large(mstate m, size_t nb) {$/;"	language:C	signature:(mstate m, size_t nb)
tmalloc_large	base/include/malloc.c.h	/^static void* tmalloc_large(mstate m, size_t nb) {$/;"	language:C++	signature:(mstate m, size_t nb)
tmalloc_small	base/extra/dlmalloc/dlmalloc.c	/^static void* tmalloc_small(mstate m, size_t nb) {$/;"	language:C	signature:(mstate m, size_t nb)
tmalloc_small	base/include/malloc.c.h	/^static void* tmalloc_small(mstate m, size_t nb) {$/;"	language:C++	signature:(mstate m, size_t nb)
tol	base/include/fasp.h	/^	REAL  tol;           \/**< convergence tolerance *\/$/;"	language:C++
tol	base/include/fasp.h	/^	REAL tol;$/;"	language:C++
tol	base/include/fasp_block.h	/^	REAL tol; \/**< tolerance *\/ $/;"	language:C++
tol	base/include/fasp_block.h	/^	REAL tol;$/;"	language:C++
tol	test/main/testf.f90	/^  double precision :: tol$/;"	language:Fortran
tol	tutorial/main/poisson-amg.f90	/^  double precision :: tol$/;"	language:Fortran
tol	tutorial/main/poisson-pcg.f90	/^  double precision :: tol$/;"	language:Fortran
top	base/extra/dlmalloc/dlmalloc.c	/^  mchunkptr  top;$/;"	language:C
top	base/include/malloc.c.h	/^  mchunkptr  top;$/;"	language:C++
topsize	base/extra/dlmalloc/dlmalloc.c	/^  size_t     topsize;$/;"	language:C
topsize	base/include/malloc.c.h	/^  size_t     topsize;$/;"	language:C++
total_alloc_count	base/src/memory.c	/^unsigned INT total_alloc_count = 0; \/\/ Total number of allocations$/;"	language:C
total_alloc_mem	base/src/memory.c	/^unsigned INT total_alloc_mem   = 0; \/\/ Total allocated memory amount$/;"	language:C
traverse_and_check	base/extra/dlmalloc/dlmalloc.c	/^static size_t traverse_and_check(mstate m) {$/;"	language:C	signature:(mstate m)
traverse_and_check	base/include/malloc.c.h	/^static size_t traverse_and_check(mstate m) {$/;"	language:C++	signature:(mstate m)
treebin_at	base/extra/dlmalloc/dlmalloc.c	2686;"	language:C
treebin_at	base/include/malloc.c.h	2787;"	language:C++
treebins	base/extra/dlmalloc/dlmalloc.c	/^  tbinptr    treebins[NTREEBINS];$/;"	language:C
treebins	base/include/malloc.c.h	/^  tbinptr    treebins[NTREEBINS];$/;"	language:C++
treemap	base/extra/dlmalloc/dlmalloc.c	/^  binmap_t   treemap;$/;"	language:C
treemap	base/include/malloc.c.h	/^  binmap_t   treemap;$/;"	language:C++
treemap_is_marked	base/extra/dlmalloc/dlmalloc.c	2780;"	language:C
treemap_is_marked	base/include/malloc.c.h	2881;"	language:C++
triangles	base/include/fasp.h	/^	INT triangles; \/**< Number of triangles *\/$/;"	language:C++
trim_check	base/extra/dlmalloc/dlmalloc.c	/^  size_t     trim_check;$/;"	language:C
trim_check	base/include/malloc.c.h	/^  size_t     trim_check;$/;"	language:C++
trim_threshold	base/extra/dlmalloc/dlmalloc.c	/^  size_t trim_threshold;$/;"	language:C
trim_threshold	base/include/malloc.c.h	/^  size_t trim_threshold;$/;"	language:C++
truncation_threshold	base/include/fasp.h	/^	REAL truncation_threshold;$/;"	language:C++
u	test/main/testf.f90	/^  doub/;"	language:Fortran
u	test/main/testfct_heat.inl	/^double u (double *p)$/;"	language:C++	signature:(double *p)
u	test/main/testfct_poisson.inl	/^double u (double *p)$/;"	language:C++	signature:(double *p)
u	tutorial/main/poisson-amg.f90	/^  doub/;"	language:Fortran
u	tutorial/main/poisson-pcg.f90	/^  doub/;"	language:Fortran
u_x	test/main/testfct_heat.inl	/^double u_x (double *p)$/;"	language:C++	signature:(double *p)
u_x	test/main/testfct_poisson.inl	/^double u_x (double *p)$/;"	language:C++	signature:(double *p)
u_y	test/main/testfct_heat.inl	/^double u_y (double *p)$/;"	language:C++	signature:(double *p)
u_y	test/main/testfct_poisson.inl	/^double u_y (double *p)$/;"	language:C++	signature:(double *p)
umfpack	base/extra/interface/umfpack.c	/^int umfpack(dCSRmat *ptrA, dvector *b, dvector *u, const int print_level)$/;"	language:C	signature:(dCSRmat *ptrA, dvector *b, dvector *u, const int print_level)
umfpack_factorize	base/extra/interface/umfpack.c	/^int umfpack_factorize(dCSRmat *ptrA, void *Numeric, const int print_level)$/;"	language:C	signature:(dCSRmat *ptrA, void *Numeric, const int print_level)
umfpack_free_numeric	base/extra/interface/umfpack.c	/^int umfpack_free_numeric(void *Numeric)$/;"	language:C	signature:(void *Numeric)
umfpack_solve	base/extra/interface/umfpack.c	/^int umfpack_solve(dCSRmat *ptrA, dvector *b, dvector *u, void *Numeric, const int print_level)$/;"	language:C	signature:(dCSRmat *ptrA, dvector *b, dvector *u, void *Numeric, const int print_level)
unlink_chunk	base/extra/dlmalloc/dlmalloc.c	3630;"	language:C
unlink_chunk	base/include/malloc.c.h	3749;"	language:C++
unlink_first_small_chunk	base/extra/dlmalloc/dlmalloc.c	3451;"	language:C
unlink_first_small_chunk	base/include/malloc.c.h	3570;"	language:C++
unlink_large_chunk	base/extra/dlmalloc/dlmalloc.c	3553;"	language:C
unlink_large_chunk	base/include/malloc.c.h	3672;"	language:C++
unlink_small_chunk	base/extra/dlmalloc/dlmalloc.c	3431;"	language:C
unlink_small_chunk	base/include/malloc.c.h	3550;"	language:C++
uordblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE uordblks; \/* total allocated space *\/$/;"	language:C
uordblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE uordblks; \/* total allocated space *\/$/;"	language:C++
uordblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE uordblks; \/* total allocated space *\/$/;"	language:C++
uordblks	base/include/nedmalloc.h	/^  size_t uordblks; \/* total allocated space *\/$/;"	language:C++
use_lock	base/extra/dlmalloc/dlmalloc.c	2507;"	language:C
use_lock	base/include/malloc.c.h	2608;"	language:C++
use_mmap	base/extra/dlmalloc/dlmalloc.c	2511;"	language:C
use_mmap	base/include/malloc.c.h	2612;"	language:C++
use_noncontiguous	base/extra/dlmalloc/dlmalloc.c	2515;"	language:C
use_noncontiguous	base/include/malloc.c.h	2616;"	language:C++
usmblks	base/extra/dlmalloc/dlmalloc.c	/^  MALLINFO_FIELD_TYPE usmblks;  \/* maximum total allocated space *\/$/;"	language:C
usmblks	base/include/dlmalloc.h	/^  MALLINFO_FIELD_TYPE usmblks;  \/* maximum total allocated space *\/$/;"	language:C++
usmblks	base/include/malloc.c.h	/^  MALLINFO_FIELD_TYPE usmblks;  \/* maximum total allocated space *\/$/;"	language:C++
usmblks	base/include/nedmalloc.h	/^  size_t usmblks;  \/* maximum total allocated space *\/$/;"	language:C++
val	base/include/fasp.h	/^	INT **val;$/;"	language:C++
val	base/include/fasp.h	/^	INT *val;$/;"	language:C++
val	base/include/fasp.h	/^	REAL **val;$/;"	language:C++
val	base/include/fasp.h	/^	REAL *val;$/;"	language:C++
val	base/include/fasp_block.h	/^	REAL *val;$/;"	language:C++
vecstride	test/include/poisson_fdm.h	/^    int      vecstride, idxstride;$/;"	language:C++
vertices	base/include/fasp.h	/^	INT vertices; \/**< Number of grid points *\/$/;"	language:C++
w	base/include/fasp.h	/^	REAL *w; $/;"	language:C++
w	base/include/fasp.h	/^	REAL *w; \/**<  temporary work space for other usage *\/$/;"	language:C++
w	base/include/fasp.h	/^	dvector w;$/;"	language:C++
w	base/include/fasp_block.h	/^	REAL *w; \/**<  temporary work space for other usage *\/$/;"	language:C++
w	base/include/fasp_block.h	/^	dvector w;$/;"	language:C++
win32_acquire_lock	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE int win32_acquire_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
win32_acquire_lock	base/include/malloc.c.h	/^static FORCEINLINE int win32_acquire_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
win32_mlock_t	base/extra/dlmalloc/dlmalloc.c	/^struct win32_mlock_t {$/;"	language:C
win32_mlock_t	base/include/malloc.c.h	/^struct win32_mlock_t {$/;"	language:C++
win32_release_lock	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE void win32_release_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
win32_release_lock	base/include/malloc.c.h	/^static FORCEINLINE void win32_release_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
win32_try_lock	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE int win32_try_lock (MLOCK_T *sl) {$/;"	language:C	signature:(MLOCK_T *sl)
win32_try_lock	base/include/malloc.c.h	/^static FORCEINLINE int win32_try_lock (MLOCK_T *sl) {$/;"	language:C++	signature:(MLOCK_T *sl)
win32direct_mmap	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE void* win32direct_mmap(size_t size) {$/;"	language:C	signature:(size_t size)
win32direct_mmap	base/include/malloc.c.h	/^static FORCEINLINE void* win32direct_mmap(size_t size) {$/;"	language:C++	signature:(size_t size)
win32mmap	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE void* win32mmap(size_t size) {$/;"	language:C	signature:(size_t size)
win32mmap	base/include/malloc.c.h	/^static FORCEINLINE void* win32mmap(size_t size) {$/;"	language:C++	signature:(size_t size)
win32munmap	base/extra/dlmalloc/dlmalloc.c	/^static FORCEINLINE int win32munmap(void* ptr, size_t size) {$/;"	language:C	signature:(void* ptr, size_t size)
win32munmap	base/include/malloc.c.h	/^static FORCEINLINE int win32munmap(void* ptr, size_t size) {$/;"	language:C++	signature:(void* ptr, size_t size)
work	base/include/fasp.h	/^	REAL *work;$/;"	language:C++
workdir	base/include/fasp.h	/^	char workdir[256]; \/**< working directory for data files *\/$/;"	language:C++
write_bmp16	base/src/graphics.c	/^static INT write_bmp16(const char *fname, INT m, INT n, const char map[])$/;"	language:C	signature:(const char *fname, INT m, INT n, const char map[])
x	base/include/fasp.h	/^	dvector x;$/;"	language:C++
x	base/include/fasp_block.h	/^	dvector x;$/;"	language:C++
